
temp_reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008430  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008600  08008600  00009600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00009a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008a80  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001e0  08008c60  0000a1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08008c60  0000a560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f75  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  0001c185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d71  00000000  00000000  0001fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b2a  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe0  00000000  00000000  0004450b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5444  00000000  00000000  0005a4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f92f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  0012f974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00135320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085e8 	.word	0x080085e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080085e8 	.word	0x080085e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a32      	ldr	r2, [pc, #200]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a2b      	ldr	r2, [pc, #172]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_GPIO_Init+0xe8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8000f6c:	4825      	ldr	r0, [pc, #148]	@ (8001004 <MX_GPIO_Init+0xec>)
 8000f6e:	f002 f8a3 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8;
 8000f72:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481e      	ldr	r0, [pc, #120]	@ (8001004 <MX_GPIO_Init+0xec>)
 8000f8c:	f001 fee8 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000f90:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4818      	ldr	r0, [pc, #96]	@ (8001008 <MX_GPIO_Init+0xf0>)
 8000fa8:	f001 feda 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <MX_GPIO_Init+0xec>)
 8000fc4:	f001 fecc 	bl	8002d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2103      	movs	r1, #3
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f001 fe90 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f001 fea9 	bl	8002d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2103      	movs	r1, #3
 8000fdc:	2017      	movs	r0, #23
 8000fde:	f001 fe88 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe2:	2017      	movs	r0, #23
 8000fe4:	f001 fea1 	bl	8002d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2103      	movs	r1, #3
 8000fec:	2028      	movs	r0, #40	@ 0x28
 8000fee:	f001 fe80 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff2:	2028      	movs	r0, #40	@ 0x28
 8000ff4:	f001 fe99 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400

0800100c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_I2C1_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <MX_I2C1_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_I2C1_Init+0x50>)
 8001018:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <MX_I2C1_Init+0x58>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_I2C1_Init+0x50>)
 800102a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800102e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_I2C1_Init+0x50>)
 800104a:	f002 f867 	bl	800311c <HAL_I2C_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001054:	f000 fe7a 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200001fc 	.word	0x200001fc
 8001060:	40005400 	.word	0x40005400
 8001064:	000186a0 	.word	0x000186a0

08001068 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_I2C_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12b      	bne.n	80010e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23c0      	movs	r3, #192	@ 0xc0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010aa:	2312      	movs	r3, #18
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <HAL_I2C_MspInit+0x8c>)
 80010c2:	f001 fe4d 	bl	8002d60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint32_t us)   //Mikrosekunde
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <delay+0x2c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<us);
 8001108:	bf00      	nop
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <delay+0x2c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d8f9      	bhi.n	800110a <delay+0x12>
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000338 	.word	0x20000338

08001128 <lcd_send_cmd>:

/*************************** LCD ***************************/
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd(char cmd)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    char upper_bits, lower_bits;
    uint8_t data[4];

    upper_bits = cmd & 0xF0;         // Get the upper 4 bits
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f023 030f 	bic.w	r3, r3, #15
 8001138:	73fb      	strb	r3, [r7, #15]
    lower_bits = (cmd << 4) & 0xF0; // Shift the lower 4 bits to the upper position
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	73bb      	strb	r3, [r7, #14]

    data[0] = upper_bits | 0x0C;    // Set EN=1 and RS=0
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	f043 030c 	orr.w	r3, r3, #12
 8001146:	b2db      	uxtb	r3, r3
 8001148:	723b      	strb	r3, [r7, #8]
    data[1] = upper_bits | 0x08;    // Set EN=0 and RS=0
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	b2db      	uxtb	r3, r3
 8001152:	727b      	strb	r3, [r7, #9]
    data[2] = lower_bits | 0x0C;    // Set EN=1 and RS=0
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	f043 030c 	orr.w	r3, r3, #12
 800115a:	b2db      	uxtb	r3, r3
 800115c:	72bb      	strb	r3, [r7, #10]
    data[3] = lower_bits | 0x08;    // Set EN=0 and RS=0
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data, 4, 100); // Send data via I2C
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2304      	movs	r3, #4
 8001172:	214e      	movs	r1, #78	@ 0x4e
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <lcd_send_cmd+0x5c>)
 8001176:	f002 f915 	bl	80033a4 <HAL_I2C_Master_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001fc 	.word	0x200001fc

08001188 <lcd_send_data>:


void lcd_send_data(char data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    char upper_bits, lower_bits;
    uint8_t values[4];

    upper_bits = data & 0xF0;         // Get the upper 4 bits
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	73fb      	strb	r3, [r7, #15]
    lower_bits = (data << 4) & 0xF0; // Shift the lower 4 bits to the upper position
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	73bb      	strb	r3, [r7, #14]

    values[0] = upper_bits | 0x0D;   // Set EN=1 and RS=1
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f043 030d 	orr.w	r3, r3, #13
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	723b      	strb	r3, [r7, #8]
    values[1] = upper_bits | 0x09;   // Set EN=0 and RS=1
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	f043 0309 	orr.w	r3, r3, #9
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	727b      	strb	r3, [r7, #9]
    values[2] = lower_bits | 0x0D;   // Set EN=1 and RS=1
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	f043 030d 	orr.w	r3, r3, #13
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	72bb      	strb	r3, [r7, #10]
    values[3] = lower_bits | 0x09;   // Set EN=0 and RS=1
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	f043 0309 	orr.w	r3, r3, #9
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, values, 4, 100); // Send data via I2C
 80011c8:	f107 0208 	add.w	r2, r7, #8
 80011cc:	2364      	movs	r3, #100	@ 0x64
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2304      	movs	r3, #4
 80011d2:	214e      	movs	r1, #78	@ 0x4e
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <lcd_send_data+0x5c>)
 80011d6:	f002 f8e5 	bl	80033a4 <HAL_I2C_Master_Transmit>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001fc 	.word	0x200001fc

080011e8 <lcd_clear>:


void lcd_clear (void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80011ee:	2080      	movs	r0, #128	@ 0x80
 80011f0:	f7ff ff9a 	bl	8001128 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e005      	b.n	8001206 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80011fa:	2020      	movs	r0, #32
 80011fc:	f7ff ffc4 	bl	8001188 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b45      	cmp	r3, #69	@ 0x45
 800120a:	ddf6      	ble.n	80011fa <lcd_clear+0x12>
	}
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <lcd_put_cur+0x18>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <lcd_put_cur+0x22>
 800122c:	e009      	b.n	8001242 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001234:	603b      	str	r3, [r7, #0]
            break;
 8001236:	e004      	b.n	8001242 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800123e:	603b      	str	r3, [r7, #0]
            break;
 8001240:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff6e 	bl	8001128 <lcd_send_cmd>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <lcd_init>:


void lcd_init (void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001258:	2032      	movs	r0, #50	@ 0x32
 800125a:	f001 fc4b 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800125e:	2030      	movs	r0, #48	@ 0x30
 8001260:	f7ff ff62 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001264:	2005      	movs	r0, #5
 8001266:	f001 fc45 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800126a:	2030      	movs	r0, #48	@ 0x30
 800126c:	f7ff ff5c 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001270:	2001      	movs	r0, #1
 8001272:	f001 fc3f 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001276:	2030      	movs	r0, #48	@ 0x30
 8001278:	f7ff ff56 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f001 fc39 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001282:	2020      	movs	r0, #32
 8001284:	f7ff ff50 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f001 fc33 	bl	8002af4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800128e:	2028      	movs	r0, #40	@ 0x28
 8001290:	f7ff ff4a 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f001 fc2d 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800129a:	2008      	movs	r0, #8
 800129c:	f7ff ff44 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f001 fc27 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ff3e 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f001 fc21 	bl	8002af4 <HAL_Delay>
	HAL_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f001 fc1e 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012b8:	2006      	movs	r0, #6
 80012ba:	f7ff ff35 	bl	8001128 <lcd_send_cmd>
	HAL_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fc18 	bl	8002af4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012c4:	200c      	movs	r0, #12
 80012c6:	f7ff ff2f 	bl	8001128 <lcd_send_cmd>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012d6:	e006      	b.n	80012e6 <lcd_send_string+0x18>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff51 	bl	8001188 <lcd_send_data>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f4      	bne.n	80012d8 <lcd_send_string+0xa>
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Display_Temp>:

void Display_Temp(float Temp){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0,0);
 8001314:	2100      	movs	r1, #0
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ff7d 	bl	8001216 <lcd_put_cur>

	sprintf(str, "TEMP: %.2f", Temp);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff f933 	bl	8000588 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	f107 000c 	add.w	r0, r7, #12
 800132a:	4907      	ldr	r1, [pc, #28]	@ (8001348 <Display_Temp+0x50>)
 800132c:	f005 f82e 	bl	800638c <siprintf>
	lcd_send_string(str);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ffca 	bl	80012ce <lcd_send_string>
	lcd_send_data('C');
 800133a:	2043      	movs	r0, #67	@ 0x43
 800133c:	f7ff ff24 	bl	8001188 <lcd_send_data>
}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	08008600 	.word	0x08008600

0800134c <Set_Pin_Output>:
/*************************** DS18B20 ***************************/

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f001 fcf0 	bl	8002d60 <HAL_GPIO_Init>
}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 fcd2 	bl	8002d60 <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80013ce:	2102      	movs	r1, #2
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <DS18B20_Start+0x5c>)
 80013d2:	f7ff ffbb 	bl	800134c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80013d6:	2200      	movs	r2, #0
 80013d8:	2102      	movs	r1, #2
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <DS18B20_Start+0x5c>)
 80013dc:	f001 fe6c 	bl	80030b8 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80013e0:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80013e4:	f7ff fe88 	bl	80010f8 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80013e8:	2102      	movs	r1, #2
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <DS18B20_Start+0x5c>)
 80013ec:	f7ff ffcc 	bl	8001388 <Set_Pin_Input>
    delay (80);    // delay according to datasheet
 80013f0:	2050      	movs	r0, #80	@ 0x50
 80013f2:	f7ff fe81 	bl	80010f8 <delay>
    if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80013f6:	2102      	movs	r1, #2
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <DS18B20_Start+0x5c>)
 80013fa:	f001 fe45 	bl	8003088 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <DS18B20_Start+0x46>
 8001404:	2301      	movs	r3, #1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	e001      	b.n	800140e <DS18B20_Start+0x4a>
    else Response = -1;
 800140a:	23ff      	movs	r3, #255	@ 0xff
 800140c:	71fb      	strb	r3, [r7, #7]

    delay (400); // 480 us delay totally.
 800140e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001412:	f7ff fe71 	bl	80010f8 <delay>

    return Response;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020000 	.word	0x40020000

08001424 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800142e:	2102      	movs	r1, #2
 8001430:	481e      	ldr	r0, [pc, #120]	@ (80014ac <DS18B20_Write+0x88>)
 8001432:	f7ff ff8b 	bl	800134c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e02e      	b.n	800149a <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	fa42 f303 	asr.w	r3, r2, r3
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <DS18B20_Write+0x50>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800144c:	2102      	movs	r1, #2
 800144e:	4817      	ldr	r0, [pc, #92]	@ (80014ac <DS18B20_Write+0x88>)
 8001450:	f7ff ff7c 	bl	800134c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	4814      	ldr	r0, [pc, #80]	@ (80014ac <DS18B20_Write+0x88>)
 800145a:	f001 fe2d 	bl	80030b8 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fe4a 	bl	80010f8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001464:	2102      	movs	r1, #2
 8001466:	4811      	ldr	r0, [pc, #68]	@ (80014ac <DS18B20_Write+0x88>)
 8001468:	f7ff ff8e 	bl	8001388 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 800146c:	2032      	movs	r0, #50	@ 0x32
 800146e:	f7ff fe43 	bl	80010f8 <delay>
 8001472:	e00f      	b.n	8001494 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001474:	2102      	movs	r1, #2
 8001476:	480d      	ldr	r0, [pc, #52]	@ (80014ac <DS18B20_Write+0x88>)
 8001478:	f7ff ff68 	bl	800134c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800147c:	2200      	movs	r2, #0
 800147e:	2102      	movs	r1, #2
 8001480:	480a      	ldr	r0, [pc, #40]	@ (80014ac <DS18B20_Write+0x88>)
 8001482:	f001 fe19 	bl	80030b8 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8001486:	2032      	movs	r0, #50	@ 0x32
 8001488:	f7ff fe36 	bl	80010f8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800148c:	2102      	movs	r1, #2
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <DS18B20_Write+0x88>)
 8001490:	f7ff ff7a 	bl	8001388 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b07      	cmp	r3, #7
 800149e:	ddcd      	ble.n	800143c <DS18B20_Write+0x18>
		}
	}
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020000 	.word	0x40020000

080014b0 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80014ba:	2102      	movs	r1, #2
 80014bc:	481a      	ldr	r0, [pc, #104]	@ (8001528 <DS18B20_Read+0x78>)
 80014be:	f7ff ff63 	bl	8001388 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	e026      	b.n	8001516 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80014c8:	2102      	movs	r1, #2
 80014ca:	4817      	ldr	r0, [pc, #92]	@ (8001528 <DS18B20_Read+0x78>)
 80014cc:	f7ff ff3e 	bl	800134c <Set_Pin_Output>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	4814      	ldr	r0, [pc, #80]	@ (8001528 <DS18B20_Read+0x78>)
 80014d6:	f001 fdef 	bl	80030b8 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 80014da:	2002      	movs	r0, #2
 80014dc:	f7ff fe0c 	bl	80010f8 <delay>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80014e0:	2102      	movs	r1, #2
 80014e2:	4811      	ldr	r0, [pc, #68]	@ (8001528 <DS18B20_Read+0x78>)
 80014e4:	f7ff ff50 	bl	8001388 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 80014e8:	2102      	movs	r1, #2
 80014ea:	480f      	ldr	r0, [pc, #60]	@ (8001528 <DS18B20_Read+0x78>)
 80014ec:	f001 fdcc 	bl	8003088 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80014f6:	2201      	movs	r2, #1
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4313      	orrs	r3, r2
 8001506:	b25b      	sxtb	r3, r3
 8001508:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 800150a:	203c      	movs	r0, #60	@ 0x3c
 800150c:	f7ff fdf4 	bl	80010f8 <delay>
	for (int i=0;i<8;i++)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b07      	cmp	r3, #7
 800151a:	ddd5      	ble.n	80014c8 <DS18B20_Read+0x18>
	}
	return value;
 800151c:	79fb      	ldrb	r3, [r7, #7]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40020000 	.word	0x40020000
 800152c:	00000000 	.word	0x00000000

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001534:	b08c      	sub	sp, #48	@ 0x30
 8001536:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f001 fa6a 	bl	8002a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153c:	f000 fb16 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001540:	f7ff fcea 	bl	8000f18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001544:	f7ff fd62 	bl	800100c <MX_I2C1_Init>
  MX_TIM6_Init();
 8001548:	f001 f8d2 	bl	80026f0 <MX_TIM6_Init>
  MX_TIM3_Init();
 800154c:	f001 f876 	bl	800263c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001550:	f001 f9c2 	bl	80028d8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001554:	f001 f902 	bl	800275c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8001558:	48c3      	ldr	r0, [pc, #780]	@ (8001868 <main+0x338>)
 800155a:	f003 f82f 	bl	80045bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3,  TIM_CHANNEL_1);
 800155e:	2100      	movs	r1, #0
 8001560:	48c2      	ldr	r0, [pc, #776]	@ (800186c <main+0x33c>)
 8001562:	f003 f981 	bl	8004868 <HAL_TIM_PWM_Start>

  lcd_init();
 8001566:	f7ff fe75 	bl	8001254 <lcd_init>
  lcd_send_string("INITIALISING");
 800156a:	48c1      	ldr	r0, [pc, #772]	@ (8001870 <main+0x340>)
 800156c:	f7ff feaf 	bl	80012ce <lcd_send_string>
  HAL_Delay(2000);
 8001570:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001574:	f001 fabe 	bl	8002af4 <HAL_Delay>
  lcd_clear();
 8001578:	f7ff fe36 	bl	80011e8 <lcd_clear>

  P = 20;
 800157c:	4bbd      	ldr	r3, [pc, #756]	@ (8001874 <main+0x344>)
 800157e:	2214      	movs	r2, #20
 8001580:	701a      	strb	r2, [r3, #0]
  I = 20;
 8001582:	4bbd      	ldr	r3, [pc, #756]	@ (8001878 <main+0x348>)
 8001584:	2214      	movs	r2, #20
 8001586:	701a      	strb	r2, [r3, #0]
  D = 0;
 8001588:	4bbc      	ldr	r3, [pc, #752]	@ (800187c <main+0x34c>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]

  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 800158e:	4bb9      	ldr	r3, [pc, #740]	@ (8001874 <main+0x344>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffd6 	bl	8000544 <__aeabi_ui2d>
 8001598:	4604      	mov	r4, r0
 800159a:	460d      	mov	r5, r1
 800159c:	4bb6      	ldr	r3, [pc, #728]	@ (8001878 <main+0x348>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffcf 	bl	8000544 <__aeabi_ui2d>
 80015a6:	4680      	mov	r8, r0
 80015a8:	4689      	mov	r9, r1
 80015aa:	4bb4      	ldr	r3, [pc, #720]	@ (800187c <main+0x34c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffc8 	bl	8000544 <__aeabi_ui2d>
 80015b4:	2300      	movs	r3, #0
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	ec41 0b12 	vmov	d2, r0, r1
 80015c0:	ec49 8b11 	vmov	d1, r8, r9
 80015c4:	ec45 4b10 	vmov	d0, r4, r5
 80015c8:	4bad      	ldr	r3, [pc, #692]	@ (8001880 <main+0x350>)
 80015ca:	4aae      	ldr	r2, [pc, #696]	@ (8001884 <main+0x354>)
 80015cc:	49ae      	ldr	r1, [pc, #696]	@ (8001888 <main+0x358>)
 80015ce:	48af      	ldr	r0, [pc, #700]	@ (800188c <main+0x35c>)
 80015d0:	f000 fbfe 	bl	8001dd0 <PID>



  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80015d4:	2101      	movs	r1, #1
 80015d6:	48ad      	ldr	r0, [pc, #692]	@ (800188c <main+0x35c>)
 80015d8:	f000 fd30 	bl	800203c <PID_SetMode>
  PID_SetSampleTime(&TPID, 500);
 80015dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015e0:	48aa      	ldr	r0, [pc, #680]	@ (800188c <main+0x35c>)
 80015e2:	f000 fe9f 	bl	8002324 <PID_SetSampleTime>
  PID_SetOutputLimits(&TPID, 1, 1000);
 80015e6:	ed9f 1b9c 	vldr	d1, [pc, #624]	@ 8001858 <main+0x328>
 80015ea:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 8001860 <main+0x330>
 80015ee:	48a7      	ldr	r0, [pc, #668]	@ (800188c <main+0x35c>)
 80015f0:	f000 fd42 	bl	8002078 <PID_SetOutputLimits>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(Menu%2 != 0){
 80015f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001890 <main+0x360>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8204 	beq.w	8001a0c <main+0x4dc>
		  clear = 1;
 8001604:	4ba3      	ldr	r3, [pc, #652]	@ (8001894 <main+0x364>)
 8001606:	2201      	movs	r2, #1
 8001608:	801a      	strh	r2, [r3, #0]

		  if(set < 0){set = 0;}
 800160a:	4ba3      	ldr	r3, [pc, #652]	@ (8001898 <main+0x368>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da02      	bge.n	8001618 <main+0xe8>
 8001612:	4ba1      	ldr	r3, [pc, #644]	@ (8001898 <main+0x368>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
		  if(set > 4){set = 4;}
 8001618:	4b9f      	ldr	r3, [pc, #636]	@ (8001898 <main+0x368>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b04      	cmp	r3, #4
 800161e:	dd02      	ble.n	8001626 <main+0xf6>
 8001620:	4b9d      	ldr	r3, [pc, #628]	@ (8001898 <main+0x368>)
 8001622:	2204      	movs	r2, #4
 8001624:	601a      	str	r2, [r3, #0]

		  char str[20] = {0};
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
		  lcd_put_cur(0,0);
 8001638:	2100      	movs	r1, #0
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fdeb 	bl	8001216 <lcd_put_cur>

		  switch(set){
 8001640:	4b95      	ldr	r3, [pc, #596]	@ (8001898 <main+0x368>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d8d5      	bhi.n	80015f4 <main+0xc4>
 8001648:	a201      	add	r2, pc, #4	@ (adr r2, 8001650 <main+0x120>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	08001665 	.word	0x08001665
 8001654:	0800170b 	.word	0x0800170b
 8001658:	080017b1 	.word	0x080017b1
 800165c:	080018c1 	.word	0x080018c1
 8001660:	08001967 	.word	0x08001967

		  case 0:
			  TempSetpoint = 1;
 8001664:	4986      	ldr	r1, [pc, #536]	@ (8001880 <main+0x350>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b8c      	ldr	r3, [pc, #560]	@ (800189c <main+0x36c>)
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
			  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 8001670:	4b80      	ldr	r3, [pc, #512]	@ (8001874 <main+0x344>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff65 	bl	8000544 <__aeabi_ui2d>
 800167a:	4604      	mov	r4, r0
 800167c:	460d      	mov	r5, r1
 800167e:	4b7e      	ldr	r3, [pc, #504]	@ (8001878 <main+0x348>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff5e 	bl	8000544 <__aeabi_ui2d>
 8001688:	4680      	mov	r8, r0
 800168a:	4689      	mov	r9, r1
 800168c:	4b7b      	ldr	r3, [pc, #492]	@ (800187c <main+0x34c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff57 	bl	8000544 <__aeabi_ui2d>
 8001696:	2300      	movs	r3, #0
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2301      	movs	r3, #1
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	ec41 0b12 	vmov	d2, r0, r1
 80016a2:	ec49 8b11 	vmov	d1, r8, r9
 80016a6:	ec45 4b10 	vmov	d0, r4, r5
 80016aa:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <main+0x350>)
 80016ac:	4a75      	ldr	r2, [pc, #468]	@ (8001884 <main+0x354>)
 80016ae:	4976      	ldr	r1, [pc, #472]	@ (8001888 <main+0x358>)
 80016b0:	4876      	ldr	r0, [pc, #472]	@ (800188c <main+0x35c>)
 80016b2:	f000 fb8d 	bl	8001dd0 <PID>
			  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80016b6:	2101      	movs	r1, #1
 80016b8:	4874      	ldr	r0, [pc, #464]	@ (800188c <main+0x35c>)
 80016ba:	f000 fcbf 	bl	800203c <PID_SetMode>
			  PID_SetSampleTime(&TPID, 200);
 80016be:	21c8      	movs	r1, #200	@ 0xc8
 80016c0:	4872      	ldr	r0, [pc, #456]	@ (800188c <main+0x35c>)
 80016c2:	f000 fe2f 	bl	8002324 <PID_SetSampleTime>
			  PID_SetOutputLimits(&TPID, 1, 1000);
 80016c6:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 8001858 <main+0x328>
 80016ca:	ed9f 0b65 	vldr	d0, [pc, #404]	@ 8001860 <main+0x330>
 80016ce:	486f      	ldr	r0, [pc, #444]	@ (800188c <main+0x35c>)
 80016d0:	f000 fcd2 	bl	8002078 <PID_SetOutputLimits>

			  sprintf(str, "Temp not set    ");
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4971      	ldr	r1, [pc, #452]	@ (80018a0 <main+0x370>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fe56 	bl	800638c <siprintf>
			  lcd_send_string(str);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fdf2 	bl	80012ce <lcd_send_string>
			  lcd_put_cur(1,0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fd92 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "                ");
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	496b      	ldr	r1, [pc, #428]	@ (80018a4 <main+0x374>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fe47 	bl	800638c <siprintf>
			  lcd_send_string(str);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fde3 	bl	80012ce <lcd_send_string>
			  break;
 8001708:	e1fd      	b.n	8001b06 <main+0x5d6>
		  case 1:
			  TempSetpoint = 40;
 800170a:	495d      	ldr	r1, [pc, #372]	@ (8001880 <main+0x350>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b65      	ldr	r3, [pc, #404]	@ (80018a8 <main+0x378>)
 8001712:	e9c1 2300 	strd	r2, r3, [r1]
			  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 8001716:	4b57      	ldr	r3, [pc, #348]	@ (8001874 <main+0x344>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff12 	bl	8000544 <__aeabi_ui2d>
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	4b54      	ldr	r3, [pc, #336]	@ (8001878 <main+0x348>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0b 	bl	8000544 <__aeabi_ui2d>
 800172e:	4680      	mov	r8, r0
 8001730:	4689      	mov	r9, r1
 8001732:	4b52      	ldr	r3, [pc, #328]	@ (800187c <main+0x34c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff04 	bl	8000544 <__aeabi_ui2d>
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2301      	movs	r3, #1
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	ec41 0b12 	vmov	d2, r0, r1
 8001748:	ec49 8b11 	vmov	d1, r8, r9
 800174c:	ec45 4b10 	vmov	d0, r4, r5
 8001750:	4b4b      	ldr	r3, [pc, #300]	@ (8001880 <main+0x350>)
 8001752:	4a4c      	ldr	r2, [pc, #304]	@ (8001884 <main+0x354>)
 8001754:	494c      	ldr	r1, [pc, #304]	@ (8001888 <main+0x358>)
 8001756:	484d      	ldr	r0, [pc, #308]	@ (800188c <main+0x35c>)
 8001758:	f000 fb3a 	bl	8001dd0 <PID>
			  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800175c:	2101      	movs	r1, #1
 800175e:	484b      	ldr	r0, [pc, #300]	@ (800188c <main+0x35c>)
 8001760:	f000 fc6c 	bl	800203c <PID_SetMode>
			  PID_SetSampleTime(&TPID, 200);
 8001764:	21c8      	movs	r1, #200	@ 0xc8
 8001766:	4849      	ldr	r0, [pc, #292]	@ (800188c <main+0x35c>)
 8001768:	f000 fddc 	bl	8002324 <PID_SetSampleTime>
			  PID_SetOutputLimits(&TPID, 1, 1000);
 800176c:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001858 <main+0x328>
 8001770:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001860 <main+0x330>
 8001774:	4845      	ldr	r0, [pc, #276]	@ (800188c <main+0x35c>)
 8001776:	f000 fc7f 	bl	8002078 <PID_SetOutputLimits>

			  sprintf(str, "Set temp PLA    ");
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	494b      	ldr	r1, [pc, #300]	@ (80018ac <main+0x37c>)
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fe03 	bl	800638c <siprintf>
			  lcd_send_string(str);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fd9f 	bl	80012ce <lcd_send_string>
			  lcd_put_cur(1,0);
 8001790:	2100      	movs	r1, #0
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff fd3f 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "Heating to 40C  ");
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4944      	ldr	r1, [pc, #272]	@ (80018b0 <main+0x380>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fdf4 	bl	800638c <siprintf>
			  lcd_send_string(str);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd90 	bl	80012ce <lcd_send_string>
			  break;
 80017ae:	e1aa      	b.n	8001b06 <main+0x5d6>
		  case 2:
			  TempSetpoint = 48;
 80017b0:	4933      	ldr	r1, [pc, #204]	@ (8001880 <main+0x350>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b3f      	ldr	r3, [pc, #252]	@ (80018b4 <main+0x384>)
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]
			  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <main+0x344>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe febf 	bl	8000544 <__aeabi_ui2d>
 80017c6:	4604      	mov	r4, r0
 80017c8:	460d      	mov	r5, r1
 80017ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <main+0x348>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_ui2d>
 80017d4:	4680      	mov	r8, r0
 80017d6:	4689      	mov	r9, r1
 80017d8:	4b28      	ldr	r3, [pc, #160]	@ (800187c <main+0x34c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb1 	bl	8000544 <__aeabi_ui2d>
 80017e2:	2300      	movs	r3, #0
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2301      	movs	r3, #1
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	ec41 0b12 	vmov	d2, r0, r1
 80017ee:	ec49 8b11 	vmov	d1, r8, r9
 80017f2:	ec45 4b10 	vmov	d0, r4, r5
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <main+0x350>)
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <main+0x354>)
 80017fa:	4923      	ldr	r1, [pc, #140]	@ (8001888 <main+0x358>)
 80017fc:	4823      	ldr	r0, [pc, #140]	@ (800188c <main+0x35c>)
 80017fe:	f000 fae7 	bl	8001dd0 <PID>
			  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001802:	2101      	movs	r1, #1
 8001804:	4821      	ldr	r0, [pc, #132]	@ (800188c <main+0x35c>)
 8001806:	f000 fc19 	bl	800203c <PID_SetMode>
			  PID_SetSampleTime(&TPID, 200);
 800180a:	21c8      	movs	r1, #200	@ 0xc8
 800180c:	481f      	ldr	r0, [pc, #124]	@ (800188c <main+0x35c>)
 800180e:	f000 fd89 	bl	8002324 <PID_SetSampleTime>
			  PID_SetOutputLimits(&TPID, 1, 1000);
 8001812:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001858 <main+0x328>
 8001816:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001860 <main+0x330>
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <main+0x35c>)
 800181c:	f000 fc2c 	bl	8002078 <PID_SetOutputLimits>

			  sprintf(str, "Set temp PETG   ");
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4924      	ldr	r1, [pc, #144]	@ (80018b8 <main+0x388>)
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fdb0 	bl	800638c <siprintf>
			  lcd_send_string(str);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fd4c 	bl	80012ce <lcd_send_string>
			  lcd_put_cur(1,0);
 8001836:	2100      	movs	r1, #0
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff fcec 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "Heating to 48C  ");
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	491e      	ldr	r1, [pc, #120]	@ (80018bc <main+0x38c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fda1 	bl	800638c <siprintf>
			  lcd_send_string(str);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd3d 	bl	80012ce <lcd_send_string>
			  break;
 8001854:	e157      	b.n	8001b06 <main+0x5d6>
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	408f4000 	.word	0x408f4000
 8001860:	00000000 	.word	0x00000000
 8001864:	3ff00000 	.word	0x3ff00000
 8001868:	20000338 	.word	0x20000338
 800186c:	200002f0 	.word	0x200002f0
 8001870:	0800860c 	.word	0x0800860c
 8001874:	200002e8 	.word	0x200002e8
 8001878:	200002e9 	.word	0x200002e9
 800187c:	200002ea 	.word	0x200002ea
 8001880:	20000000 	.word	0x20000000
 8001884:	200002e0 	.word	0x200002e0
 8001888:	200002d8 	.word	0x200002d8
 800188c:	20000268 	.word	0x20000268
 8001890:	20000008 	.word	0x20000008
 8001894:	20000252 	.word	0x20000252
 8001898:	20000260 	.word	0x20000260
 800189c:	3ff00000 	.word	0x3ff00000
 80018a0:	0800861c 	.word	0x0800861c
 80018a4:	08008630 	.word	0x08008630
 80018a8:	40440000 	.word	0x40440000
 80018ac:	08008644 	.word	0x08008644
 80018b0:	08008658 	.word	0x08008658
 80018b4:	40480000 	.word	0x40480000
 80018b8:	0800866c 	.word	0x0800866c
 80018bc:	08008680 	.word	0x08008680
		  case 3:
			  TempSetpoint = 55;
 80018c0:	4995      	ldr	r1, [pc, #596]	@ (8001b18 <main+0x5e8>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b95      	ldr	r3, [pc, #596]	@ (8001b1c <main+0x5ec>)
 80018c8:	e9c1 2300 	strd	r2, r3, [r1]
			  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 80018cc:	4b94      	ldr	r3, [pc, #592]	@ (8001b20 <main+0x5f0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe37 	bl	8000544 <__aeabi_ui2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	4b92      	ldr	r3, [pc, #584]	@ (8001b24 <main+0x5f4>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe30 	bl	8000544 <__aeabi_ui2d>
 80018e4:	4680      	mov	r8, r0
 80018e6:	4689      	mov	r9, r1
 80018e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001b28 <main+0x5f8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe29 	bl	8000544 <__aeabi_ui2d>
 80018f2:	2300      	movs	r3, #0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2301      	movs	r3, #1
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	ec41 0b12 	vmov	d2, r0, r1
 80018fe:	ec49 8b11 	vmov	d1, r8, r9
 8001902:	ec45 4b10 	vmov	d0, r4, r5
 8001906:	4b84      	ldr	r3, [pc, #528]	@ (8001b18 <main+0x5e8>)
 8001908:	4a88      	ldr	r2, [pc, #544]	@ (8001b2c <main+0x5fc>)
 800190a:	4989      	ldr	r1, [pc, #548]	@ (8001b30 <main+0x600>)
 800190c:	4889      	ldr	r0, [pc, #548]	@ (8001b34 <main+0x604>)
 800190e:	f000 fa5f 	bl	8001dd0 <PID>
			  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001912:	2101      	movs	r1, #1
 8001914:	4887      	ldr	r0, [pc, #540]	@ (8001b34 <main+0x604>)
 8001916:	f000 fb91 	bl	800203c <PID_SetMode>
			  PID_SetSampleTime(&TPID, 200);
 800191a:	21c8      	movs	r1, #200	@ 0xc8
 800191c:	4885      	ldr	r0, [pc, #532]	@ (8001b34 <main+0x604>)
 800191e:	f000 fd01 	bl	8002324 <PID_SetSampleTime>
			  PID_SetOutputLimits(&TPID, 1, 1000);
 8001922:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8001b08 <main+0x5d8>
 8001926:	ed9f 0b7a 	vldr	d0, [pc, #488]	@ 8001b10 <main+0x5e0>
 800192a:	4882      	ldr	r0, [pc, #520]	@ (8001b34 <main+0x604>)
 800192c:	f000 fba4 	bl	8002078 <PID_SetOutputLimits>

			  sprintf(str, "Set temp ASA    ");
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4980      	ldr	r1, [pc, #512]	@ (8001b38 <main+0x608>)
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fd28 	bl	800638c <siprintf>
			  lcd_send_string(str);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fcc4 	bl	80012ce <lcd_send_string>
			  lcd_put_cur(1,0);
 8001946:	2100      	movs	r1, #0
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff fc64 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "Heating to 55C  ");
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	497a      	ldr	r1, [pc, #488]	@ (8001b3c <main+0x60c>)
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fd19 	bl	800638c <siprintf>
			  lcd_send_string(str);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fcb5 	bl	80012ce <lcd_send_string>
			  break;
 8001964:	e0cf      	b.n	8001b06 <main+0x5d6>
		  case 4:
			  TempSetpoint = 50;
 8001966:	496c      	ldr	r1, [pc, #432]	@ (8001b18 <main+0x5e8>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <main+0x610>)
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
			  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, P, I, D, _PID_P_ON_E, _PID_CD_DIRECT);
 8001972:	4b6b      	ldr	r3, [pc, #428]	@ (8001b20 <main+0x5f0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fde4 	bl	8000544 <__aeabi_ui2d>
 800197c:	4604      	mov	r4, r0
 800197e:	460d      	mov	r5, r1
 8001980:	4b68      	ldr	r3, [pc, #416]	@ (8001b24 <main+0x5f4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_ui2d>
 800198a:	4680      	mov	r8, r0
 800198c:	4689      	mov	r9, r1
 800198e:	4b66      	ldr	r3, [pc, #408]	@ (8001b28 <main+0x5f8>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd6 	bl	8000544 <__aeabi_ui2d>
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2301      	movs	r3, #1
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	ec41 0b12 	vmov	d2, r0, r1
 80019a4:	ec49 8b11 	vmov	d1, r8, r9
 80019a8:	ec45 4b10 	vmov	d0, r4, r5
 80019ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001b18 <main+0x5e8>)
 80019ae:	4a5f      	ldr	r2, [pc, #380]	@ (8001b2c <main+0x5fc>)
 80019b0:	495f      	ldr	r1, [pc, #380]	@ (8001b30 <main+0x600>)
 80019b2:	4860      	ldr	r0, [pc, #384]	@ (8001b34 <main+0x604>)
 80019b4:	f000 fa0c 	bl	8001dd0 <PID>
			  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80019b8:	2101      	movs	r1, #1
 80019ba:	485e      	ldr	r0, [pc, #376]	@ (8001b34 <main+0x604>)
 80019bc:	f000 fb3e 	bl	800203c <PID_SetMode>
			  PID_SetSampleTime(&TPID, 200);
 80019c0:	21c8      	movs	r1, #200	@ 0xc8
 80019c2:	485c      	ldr	r0, [pc, #368]	@ (8001b34 <main+0x604>)
 80019c4:	f000 fcae 	bl	8002324 <PID_SetSampleTime>
			  PID_SetOutputLimits(&TPID, 1, 1000);
 80019c8:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001b08 <main+0x5d8>
 80019cc:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8001b10 <main+0x5e0>
 80019d0:	4858      	ldr	r0, [pc, #352]	@ (8001b34 <main+0x604>)
 80019d2:	f000 fb51 	bl	8002078 <PID_SetOutputLimits>

			  sprintf(str, "Set temp TPU    ");
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	495a      	ldr	r1, [pc, #360]	@ (8001b44 <main+0x614>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fcd5 	bl	800638c <siprintf>
			  lcd_send_string(str);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fc71 	bl	80012ce <lcd_send_string>
			  lcd_put_cur(1,0);
 80019ec:	2100      	movs	r1, #0
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fc11 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "Heating to 50C  ");
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4953      	ldr	r1, [pc, #332]	@ (8001b48 <main+0x618>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fcc6 	bl	800638c <siprintf>
			  lcd_send_string(str);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc62 	bl	80012ce <lcd_send_string>
			  break;
 8001a0a:	e07c      	b.n	8001b06 <main+0x5d6>
		  }


	  }else{

		  if(clear == 1){
 8001a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b4c <main+0x61c>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d117      	bne.n	8001a44 <main+0x514>
			  char str[20] = {0};
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
			  lcd_put_cur(0,0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fbf5 	bl	8001216 <lcd_put_cur>
			  sprintf(str, "                ");
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4948      	ldr	r1, [pc, #288]	@ (8001b50 <main+0x620>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fcab 	bl	800638c <siprintf>
			  lcd_send_string(str);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fc48 	bl	80012ce <lcd_send_string>
			  clear = 0;
 8001a3e:	4b43      	ldr	r3, [pc, #268]	@ (8001b4c <main+0x61c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
		  }

	     Presence = DS18B20_Start ();
 8001a44:	f7ff fcbe 	bl	80013c4 <DS18B20_Start>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <main+0x624>)
 8001a4e:	701a      	strb	r2, [r3, #0]
	     DS18B20_Write (0xCC);  // skip ROM
 8001a50:	20cc      	movs	r0, #204	@ 0xcc
 8001a52:	f7ff fce7 	bl	8001424 <DS18B20_Write>
	     DS18B20_Write (0x44);  // convert t
 8001a56:	2044      	movs	r0, #68	@ 0x44
 8001a58:	f7ff fce4 	bl	8001424 <DS18B20_Write>

	     Presence = DS18B20_Start ();
 8001a5c:	f7ff fcb2 	bl	80013c4 <DS18B20_Start>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <main+0x624>)
 8001a66:	701a      	strb	r2, [r3, #0]
	     DS18B20_Write (0xCC);  // skip ROM
 8001a68:	20cc      	movs	r0, #204	@ 0xcc
 8001a6a:	f7ff fcdb 	bl	8001424 <DS18B20_Write>
	     DS18B20_Write (0xBE);  // Read Scratch-pad
 8001a6e:	20be      	movs	r0, #190	@ 0xbe
 8001a70:	f7ff fcd8 	bl	8001424 <DS18B20_Write>

	     Temp_byte1 = DS18B20_Read();
 8001a74:	f7ff fd1c 	bl	80014b0 <DS18B20_Read>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <main+0x628>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	     Temp_byte2 = DS18B20_Read();
 8001a80:	f7ff fd16 	bl	80014b0 <DS18B20_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <main+0x62c>)
 8001a8a:	701a      	strb	r2, [r3, #0]
	     TEMP = ((Temp_byte2<<8))|Temp_byte1;
 8001a8c:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <main+0x62c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b30      	ldr	r3, [pc, #192]	@ (8001b58 <main+0x628>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <main+0x630>)
 8001aa2:	801a      	strh	r2, [r3, #0]
	     Temperature = (float)TEMP/16.0;  // resolution is 0.0625
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <main+0x630>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <main+0x634>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]




	     Temp = Temperature;
 8001abe:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <main+0x634>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd60 	bl	8000588 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4918      	ldr	r1, [pc, #96]	@ (8001b30 <main+0x600>)
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]
	     PID_Compute(&TPID);
 8001ad2:	4818      	ldr	r0, [pc, #96]	@ (8001b34 <main+0x604>)
 8001ad4:	f000 f9c8 	bl	8001e68 <PID_Compute>
	     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PIDOut);
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <main+0x5fc>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	4922      	ldr	r1, [pc, #136]	@ (8001b68 <main+0x638>)
 8001ae0:	680c      	ldr	r4, [r1, #0]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	6363      	str	r3, [r4, #52]	@ 0x34
	     Display_Temp(Temperature);
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <main+0x634>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f7ff fbfe 	bl	80012f8 <Display_Temp>
	     HAL_Delay(300);
 8001afc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b00:	f000 fff8 	bl	8002af4 <HAL_Delay>
 8001b04:	e576      	b.n	80015f4 <main+0xc4>
	  if(Menu%2 != 0){
 8001b06:	e575      	b.n	80015f4 <main+0xc4>
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	408f4000 	.word	0x408f4000
 8001b10:	00000000 	.word	0x00000000
 8001b14:	3ff00000 	.word	0x3ff00000
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	404b8000 	.word	0x404b8000
 8001b20:	200002e8 	.word	0x200002e8
 8001b24:	200002e9 	.word	0x200002e9
 8001b28:	200002ea 	.word	0x200002ea
 8001b2c:	200002e0 	.word	0x200002e0
 8001b30:	200002d8 	.word	0x200002d8
 8001b34:	20000268 	.word	0x20000268
 8001b38:	08008694 	.word	0x08008694
 8001b3c:	080086a8 	.word	0x080086a8
 8001b40:	40490000 	.word	0x40490000
 8001b44:	080086bc 	.word	0x080086bc
 8001b48:	080086d0 	.word	0x080086d0
 8001b4c:	20000252 	.word	0x20000252
 8001b50:	08008630 	.word	0x08008630
 8001b54:	2000025c 	.word	0x2000025c
 8001b58:	20000254 	.word	0x20000254
 8001b5c:	20000255 	.word	0x20000255
 8001b60:	20000256 	.word	0x20000256
 8001b64:	20000258 	.word	0x20000258
 8001b68:	200002f0 	.word	0x200002f0

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	@ 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	2234      	movs	r2, #52	@ 0x34
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fc69 	bl	8006452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <SystemClock_Config+0xd0>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a28      	ldr	r2, [pc, #160]	@ (8001c3c <SystemClock_Config+0xd0>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <SystemClock_Config+0xd0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <SystemClock_Config+0xd4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bb8:	4a21      	ldr	r2, [pc, #132]	@ (8001c40 <SystemClock_Config+0xd4>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001be0:	2308      	movs	r3, #8
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001be4:	2332      	movs	r3, #50	@ 0x32
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 f9f1 	bl	8003fe0 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c04:	f000 f8a2 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 ff17 	bl	8003a58 <HAL_RCC_ClockConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c30:	f000 f88c 	bl	8001d4c <Error_Handler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3750      	adds	r7, #80	@ 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	global_gpio_pin = GPIO_Pin;
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x68>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	8013      	strh	r3, [r2, #0]
	if(global_gpio_pin == GPIO_PIN_4){
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x68>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d108      	bne.n	8001c6e <HAL_GPIO_EXTI_Callback+0x2a>
		 __HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0201 	mvn.w	r2, #1
 8001c64:	611a      	str	r2, [r3, #16]
		 HAL_TIM_Base_Start_IT(&htim10);
 8001c66:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c68:	f002 fd10 	bl	800468c <HAL_TIM_Base_Start_IT>

	else if(global_gpio_pin == GPIO_PIN_9){
		 __HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
		 HAL_TIM_Base_Start_IT(&htim10);
	}
}
 8001c6c:	e01a      	b.n	8001ca4 <HAL_GPIO_EXTI_Callback+0x60>
	else if(global_gpio_pin == GPIO_PIN_10){
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x68>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d108      	bne.n	8001c8a <HAL_GPIO_EXTI_Callback+0x46>
		 __HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8001c78:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0201 	mvn.w	r2, #1
 8001c80:	611a      	str	r2, [r3, #16]
		 HAL_TIM_Base_Start_IT(&htim10);
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c84:	f002 fd02 	bl	800468c <HAL_TIM_Base_Start_IT>
}
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_EXTI_Callback+0x60>
	else if(global_gpio_pin == GPIO_PIN_9){
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x68>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c92:	d107      	bne.n	8001ca4 <HAL_GPIO_EXTI_Callback+0x60>
		 __HAL_TIM_CLEAR_IT(&htim10, TIM_IT_UPDATE);
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0201 	mvn.w	r2, #1
 8001c9c:	611a      	str	r2, [r3, #16]
		 HAL_TIM_Base_Start_IT(&htim10);
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ca0:	f002 fcf4 	bl	800468c <HAL_TIM_Base_Start_IT>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000250 	.word	0x20000250
 8001cb0:	20000380 	.word	0x20000380

08001cb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10){
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d131      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x76>
		if(HAL_GPIO_ReadPin(GPIOB, global_gpio_pin) == GPIO_PIN_RESET){
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481b      	ldr	r0, [pc, #108]	@ (8001d3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cce:	f001 f9db 	bl	8003088 <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d125      	bne.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x70>
			if (global_gpio_pin == GPIO_PIN_4){
 8001cd8:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d105      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x38>
				Menu++;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cea:	701a      	strb	r2, [r3, #0]
			}
			if(Menu%2 != 0){
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d014      	beq.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x70>

				if(global_gpio_pin == GPIO_PIN_10){
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d105      	bne.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x5c>
					set++;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e009      	b.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x70>
				}
				else if(global_gpio_pin == GPIO_PIN_9){
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d18:	d104      	bne.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x70>
					set--;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d22:	6013      	str	r3, [r2, #0]
				}
			}
		}
		HAL_TIM_Base_Stop_IT(&htim10);
 8001d24:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d26:	f002 fd21 	bl	800476c <HAL_TIM_Base_Stop_IT>
	}
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40014400 	.word	0x40014400
 8001d38:	20000250 	.word	0x20000250
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000260 	.word	0x20000260
 8001d48:	20000380 	.word	0x20000380

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <Error_Handler+0x8>

08001d58 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001d88:	f7fe fee6 	bl	8000b58 <__aeabi_dcmpgt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001d9e:	e011      	b.n	8001dc4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001dac:	f7fe feb6 	bl	8000b1c <__aeabi_dcmplt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d100      	bne.n	8001db8 <PID_Init+0x60>
}
 8001db6:	e005      	b.n	8001dc4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0000      	movs	r0, r0
	...

08001dd0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001dd8:	6239      	str	r1, [r7, #32]
 8001dda:	61fa      	str	r2, [r7, #28]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	ed87 0b04 	vstr	d0, [r7, #16]
 8001de2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001de6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	6a3a      	ldr	r2, [r7, #32]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001e02:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001e58 <PID+0x88>
 8001e06:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001e60 <PID+0x90>
 8001e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e0c:	f000 f934 	bl	8002078 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	2264      	movs	r2, #100	@ 0x64
 8001e14:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001e16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e1e:	f000 fa41 	bl	80022a4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001e22:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e26:	4619      	mov	r1, r3
 8001e28:	ed97 2b00 	vldr	d2, [r7]
 8001e2c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e30:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e36:	f000 f98d 	bl	8002154 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001e3a:	f000 fe4f 	bl	8002adc <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	1ad2      	subs	r2, r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	605a      	str	r2, [r3, #4]
	
}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	406fe000 	.word	0x406fe000
	...

08001e68 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <PID_Compute+0x14>
	{
		return _FALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0db      	b.n	8002034 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001e7c:	f000 fe2e 	bl	8002adc <HAL_GetTick>
 8001e80:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	f0c0 80cd 	bcc.w	8002032 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eb0:	f7fe fa0a 	bl	80002c8 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ec6:	f7fe f9ff 	bl	80002c8 <__aeabi_dsub>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001ede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ee2:	f7fe fba9 	bl	8000638 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f9ed 	bl	80002cc <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d114      	bne.n	8001f2e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f14:	f7fe fb90 	bl	8000638 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe f9d2 	bl	80002c8 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001f3a:	f7fe fe0d 	bl	8000b58 <__aeabi_dcmpgt>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001f50:	e010      	b.n	8001f74 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001f5e:	f7fe fddd 	bl	8000b1c <__aeabi_dcmplt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f86:	f7fe fb57 	bl	8000638 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001f92:	e005      	b.n	8001fa0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb0:	f7fe fb42 	bl	8000638 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f7fe f984 	bl	80002c8 <__aeabi_dsub>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fc8:	f7fe f980 	bl	80002cc <__adddf3>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		
		if (output > uPID->OutMax)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fde:	f7fe fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001fee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001ff2:	e00e      	b.n	8002012 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ffe:	f7fe fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800200e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800201a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002024:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002032:	2300      	movs	r3, #0
	}
	
}
 8002034:	4618      	mov	r0, r3
 8002036:	3730      	adds	r7, #48	@ 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}

0800203c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2b01      	cmp	r3, #1
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <PID_SetMode+0x2e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fe77 	bl	8001d58 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	705a      	strb	r2, [r3, #1]
	
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6178      	str	r0, [r7, #20]
 8002080:	ed87 0b02 	vstr	d0, [r7, #8]
 8002084:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800208c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002090:	f7fe fd58 	bl	8000b44 <__aeabi_dcmpge>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d158      	bne.n	800214c <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020a0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 80020a4:	6979      	ldr	r1, [r7, #20]
 80020a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04b      	beq.n	800214e <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80020c4:	f7fe fd48 	bl	8000b58 <__aeabi_dcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]
 80020dc:	e012      	b.n	8002104 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80020ec:	f7fe fd16 	bl	8000b1c <__aeabi_dcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002100:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002110:	f7fe fd22 	bl	8000b58 <__aeabi_dcmpgt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002120:	6979      	ldr	r1, [r7, #20]
 8002122:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002126:	e012      	b.n	800214e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002134:	f7fe fcf2 	bl	8000b1c <__aeabi_dcmplt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800214a:	e000      	b.n	800214e <PID_SetOutputLimits+0xd6>
		return;
 800214c:	bf00      	nop
		}
		else { }
		
	}
	
}
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	61f8      	str	r0, [r7, #28]
 800215c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002160:	ed87 1b02 	vstr	d1, [r7, #8]
 8002164:	ed87 2b00 	vstr	d2, [r7]
 8002168:	460b      	mov	r3, r1
 800216a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002178:	f7fe fcd0 	bl	8000b1c <__aeabi_dcmplt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 8089 	bne.w	8002296 <PID_SetTunings2+0x142>
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002190:	f7fe fcc4 	bl	8000b1c <__aeabi_dcmplt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d17d      	bne.n	8002296 <PID_SetTunings2+0x142>
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021a6:	f7fe fcb9 	bl	8000b1c <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d172      	bne.n	8002296 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	7efa      	ldrb	r2, [r7, #27]
 80021b4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80021b6:	7efb      	ldrb	r3, [r7, #27]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80021c8:	69f9      	ldr	r1, [r7, #28]
 80021ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80021d2:	69f9      	ldr	r1, [r7, #28]
 80021d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80021dc:	69f9      	ldr	r1, [r7, #28]
 80021de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9aa 	bl	8000544 <__aeabi_ui2d>
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <PID_SetTunings2+0x14c>)
 80021f6:	f7fe fb49 	bl	800088c <__aeabi_ddiv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002208:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800220c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002214:	f7fe fa10 	bl	8000638 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	69f9      	ldr	r1, [r7, #28]
 800221e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800222a:	f7fe fb2f 	bl	800088c <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	69f9      	ldr	r1, [r7, #28]
 8002234:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	78db      	ldrb	r3, [r3, #3]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d12b      	bne.n	8002298 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f7fe f83b 	bl	80002c8 <__aeabi_dsub>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f7fe f82d 	bl	80002c8 <__aeabi_dsub>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	69f9      	ldr	r1, [r7, #28]
 8002274:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f7fe f81f 	bl	80002c8 <__aeabi_dsub>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	69f9      	ldr	r1, [r7, #28]
 8002290:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8002294:	e000      	b.n	8002298 <PID_SetTunings2+0x144>
		return;
 8002296:	bf00      	nop
		
	}
	
}
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	408f4000 	.word	0x408f4000

080022a4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02e      	beq.n	8002316 <PID_SetControllerDirection+0x72>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	78db      	ldrb	r3, [r3, #3]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d029      	beq.n	8002316 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	f7fd fffa 	bl	80002c8 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f7fd ffec 	bl	80002c8 <__aeabi_dsub>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	f7fd ffde 	bl	80002c8 <__aeabi_dsub>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	70da      	strb	r2, [r3, #3]
	
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	dd2e      	ble.n	8002392 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f7fe f915 	bl	8000564 <__aeabi_i2d>
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8fe 	bl	8000544 <__aeabi_ui2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fe fa9c 	bl	800088c <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002366:	f7fe f967 	bl	8000638 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800237a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800237e:	f7fe fa85 	bl	800088c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <NMI_Handler+0x4>

080023f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <MemManage_Handler+0x4>

08002404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <UsageFault_Handler+0x4>

08002414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 fb37 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}

0800244a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800244e:	2010      	movs	r0, #16
 8002450:	f000 fe4c 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800245c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002460:	f000 fe44 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800246e:	f002 fac3 	bl	80049f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000380 	.word	0x20000380

0800247c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002480:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002484:	f000 fe32 	bl	80030ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:

int _kill(int pid, int sig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a6:	f004 f827 	bl	80064f8 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
  return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:

void _exit (int status)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <_exit+0x12>

080024d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e00a      	b.n	80024fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e4:	f3af 8000 	nop.w
 80024e8:	4601      	mov	r1, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	dbf0      	blt.n	80024e4 <_read+0x12>
  }

  return len;
 8002502:	687b      	ldr	r3, [r7, #4]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e009      	b.n	8002532 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	60ba      	str	r2, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	dbf1      	blt.n	800251e <_write+0x12>
  }
  return len;
 800253a:	687b      	ldr	r3, [r7, #4]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_close>:

int _close(int file)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800256c:	605a      	str	r2, [r3, #4]
  return 0;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_isatty>:

int _isatty(int file)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f003 ff8c 	bl	80064f8 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20020000 	.word	0x20020000
 800260c:	00000400 	.word	0x00000400
 8002610:	200002ec 	.word	0x200002ec
 8002614:	20000560 	.word	0x20000560

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800265e:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <MX_TIM3_Init+0xac>)
 8002660:	4a22      	ldr	r2, [pc, #136]	@ (80026ec <MX_TIM3_Init+0xb0>)
 8002662:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 8002664:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <MX_TIM3_Init+0xac>)
 8002666:	2231      	movs	r2, #49	@ 0x31
 8002668:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b1f      	ldr	r3, [pc, #124]	@ (80026e8 <MX_TIM3_Init+0xac>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MX_TIM3_Init+0xac>)
 8002672:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <MX_TIM3_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267e:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <MX_TIM3_Init+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002684:	4818      	ldr	r0, [pc, #96]	@ (80026e8 <MX_TIM3_Init+0xac>)
 8002686:	f002 f8a0 	bl	80047ca <HAL_TIM_PWM_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002690:	f7ff fb5c 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	4619      	mov	r1, r3
 80026a2:	4811      	ldr	r0, [pc, #68]	@ (80026e8 <MX_TIM3_Init+0xac>)
 80026a4:	f002 fe04 	bl	80052b0 <HAL_TIMEx_MasterConfigSynchronization>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80026ae:	f7ff fb4d 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b2:	2360      	movs	r3, #96	@ 0x60
 80026b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80026b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_TIM3_Init+0xac>)
 80026cc:	f002 fa84 	bl	8004bd8 <HAL_TIM_PWM_ConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80026d6:	f7ff fb39 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026da:	4803      	ldr	r0, [pc, #12]	@ (80026e8 <MX_TIM3_Init+0xac>)
 80026dc:	f000 f8c2 	bl	8002864 <HAL_TIM_MspPostInit>

}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200002f0 	.word	0x200002f0
 80026ec:	40000400 	.word	0x40000400

080026f0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <MX_TIM6_Init+0x64>)
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <MX_TIM6_Init+0x68>)
 8002702:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 49;
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <MX_TIM6_Init+0x64>)
 8002706:	2231      	movs	r2, #49	@ 0x31
 8002708:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <MX_TIM6_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002710:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <MX_TIM6_Init+0x64>)
 8002712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002716:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <MX_TIM6_Init+0x64>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800271e:	480d      	ldr	r0, [pc, #52]	@ (8002754 <MX_TIM6_Init+0x64>)
 8002720:	f001 fefc 	bl	800451c <HAL_TIM_Base_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800272a:	f7ff fb0f 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	@ (8002754 <MX_TIM6_Init+0x64>)
 800273c:	f002 fdb8 	bl	80052b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002746:	f7ff fb01 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000338 	.word	0x20000338
 8002758:	40001000 	.word	0x40001000

0800275c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <MX_TIM10_Init+0x40>)
 8002762:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <MX_TIM10_Init+0x44>)
 8002764:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <MX_TIM10_Init+0x40>)
 8002768:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800276c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <MX_TIM10_Init+0x40>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <MX_TIM10_Init+0x40>)
 8002776:	2263      	movs	r2, #99	@ 0x63
 8002778:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b08      	ldr	r3, [pc, #32]	@ (800279c <MX_TIM10_Init+0x40>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <MX_TIM10_Init+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	@ (800279c <MX_TIM10_Init+0x40>)
 8002788:	f001 fec8 	bl	800451c <HAL_TIM_Base_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002792:	f7ff fadb 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000380 	.word	0x20000380
 80027a0:	40014400 	.word	0x40014400

080027a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0b      	ldr	r2, [pc, #44]	@ (80027e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10d      	bne.n	80027d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_TIM_PWM_MspInit+0x40>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_TIM_PWM_MspInit+0x40>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_TIM_PWM_MspInit+0x40>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_TIM_Base_MspInit+0x70>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a16      	ldr	r2, [pc, #88]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002816:	e01a      	b.n	800284e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <HAL_TIM_Base_MspInit+0x78>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d115      	bne.n	800284e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 800282c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002830:	6453      	str	r3, [r2, #68]	@ 0x44
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_TIM_Base_MspInit+0x74>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2103      	movs	r1, #3
 8002842:	2019      	movs	r0, #25
 8002844:	f000 fa55 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002848:	2019      	movs	r0, #25
 800284a:	f000 fa6e 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40001000 	.word	0x40001000
 800285c:	40023800 	.word	0x40023800
 8002860:	40014400 	.word	0x40014400

08002864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <HAL_TIM_MspPostInit+0x68>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11d      	bne.n	80028c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_TIM_MspPostInit+0x6c>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <HAL_TIM_MspPostInit+0x6c>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <HAL_TIM_MspPostInit+0x6c>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a2:	2340      	movs	r3, #64	@ 0x40
 80028a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <HAL_TIM_MspPostInit+0x70>)
 80028be:	f000 fa4f 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <MX_USART2_UART_Init+0x50>)
 80028e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 80028fe:	220c      	movs	r2, #12
 8002900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800290e:	4805      	ldr	r0, [pc, #20]	@ (8002924 <MX_USART2_UART_Init+0x4c>)
 8002910:	f002 fd5e 	bl	80053d0 <HAL_UART_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800291a:	f7ff fa17 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003c8 	.word	0x200003c8
 8002928:	40004400 	.word	0x40004400

0800292c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	@ 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <HAL_UART_MspInit+0x84>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12b      	bne.n	80029a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_UART_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002986:	230c      	movs	r3, #12
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002996:	2307      	movs	r3, #7
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <HAL_UART_MspInit+0x8c>)
 80029a2:	f000 f9dd 	bl	8002d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	@ 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029c0:	f7ff fe2a 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	@ (80029fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f003 fd8b 	bl	8006504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7fe fd9f 	bl	8001530 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a00:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 8002a04:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a08:	20000560 	.word	0x20000560

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>
	...

08002a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_Init+0x40>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_Init+0x40>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <HAL_Init+0x40>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	@ (8002a50 <HAL_Init+0x40>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f94f 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	200f      	movs	r0, #15
 8002a40:	f000 f808 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fcaa 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_InitTick+0x54>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_InitTick+0x58>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f967 	bl	8002d46 <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00e      	b.n	8002aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d80a      	bhi.n	8002a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f000 f92f 	bl	8002cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4a06      	ldr	r2, [pc, #24]	@ (8002ab0 <HAL_InitTick+0x5c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	20000014 	.word	0x20000014
 8002ab0:	20000010 	.word	0x20000010

08002ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_IncTick+0x20>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_IncTick+0x24>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <HAL_IncTick+0x24>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000014 	.word	0x20000014
 8002ad8:	20000410 	.word	0x20000410

08002adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <HAL_GetTick+0x14>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000410 	.word	0x20000410

08002af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff ffee 	bl	8002adc <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d005      	beq.n	8002b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_Delay+0x44>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b1a:	bf00      	nop
 8002b1c:	f7ff ffde 	bl	8002adc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d8f7      	bhi.n	8002b1c <HAL_Delay+0x28>
  {
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000014 	.word	0x20000014

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	@ (8002bd8 <__NVIC_EnableIRQ+0x38>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	@ (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	@ (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	@ 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	@ 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff29 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d04:	f7ff ff3e 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ff8e 	bl	8002c30 <NVIC_EncodePriority>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff5d 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff31 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffa2 	bl	8002c98 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e165      	b.n	8003048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 8154 	bne.w	8003042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d005      	beq.n	8002db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d130      	bne.n	8002e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0201 	and.w	r2, r3, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d017      	beq.n	8002e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d123      	bne.n	8002ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80ae 	beq.w	8003042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_GPIO_Init+0x300>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a5c      	ldr	r2, [pc, #368]	@ (8003060 <HAL_GPIO_Init+0x300>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8003060 <HAL_GPIO_Init+0x300>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f02:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_GPIO_Init+0x304>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4f      	ldr	r2, [pc, #316]	@ (8003068 <HAL_GPIO_Init+0x308>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x21a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4e      	ldr	r2, [pc, #312]	@ (800306c <HAL_GPIO_Init+0x30c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x216>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	@ (8003070 <HAL_GPIO_Init+0x310>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x212>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4c      	ldr	r2, [pc, #304]	@ (8003074 <HAL_GPIO_Init+0x314>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x20e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4b      	ldr	r2, [pc, #300]	@ (8003078 <HAL_GPIO_Init+0x318>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x20a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4a      	ldr	r2, [pc, #296]	@ (800307c <HAL_GPIO_Init+0x31c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x206>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a49      	ldr	r2, [pc, #292]	@ (8003080 <HAL_GPIO_Init+0x320>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x202>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f62:	2307      	movs	r3, #7
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x21c>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	@ (8003064 <HAL_GPIO_Init+0x304>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a31      	ldr	r2, [pc, #196]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a26      	ldr	r2, [pc, #152]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_GPIO_Init+0x324>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a11      	ldr	r2, [pc, #68]	@ (8003084 <HAL_GPIO_Init+0x324>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae96 	bls.w	8002d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	887b      	ldrh	r3, [r7, #2]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e001      	b.n	80030aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c8:	787b      	ldrb	r3, [r7, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d4:	e003      	b.n	80030de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	041a      	lsls	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	619a      	str	r2, [r3, #24]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fd9a 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40013c00 	.word	0x40013c00

0800311c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e12b      	b.n	8003386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd ff90 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800316e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800317e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003180:	f000 fd5c 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a81      	ldr	r2, [pc, #516]	@ (8003390 <HAL_I2C_Init+0x274>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d807      	bhi.n	80031a0 <HAL_I2C_Init+0x84>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a80      	ldr	r2, [pc, #512]	@ (8003394 <HAL_I2C_Init+0x278>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e006      	b.n	80031ae <HAL_I2C_Init+0x92>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003398 <HAL_I2C_Init+0x27c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0e7      	b.n	8003386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a78      	ldr	r2, [pc, #480]	@ (800339c <HAL_I2C_Init+0x280>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0c9b      	lsrs	r3, r3, #18
 80031c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003390 <HAL_I2C_Init+0x274>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d802      	bhi.n	80031f0 <HAL_I2C_Init+0xd4>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	e009      	b.n	8003204 <HAL_I2C_Init+0xe8>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a69      	ldr	r2, [pc, #420]	@ (80033a0 <HAL_I2C_Init+0x284>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	3301      	adds	r3, #1
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003216:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	495c      	ldr	r1, [pc, #368]	@ (8003390 <HAL_I2C_Init+0x274>)
 8003220:	428b      	cmp	r3, r1
 8003222:	d819      	bhi.n	8003258 <HAL_I2C_Init+0x13c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003238:	400b      	ands	r3, r1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_I2C_Init+0x138>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1e59      	subs	r1, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fbb1 f3f3 	udiv	r3, r1, r3
 800324c:	3301      	adds	r3, #1
 800324e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003252:	e051      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003254:	2304      	movs	r3, #4
 8003256:	e04f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <HAL_I2C_Init+0x168>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e012      	b.n	80032aa <HAL_I2C_Init+0x18e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e58      	subs	r0, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	0099      	lsls	r1, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x196>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e022      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <HAL_I2C_Init+0x1bc>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e58      	subs	r0, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	440b      	add	r3, r1
 80032c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Init+0x1dc>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	0099      	lsls	r1, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	6809      	ldr	r1, [r1, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003326:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6911      	ldr	r1, [r2, #16]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	000186a0 	.word	0x000186a0
 8003394:	001e847f 	.word	0x001e847f
 8003398:	003d08ff 	.word	0x003d08ff
 800339c:	431bde83 	.word	0x431bde83
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	460b      	mov	r3, r1
 80033b2:	817b      	strh	r3, [r7, #10]
 80033b4:	4613      	mov	r3, r2
 80033b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff fb90 	bl	8002adc <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	f040 80e0 	bne.w	800358c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2319      	movs	r3, #25
 80033d2:	2201      	movs	r2, #1
 80033d4:	4970      	ldr	r1, [pc, #448]	@ (8003598 <HAL_I2C_Master_Transmit+0x1f4>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f964 	bl	80036a4 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	e0d3      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2C_Master_Transmit+0x50>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e0cc      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d007      	beq.n	800341a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2221      	movs	r2, #33	@ 0x21
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2210      	movs	r2, #16
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a50      	ldr	r2, [pc, #320]	@ (800359c <HAL_I2C_Master_Transmit+0x1f8>)
 800345a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800345c:	8979      	ldrh	r1, [r7, #10]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f89c 	bl	80035a0 <I2C_MasterRequestWrite>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e08d      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003488:	e066      	b.n	8003558 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa22 	bl	80038d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06b      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d11b      	bne.n	800352c <HAL_I2C_Master_Transmit+0x188>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d017      	beq.n	800352c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	6a39      	ldr	r1, [r7, #32]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fa19 	bl	8003968 <I2C_WaitOnBTFFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	2b04      	cmp	r3, #4
 8003542:	d107      	bne.n	8003554 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e01a      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d194      	bne.n	800348a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	00100002 	.word	0x00100002
 800359c:	ffff0000 	.word	0xffff0000

080035a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d006      	beq.n	80035ca <I2C_MasterRequestWrite+0x2a>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d003      	beq.n	80035ca <I2C_MasterRequestWrite+0x2a>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035c8:	d108      	bne.n	80035dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e00b      	b.n	80035f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	2b12      	cmp	r3, #18
 80035e2:	d107      	bne.n	80035f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f84f 	bl	80036a4 <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361a:	d103      	bne.n	8003624 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e035      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003630:	d108      	bne.n	8003644 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e01b      	b.n	800367c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003644:	897b      	ldrh	r3, [r7, #10]
 8003646:	11db      	asrs	r3, r3, #7
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0306 	and.w	r3, r3, #6
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f063 030f 	orn	r3, r3, #15
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <I2C_MasterRequestWrite+0xfc>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f898 	bl	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e010      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4907      	ldr	r1, [pc, #28]	@ (80036a0 <I2C_MasterRequestWrite+0x100>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f888 	bl	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	00010008 	.word	0x00010008
 80036a0:	00010002 	.word	0x00010002

080036a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b4:	e048      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d044      	beq.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7ff fa0d 	bl	8002adc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d139      	bne.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10d      	bne.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	e00c      	b.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	43da      	mvns	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d116      	bne.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e023      	b.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10d      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	e00c      	b.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	43da      	mvns	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	429a      	cmp	r2, r3
 800378c:	d093      	beq.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a6:	e071      	b.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b6:	d123      	bne.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e067      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d041      	beq.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7ff f968 	bl	8002adc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d136      	bne.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10c      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e00b      	b.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e021      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10c      	bne.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	43da      	mvns	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e00b      	b.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf14      	ite	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	2300      	moveq	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f af6d 	bne.w	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e4:	e034      	b.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f886 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e034      	b.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d028      	beq.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7ff f8ed 	bl	8002adc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11d      	bne.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391e:	2b80      	cmp	r3, #128	@ 0x80
 8003920:	d016      	beq.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b80      	cmp	r3, #128	@ 0x80
 800395c:	d1c3      	bne.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003974:	e034      	b.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f83e 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e034      	b.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d028      	beq.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7ff f8a5 	bl	8002adc <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d016      	beq.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d1c3      	bne.n	8003976 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d11b      	bne.n	8003a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0cc      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b68      	ldr	r3, [pc, #416]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d90c      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4b3f      	ldr	r3, [pc, #252]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e067      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b36:	4b37      	ldr	r3, [pc, #220]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4934      	ldr	r1, [pc, #208]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b48:	f7fe ffc8 	bl	8002adc <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe ffc4 	bl	8002adc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e04f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 020c 	and.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1eb      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20c      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b22      	ldr	r3, [pc, #136]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f855 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe ff28 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023c00 	.word	0x40023c00
 8003c14:	40023800 	.word	0x40023800
 8003c18:	080086e4 	.word	0x080086e4
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	20000010 	.word	0x20000010

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	@ (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff fff0 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	@ (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	080086f4 	.word	0x080086f4

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffdc 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0b5b      	lsrs	r3, r3, #13
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	@ (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	080086f4 	.word	0x080086f4

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b0a6      	sub	sp, #152	@ 0x98
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb2:	4bc8      	ldr	r3, [pc, #800]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	f200 817e 	bhi.w	8003fbc <HAL_RCC_GetSysClockFreq+0x330>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003fbd 	.word	0x08003fbd
 8003cd0:	08003fbd 	.word	0x08003fbd
 8003cd4:	08003fbd 	.word	0x08003fbd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003fbd 	.word	0x08003fbd
 8003ce0:	08003fbd 	.word	0x08003fbd
 8003ce4:	08003fbd 	.word	0x08003fbd
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003fbd 	.word	0x08003fbd
 8003cf0:	08003fbd 	.word	0x08003fbd
 8003cf4:	08003fbd 	.word	0x08003fbd
 8003cf8:	08003e77 	.word	0x08003e77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4bb6      	ldr	r3, [pc, #728]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d02:	e15f      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d04:	4bb5      	ldr	r3, [pc, #724]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8003d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d0a:	e15b      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d0c:	4bb1      	ldr	r3, [pc, #708]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d18:	4bae      	ldr	r3, [pc, #696]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d031      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d24:	4bab      	ldr	r3, [pc, #684]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d38:	2300      	movs	r3, #0
 8003d3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d3c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8003d3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003d42:	462a      	mov	r2, r5
 8003d44:	fb03 f202 	mul.w	r2, r3, r2
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	4aa2      	ldr	r2, [pc, #648]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8003d54:	4621      	mov	r1, r4
 8003d56:	fba1 1202 	umull	r1, r2, r1, r2
 8003d5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d62:	4413      	add	r3, r2
 8003d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003d78:	f7fc ff56 	bl	8000c28 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d86:	e064      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d88:	4b92      	ldr	r3, [pc, #584]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d92:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003da4:	4622      	mov	r2, r4
 8003da6:	462b      	mov	r3, r5
 8003da8:	f04f 0000 	mov.w	r0, #0
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	0159      	lsls	r1, r3, #5
 8003db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db6:	0150      	lsls	r0, r2, #5
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	1a51      	subs	r1, r2, r1
 8003dc0:	6139      	str	r1, [r7, #16]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	018b      	lsls	r3, r1, #6
 8003dda:	4651      	mov	r1, sl
 8003ddc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de0:	4651      	mov	r1, sl
 8003de2:	018a      	lsls	r2, r1, #6
 8003de4:	4651      	mov	r1, sl
 8003de6:	ebb2 0801 	subs.w	r8, r2, r1
 8003dea:	4659      	mov	r1, fp
 8003dec:	eb63 0901 	sbc.w	r9, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e04:	4690      	mov	r8, r2
 8003e06:	4699      	mov	r9, r3
 8003e08:	4623      	mov	r3, r4
 8003e0a:	eb18 0303 	adds.w	r3, r8, r3
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	462b      	mov	r3, r5
 8003e12:	eb49 0303 	adc.w	r3, r9, r3
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e24:	4629      	mov	r1, r5
 8003e26:	028b      	lsls	r3, r1, #10
 8003e28:	4621      	mov	r1, r4
 8003e2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e2e:	4621      	mov	r1, r4
 8003e30:	028a      	lsls	r2, r1, #10
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e44:	f7fc fef0 	bl	8000c28 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e52:	4b60      	ldr	r3, [pc, #384]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003e64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e74:	e0a6      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e76:	4b57      	ldr	r3, [pc, #348]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e82:	4b54      	ldr	r3, [pc, #336]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b51      	ldr	r3, [pc, #324]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	2200      	movs	r2, #0
 8003e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8003ea4:	fb03 f201 	mul.w	r2, r3, r1
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8003eb2:	fba0 1202 	umull	r1, r2, r0, r2
 8003eb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eb8:	460a      	mov	r2, r1
 8003eba:	673a      	str	r2, [r7, #112]	@ 0x70
 8003ebc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ebe:	4413      	add	r3, r2
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eca:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ecc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003ed0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003ed4:	f7fc fea8 	bl	8000c28 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ee2:	e05b      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	2200      	movs	r2, #0
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0159      	lsls	r1, r3, #5
 8003f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f12:	0150      	lsls	r0, r2, #5
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f38:	ebb2 040a 	subs.w	r4, r2, sl
 8003f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	00eb      	lsls	r3, r5, #3
 8003f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4e:	00e2      	lsls	r2, r4, #3
 8003f50:	4614      	mov	r4, r2
 8003f52:	461d      	mov	r5, r3
 8003f54:	4643      	mov	r3, r8
 8003f56:	18e3      	adds	r3, r4, r3
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	eb45 0303 	adc.w	r3, r5, r3
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	2200      	movs	r2, #0
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	61fa      	str	r2, [r7, #28]
 8003f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8e:	f7fc fe4b 	bl	8000c28 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4613      	mov	r3, r2
 8003f98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0f1b      	lsrs	r3, r3, #28
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003fba:	e003      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3798      	adds	r7, #152	@ 0x98
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	017d7840 	.word	0x017d7840

08003fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e28d      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8083 	beq.w	8004106 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004000:	4b94      	ldr	r3, [pc, #592]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b04      	cmp	r3, #4
 800400a:	d019      	beq.n	8004040 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800400c:	4b91      	ldr	r3, [pc, #580]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
        || \
 8004014:	2b08      	cmp	r3, #8
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004018:	4b8e      	ldr	r3, [pc, #568]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004024:	d00c      	beq.n	8004040 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b8b      	ldr	r3, [pc, #556]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d112      	bne.n	8004058 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b84      	ldr	r3, [pc, #528]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05b      	beq.n	8004104 <HAL_RCC_OscConfig+0x124>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d157      	bne.n	8004104 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e25a      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x90>
 8004062:	4b7c      	ldr	r3, [pc, #496]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7b      	ldr	r2, [pc, #492]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xcc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0xb4>
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a72      	ldr	r2, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xcc>
 8004094:	4b6f      	ldr	r3, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6e      	ldr	r2, [pc, #440]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe fd12 	bl	8002adc <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fd0e 	bl	8002adc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e21f      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xdc>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe fcfe 	bl	8002adc <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe fcfa 	bl	8002adc <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e20b      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x104>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d06f      	beq.n	80041f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004112:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800411e:	4b4d      	ldr	r3, [pc, #308]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
        || \
 8004126:	2b08      	cmp	r3, #8
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x186>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1d3      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x278>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe fca7 	bl	8002adc <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe fca3 	bl	8002adc <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1b4      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <HAL_RCC_OscConfig+0x278>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fc86 	bl	8002adc <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fc82 	bl	8002adc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e193      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_RCC_OscConfig+0x27c>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fe fc66 	bl	8002adc <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004214:	f7fe fc62 	bl	8002adc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e173      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x234>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x27c>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fe fc4f 	bl	8002adc <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004242:	f7fe fc4b 	bl	8002adc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e15c      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b8a      	ldr	r3, [pc, #552]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b83      	ldr	r3, [pc, #524]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7f      	ldr	r3, [pc, #508]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	4a7e      	ldr	r2, [pc, #504]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	@ 0x40
 800429a:	4b7c      	ldr	r3, [pc, #496]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b79      	ldr	r3, [pc, #484]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b76      	ldr	r3, [pc, #472]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fe fc0b 	bl	8002adc <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fe fc07 	bl	8002adc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e118      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004490 <HAL_RCC_OscConfig+0x4b0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x31e>
 80042f0:	4b66      	ldr	r3, [pc, #408]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a65      	ldr	r2, [pc, #404]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x358>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x340>
 8004306:	4b61      	ldr	r3, [pc, #388]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a60      	ldr	r2, [pc, #384]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
 8004312:	4b5e      	ldr	r3, [pc, #376]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	4a5d      	ldr	r2, [pc, #372]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	@ 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x358>
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	4a59      	ldr	r2, [pc, #356]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	4b57      	ldr	r3, [pc, #348]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a56      	ldr	r2, [pc, #344]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe fbcc 	bl	8002adc <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fe fbc8 	bl	8002adc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0d7      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x368>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe fbb6 	bl	8002adc <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fbb2 	bl	8002adc <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0c1      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80ad 	beq.w	800450c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d060      	beq.n	8004480 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d145      	bne.n	8004452 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b33      	ldr	r3, [pc, #204]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe fb86 	bl	8002adc <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe fb82 	bl	8002adc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e093      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	071b      	lsls	r3, r3, #28
 800441e:	491b      	ldr	r1, [pc, #108]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe fb57 	bl	8002adc <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fe fb53 	bl	8002adc <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e064      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x452>
 8004450:	e05c      	b.n	800450c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <HAL_RCC_OscConfig+0x4b4>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe fb40 	bl	8002adc <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe fb3c 	bl	8002adc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e04d      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_RCC_OscConfig+0x4ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x480>
 800447e:	e045      	b.n	800450c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e040      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000
 8004494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <HAL_RCC_OscConfig+0x538>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d030      	beq.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d129      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d122      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d119      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	3b01      	subs	r3, #1
 80044e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d10f      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e041      	b.n	80045b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fe f950 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fc26 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e046      	b.n	8004662 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a23      	ldr	r2, [pc, #140]	@ (8004670 <HAL_TIM_Base_Start+0xb4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ee:	d01d      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004674 <HAL_TIM_Base_Start+0xb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004678 <HAL_TIM_Base_Start+0xbc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_TIM_Base_Start+0xc0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <HAL_TIM_Base_Start+0xc4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a19      	ldr	r2, [pc, #100]	@ (8004684 <HAL_TIM_Base_Start+0xc8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start+0x70>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <HAL_TIM_Base_Start+0xcc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d010      	beq.n	8004660 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	e007      	b.n	8004660 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e04e      	b.n	8004742 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a23      	ldr	r2, [pc, #140]	@ (8004750 <HAL_TIM_Base_Start_IT+0xc4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d022      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ce:	d01d      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <HAL_TIM_Base_Start_IT+0xc8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d018      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <HAL_TIM_Base_Start_IT+0xcc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <HAL_TIM_Base_Start_IT+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00e      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004760 <HAL_TIM_Base_Start_IT+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d009      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <HAL_TIM_Base_Start_IT+0xd8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x80>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <HAL_TIM_Base_Start_IT+0xdc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d111      	bne.n	8004730 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b06      	cmp	r3, #6
 800471c:	d010      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472e:	e007      	b.n	8004740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40010400 	.word	0x40010400
 8004764:	40014000 	.word	0x40014000
 8004768:	40001800 	.word	0x40001800

0800476c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a1a      	ldr	r2, [r3, #32]
 800478a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <HAL_TIM_Base_Stop_IT+0x48>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	f240 4344 	movw	r3, #1092	@ 0x444
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_Base_Stop_IT+0x48>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e041      	b.n	8004860 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd ffd7 	bl	80027a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 facf 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x24>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x3e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x58>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07c      	b.n	80049d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x82>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	e013      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0x92>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004908:	e003      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fca2 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_PWM_Start+0xcc>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_TIM_PWM_Start+0xd0>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_Start+0xd2>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004960:	d01d      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <HAL_TIM_PWM_Start+0x17c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_TIM_PWM_Start+0x180>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_TIM_PWM_Start+0x184>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_TIM_PWM_Start+0x188>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <HAL_TIM_PWM_Start+0x18c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d010      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	e007      	b.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40001800 	.word	0x40001800

080049f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0202 	mvn.w	r2, #2
 8004a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f994 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f986 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f997 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0204 	mvn.w	r2, #4
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f96e 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f960 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f971 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f948 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f93a 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f94b 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0210 	mvn.w	r2, #16
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2208      	movs	r2, #8
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f922 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f914 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f925 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0201 	mvn.w	r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd f8a8 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc1a 	bl	80053bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8f6 	bl	8004d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0220 	mvn.w	r2, #32
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fbec 	bl	80053a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0ae      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	f200 809f 	bhi.w	8004d44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004d45 	.word	0x08004d45
 8004c14:	08004d45 	.word	0x08004d45
 8004c18:	08004d45 	.word	0x08004d45
 8004c1c:	08004c81 	.word	0x08004c81
 8004c20:	08004d45 	.word	0x08004d45
 8004c24:	08004d45 	.word	0x08004d45
 8004c28:	08004d45 	.word	0x08004d45
 8004c2c:	08004cc3 	.word	0x08004cc3
 8004c30:	08004d45 	.word	0x08004d45
 8004c34:	08004d45 	.word	0x08004d45
 8004c38:	08004d45 	.word	0x08004d45
 8004c3c:	08004d03 	.word	0x08004d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f95c 	bl	8004f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0208 	orr.w	r2, r2, #8
 8004c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6999      	ldr	r1, [r3, #24]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	619a      	str	r2, [r3, #24]
      break;
 8004c7e:	e064      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f9ac 	bl	8004fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
      break;
 8004cc0:	e043      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fa01 	bl	80050d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0208 	orr.w	r2, r2, #8
 8004cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0204 	bic.w	r2, r2, #4
 8004cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69d9      	ldr	r1, [r3, #28]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	61da      	str	r2, [r3, #28]
      break;
 8004d00:	e023      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fa55 	bl	80051b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69d9      	ldr	r1, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	021a      	lsls	r2, r3, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	61da      	str	r2, [r3, #28]
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a46      	ldr	r2, [pc, #280]	@ (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a43      	ldr	r2, [pc, #268]	@ (8004edc <TIM_Base_SetConfig+0x130>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a42      	ldr	r2, [pc, #264]	@ (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a40      	ldr	r2, [pc, #256]	@ (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a35      	ldr	r2, [pc, #212]	@ (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0c:	d027      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a32      	ldr	r2, [pc, #200]	@ (8004edc <TIM_Base_SetConfig+0x130>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d023      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a30      	ldr	r2, [pc, #192]	@ (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2e      	ldr	r2, [pc, #184]	@ (8004eec <TIM_Base_SetConfig+0x140>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef0 <TIM_Base_SetConfig+0x144>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef4 <TIM_Base_SetConfig+0x148>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef8 <TIM_Base_SetConfig+0x14c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2a      	ldr	r2, [pc, #168]	@ (8004efc <TIM_Base_SetConfig+0x150>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a29      	ldr	r2, [pc, #164]	@ (8004f00 <TIM_Base_SetConfig+0x154>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	@ (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40001800 	.word	0x40001800
 8004efc:	40001c00 	.word	0x40001c00
 8004f00:	40002000 	.word	0x40002000

08004f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0302 	bic.w	r3, r3, #2
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a20      	ldr	r2, [pc, #128]	@ (8004fdc <TIM_OC1_SetConfig+0xd8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC1_SetConfig+0x64>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe0 <TIM_OC1_SetConfig+0xdc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10c      	bne.n	8004f82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0308 	bic.w	r3, r3, #8
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a15      	ldr	r2, [pc, #84]	@ (8004fdc <TIM_OC1_SetConfig+0xd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC1_SetConfig+0x8e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <TIM_OC1_SetConfig+0xdc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d111      	bne.n	8004fb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0210 	bic.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0320 	bic.w	r3, r3, #32
 800502e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a22      	ldr	r2, [pc, #136]	@ (80050c8 <TIM_OC2_SetConfig+0xe4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_OC2_SetConfig+0x68>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a21      	ldr	r2, [pc, #132]	@ (80050cc <TIM_OC2_SetConfig+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10d      	bne.n	8005068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <TIM_OC2_SetConfig+0xe4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC2_SetConfig+0x94>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <TIM_OC2_SetConfig+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d113      	bne.n	80050a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800507e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a21      	ldr	r2, [pc, #132]	@ (80051b0 <TIM_OC3_SetConfig+0xe0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x66>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a20      	ldr	r2, [pc, #128]	@ (80051b4 <TIM_OC3_SetConfig+0xe4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <TIM_OC3_SetConfig+0xe0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC3_SetConfig+0x92>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <TIM_OC3_SetConfig+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d113      	bne.n	800518a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400

080051b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a12      	ldr	r2, [pc, #72]	@ (800525c <TIM_OC4_SetConfig+0xa4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC4_SetConfig+0x68>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a11      	ldr	r2, [pc, #68]	@ (8005260 <TIM_OC4_SetConfig+0xa8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d109      	bne.n	8005234 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e05a      	b.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a21      	ldr	r2, [pc, #132]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005314:	d01d      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1b      	ldr	r2, [pc, #108]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1a      	ldr	r2, [pc, #104]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a18      	ldr	r2, [pc, #96]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a15      	ldr	r2, [pc, #84]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10c      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4313      	orrs	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40010400 	.word	0x40010400
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40001800 	.word	0x40001800

080053a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e042      	b.n	8005468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fd fa98 	bl	800292c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	@ 0x24
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f82b 	bl	8005470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b0c0      	sub	sp, #256	@ 0x100
 8005476:	af00      	add	r7, sp, #0
 8005478:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	68d9      	ldr	r1, [r3, #12]
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	ea40 0301 	orr.w	r3, r0, r1
 8005498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054c8:	f021 010c 	bic.w	r1, r1, #12
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054d6:	430b      	orrs	r3, r1
 80054d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ea:	6999      	ldr	r1, [r3, #24]
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	ea40 0301 	orr.w	r3, r0, r1
 80054f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b8f      	ldr	r3, [pc, #572]	@ (800573c <UART_SetConfig+0x2cc>)
 8005500:	429a      	cmp	r2, r3
 8005502:	d005      	beq.n	8005510 <UART_SetConfig+0xa0>
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b8d      	ldr	r3, [pc, #564]	@ (8005740 <UART_SetConfig+0x2d0>)
 800550c:	429a      	cmp	r2, r3
 800550e:	d104      	bne.n	800551a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7fe fba8 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8005514:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005518:	e003      	b.n	8005522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800551a:	f7fe fb8f 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 800551e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552c:	f040 810c 	bne.w	8005748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800553a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800553e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	1891      	adds	r1, r2, r2
 8005548:	65b9      	str	r1, [r7, #88]	@ 0x58
 800554a:	415b      	adcs	r3, r3
 800554c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800554e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005552:	4621      	mov	r1, r4
 8005554:	eb12 0801 	adds.w	r8, r2, r1
 8005558:	4629      	mov	r1, r5
 800555a:	eb43 0901 	adc.w	r9, r3, r1
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005572:	4690      	mov	r8, r2
 8005574:	4699      	mov	r9, r3
 8005576:	4623      	mov	r3, r4
 8005578:	eb18 0303 	adds.w	r3, r8, r3
 800557c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005580:	462b      	mov	r3, r5
 8005582:	eb49 0303 	adc.w	r3, r9, r3
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005596:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800559a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800559e:	460b      	mov	r3, r1
 80055a0:	18db      	adds	r3, r3, r3
 80055a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a4:	4613      	mov	r3, r2
 80055a6:	eb42 0303 	adc.w	r3, r2, r3
 80055aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055b4:	f7fb fb38 	bl	8000c28 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4b61      	ldr	r3, [pc, #388]	@ (8005744 <UART_SetConfig+0x2d4>)
 80055be:	fba3 2302 	umull	r2, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	011c      	lsls	r4, r3, #4
 80055c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	1891      	adds	r1, r2, r2
 80055de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055e0:	415b      	adcs	r3, r3
 80055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055e8:	4641      	mov	r1, r8
 80055ea:	eb12 0a01 	adds.w	sl, r2, r1
 80055ee:	4649      	mov	r1, r9
 80055f0:	eb43 0b01 	adc.w	fp, r3, r1
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005608:	4692      	mov	sl, r2
 800560a:	469b      	mov	fp, r3
 800560c:	4643      	mov	r3, r8
 800560e:	eb1a 0303 	adds.w	r3, sl, r3
 8005612:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005616:	464b      	mov	r3, r9
 8005618:	eb4b 0303 	adc.w	r3, fp, r3
 800561c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800562c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005634:	460b      	mov	r3, r1
 8005636:	18db      	adds	r3, r3, r3
 8005638:	643b      	str	r3, [r7, #64]	@ 0x40
 800563a:	4613      	mov	r3, r2
 800563c:	eb42 0303 	adc.w	r3, r2, r3
 8005640:	647b      	str	r3, [r7, #68]	@ 0x44
 8005642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800564a:	f7fb faed 	bl	8000c28 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4611      	mov	r1, r2
 8005654:	4b3b      	ldr	r3, [pc, #236]	@ (8005744 <UART_SetConfig+0x2d4>)
 8005656:	fba3 2301 	umull	r2, r3, r3, r1
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2264      	movs	r2, #100	@ 0x64
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	1acb      	subs	r3, r1, r3
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800566a:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <UART_SetConfig+0x2d4>)
 800566c:	fba3 2302 	umull	r2, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005678:	441c      	add	r4, r3
 800567a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005684:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005694:	415b      	adcs	r3, r3
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800569c:	4641      	mov	r1, r8
 800569e:	1851      	adds	r1, r2, r1
 80056a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80056a2:	4649      	mov	r1, r9
 80056a4:	414b      	adcs	r3, r1
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056b4:	4659      	mov	r1, fp
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	4651      	mov	r1, sl
 80056ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056be:	4651      	mov	r1, sl
 80056c0:	00ca      	lsls	r2, r1, #3
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	4642      	mov	r2, r8
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d0:	464b      	mov	r3, r9
 80056d2:	460a      	mov	r2, r1
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056f0:	460b      	mov	r3, r1
 80056f2:	18db      	adds	r3, r3, r3
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f6:	4613      	mov	r3, r2
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005706:	f7fb fa8f 	bl	8000c28 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <UART_SetConfig+0x2d4>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	@ 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	3332      	adds	r3, #50	@ 0x32
 8005722:	4a08      	ldr	r2, [pc, #32]	@ (8005744 <UART_SetConfig+0x2d4>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 0207 	and.w	r2, r3, #7
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4422      	add	r2, r4
 8005736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005738:	e106      	b.n	8005948 <UART_SetConfig+0x4d8>
 800573a:	bf00      	nop
 800573c:	40011000 	.word	0x40011000
 8005740:	40011400 	.word	0x40011400
 8005744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800574c:	2200      	movs	r2, #0
 800574e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005752:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800575a:	4642      	mov	r2, r8
 800575c:	464b      	mov	r3, r9
 800575e:	1891      	adds	r1, r2, r2
 8005760:	6239      	str	r1, [r7, #32]
 8005762:	415b      	adcs	r3, r3
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800576a:	4641      	mov	r1, r8
 800576c:	1854      	adds	r4, r2, r1
 800576e:	4649      	mov	r1, r9
 8005770:	eb43 0501 	adc.w	r5, r3, r1
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	00eb      	lsls	r3, r5, #3
 800577e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005782:	00e2      	lsls	r2, r4, #3
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	4643      	mov	r3, r8
 800578a:	18e3      	adds	r3, r4, r3
 800578c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005790:	464b      	mov	r3, r9
 8005792:	eb45 0303 	adc.w	r3, r5, r3
 8005796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057b6:	4629      	mov	r1, r5
 80057b8:	008b      	lsls	r3, r1, #2
 80057ba:	4621      	mov	r1, r4
 80057bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c0:	4621      	mov	r1, r4
 80057c2:	008a      	lsls	r2, r1, #2
 80057c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057c8:	f7fb fa2e 	bl	8000c28 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b60      	ldr	r3, [pc, #384]	@ (8005954 <UART_SetConfig+0x4e4>)
 80057d2:	fba3 2302 	umull	r2, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	011c      	lsls	r4, r3, #4
 80057da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	1891      	adds	r1, r2, r2
 80057f2:	61b9      	str	r1, [r7, #24]
 80057f4:	415b      	adcs	r3, r3
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fc:	4641      	mov	r1, r8
 80057fe:	1851      	adds	r1, r2, r1
 8005800:	6139      	str	r1, [r7, #16]
 8005802:	4649      	mov	r1, r9
 8005804:	414b      	adcs	r3, r1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005814:	4659      	mov	r1, fp
 8005816:	00cb      	lsls	r3, r1, #3
 8005818:	4651      	mov	r1, sl
 800581a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800581e:	4651      	mov	r1, sl
 8005820:	00ca      	lsls	r2, r1, #3
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	4603      	mov	r3, r0
 8005828:	4642      	mov	r2, r8
 800582a:	189b      	adds	r3, r3, r2
 800582c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005830:	464b      	mov	r3, r9
 8005832:	460a      	mov	r2, r1
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005846:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005854:	4649      	mov	r1, r9
 8005856:	008b      	lsls	r3, r1, #2
 8005858:	4641      	mov	r1, r8
 800585a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585e:	4641      	mov	r1, r8
 8005860:	008a      	lsls	r2, r1, #2
 8005862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005866:	f7fb f9df 	bl	8000c28 <__aeabi_uldivmod>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4611      	mov	r1, r2
 8005870:	4b38      	ldr	r3, [pc, #224]	@ (8005954 <UART_SetConfig+0x4e4>)
 8005872:	fba3 2301 	umull	r2, r3, r3, r1
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	2264      	movs	r2, #100	@ 0x64
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	1acb      	subs	r3, r1, r3
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	3332      	adds	r3, #50	@ 0x32
 8005884:	4a33      	ldr	r2, [pc, #204]	@ (8005954 <UART_SetConfig+0x4e4>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005890:	441c      	add	r4, r3
 8005892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005896:	2200      	movs	r2, #0
 8005898:	673b      	str	r3, [r7, #112]	@ 0x70
 800589a:	677a      	str	r2, [r7, #116]	@ 0x74
 800589c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	415b      	adcs	r3, r3
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b0:	4641      	mov	r1, r8
 80058b2:	1851      	adds	r1, r2, r1
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	4649      	mov	r1, r9
 80058b8:	414b      	adcs	r3, r1
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058c8:	4659      	mov	r1, fp
 80058ca:	00cb      	lsls	r3, r1, #3
 80058cc:	4651      	mov	r1, sl
 80058ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d2:	4651      	mov	r1, sl
 80058d4:	00ca      	lsls	r2, r1, #3
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	4603      	mov	r3, r0
 80058dc:	4642      	mov	r2, r8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e2:	464b      	mov	r3, r9
 80058e4:	460a      	mov	r2, r1
 80058e6:	eb42 0303 	adc.w	r3, r2, r3
 80058ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005904:	4649      	mov	r1, r9
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	4641      	mov	r1, r8
 800590a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590e:	4641      	mov	r1, r8
 8005910:	008a      	lsls	r2, r1, #2
 8005912:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005916:	f7fb f987 	bl	8000c28 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <UART_SetConfig+0x4e4>)
 8005920:	fba3 1302 	umull	r1, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	2164      	movs	r1, #100	@ 0x64
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	3332      	adds	r3, #50	@ 0x32
 8005932:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <UART_SetConfig+0x4e4>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4422      	add	r2, r4
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800594e:	46bd      	mov	sp, r7
 8005950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005954:	51eb851f 	.word	0x51eb851f

08005958 <__cvt>:
 8005958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	ec57 6b10 	vmov	r6, r7, d0
 8005960:	2f00      	cmp	r7, #0
 8005962:	460c      	mov	r4, r1
 8005964:	4619      	mov	r1, r3
 8005966:	463b      	mov	r3, r7
 8005968:	bfbb      	ittet	lt
 800596a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800596e:	461f      	movlt	r7, r3
 8005970:	2300      	movge	r3, #0
 8005972:	232d      	movlt	r3, #45	@ 0x2d
 8005974:	700b      	strb	r3, [r1, #0]
 8005976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005978:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800597c:	4691      	mov	r9, r2
 800597e:	f023 0820 	bic.w	r8, r3, #32
 8005982:	bfbc      	itt	lt
 8005984:	4632      	movlt	r2, r6
 8005986:	4616      	movlt	r6, r2
 8005988:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800598c:	d005      	beq.n	800599a <__cvt+0x42>
 800598e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005992:	d100      	bne.n	8005996 <__cvt+0x3e>
 8005994:	3401      	adds	r4, #1
 8005996:	2102      	movs	r1, #2
 8005998:	e000      	b.n	800599c <__cvt+0x44>
 800599a:	2103      	movs	r1, #3
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	ab02      	add	r3, sp, #8
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	ec47 6b10 	vmov	d0, r6, r7
 80059a8:	4653      	mov	r3, sl
 80059aa:	4622      	mov	r2, r4
 80059ac:	f000 fe5c 	bl	8006668 <_dtoa_r>
 80059b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059b4:	4605      	mov	r5, r0
 80059b6:	d119      	bne.n	80059ec <__cvt+0x94>
 80059b8:	f019 0f01 	tst.w	r9, #1
 80059bc:	d00e      	beq.n	80059dc <__cvt+0x84>
 80059be:	eb00 0904 	add.w	r9, r0, r4
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	4630      	mov	r0, r6
 80059c8:	4639      	mov	r1, r7
 80059ca:	f7fb f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80059ce:	b108      	cbz	r0, 80059d4 <__cvt+0x7c>
 80059d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80059d4:	2230      	movs	r2, #48	@ 0x30
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	454b      	cmp	r3, r9
 80059da:	d31e      	bcc.n	8005a1a <__cvt+0xc2>
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059e0:	1b5b      	subs	r3, r3, r5
 80059e2:	4628      	mov	r0, r5
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	b004      	add	sp, #16
 80059e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059f0:	eb00 0904 	add.w	r9, r0, r4
 80059f4:	d1e5      	bne.n	80059c2 <__cvt+0x6a>
 80059f6:	7803      	ldrb	r3, [r0, #0]
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d10a      	bne.n	8005a12 <__cvt+0xba>
 80059fc:	2200      	movs	r2, #0
 80059fe:	2300      	movs	r3, #0
 8005a00:	4630      	mov	r0, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	f7fb f880 	bl	8000b08 <__aeabi_dcmpeq>
 8005a08:	b918      	cbnz	r0, 8005a12 <__cvt+0xba>
 8005a0a:	f1c4 0401 	rsb	r4, r4, #1
 8005a0e:	f8ca 4000 	str.w	r4, [sl]
 8005a12:	f8da 3000 	ldr.w	r3, [sl]
 8005a16:	4499      	add	r9, r3
 8005a18:	e7d3      	b.n	80059c2 <__cvt+0x6a>
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	9103      	str	r1, [sp, #12]
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e7d9      	b.n	80059d6 <__cvt+0x7e>

08005a22 <__exponent>:
 8005a22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a24:	2900      	cmp	r1, #0
 8005a26:	bfba      	itte	lt
 8005a28:	4249      	neglt	r1, r1
 8005a2a:	232d      	movlt	r3, #45	@ 0x2d
 8005a2c:	232b      	movge	r3, #43	@ 0x2b
 8005a2e:	2909      	cmp	r1, #9
 8005a30:	7002      	strb	r2, [r0, #0]
 8005a32:	7043      	strb	r3, [r0, #1]
 8005a34:	dd29      	ble.n	8005a8a <__exponent+0x68>
 8005a36:	f10d 0307 	add.w	r3, sp, #7
 8005a3a:	461d      	mov	r5, r3
 8005a3c:	270a      	movs	r7, #10
 8005a3e:	461a      	mov	r2, r3
 8005a40:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a44:	fb07 1416 	mls	r4, r7, r6, r1
 8005a48:	3430      	adds	r4, #48	@ 0x30
 8005a4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2c63      	cmp	r4, #99	@ 0x63
 8005a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a56:	4631      	mov	r1, r6
 8005a58:	dcf1      	bgt.n	8005a3e <__exponent+0x1c>
 8005a5a:	3130      	adds	r1, #48	@ 0x30
 8005a5c:	1e94      	subs	r4, r2, #2
 8005a5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a62:	1c41      	adds	r1, r0, #1
 8005a64:	4623      	mov	r3, r4
 8005a66:	42ab      	cmp	r3, r5
 8005a68:	d30a      	bcc.n	8005a80 <__exponent+0x5e>
 8005a6a:	f10d 0309 	add.w	r3, sp, #9
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	42ac      	cmp	r4, r5
 8005a72:	bf88      	it	hi
 8005a74:	2300      	movhi	r3, #0
 8005a76:	3302      	adds	r3, #2
 8005a78:	4403      	add	r3, r0
 8005a7a:	1a18      	subs	r0, r3, r0
 8005a7c:	b003      	add	sp, #12
 8005a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a88:	e7ed      	b.n	8005a66 <__exponent+0x44>
 8005a8a:	2330      	movs	r3, #48	@ 0x30
 8005a8c:	3130      	adds	r1, #48	@ 0x30
 8005a8e:	7083      	strb	r3, [r0, #2]
 8005a90:	70c1      	strb	r1, [r0, #3]
 8005a92:	1d03      	adds	r3, r0, #4
 8005a94:	e7f1      	b.n	8005a7a <__exponent+0x58>
	...

08005a98 <_printf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	b08d      	sub	sp, #52	@ 0x34
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	f000 fcdb 	bl	8006464 <_localeconv_r>
 8005aae:	6803      	ldr	r3, [r0, #0]
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fa fbfc 	bl	80002b0 <strlen>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005abc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac0:	9005      	str	r0, [sp, #20]
 8005ac2:	3307      	adds	r3, #7
 8005ac4:	f023 0307 	bic.w	r3, r3, #7
 8005ac8:	f103 0208 	add.w	r2, r3, #8
 8005acc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ad0:	f8d4 b000 	ldr.w	fp, [r4]
 8005ad4:	f8c8 2000 	str.w	r2, [r8]
 8005ad8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005adc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ae0:	9307      	str	r3, [sp, #28]
 8005ae2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aee:	4b9c      	ldr	r3, [pc, #624]	@ (8005d60 <_printf_float+0x2c8>)
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	f7fb f83a 	bl	8000b6c <__aeabi_dcmpun>
 8005af8:	bb70      	cbnz	r0, 8005b58 <_printf_float+0xc0>
 8005afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005afe:	4b98      	ldr	r3, [pc, #608]	@ (8005d60 <_printf_float+0x2c8>)
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295
 8005b04:	f7fb f814 	bl	8000b30 <__aeabi_dcmple>
 8005b08:	bb30      	cbnz	r0, 8005b58 <_printf_float+0xc0>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fb f803 	bl	8000b1c <__aeabi_dcmplt>
 8005b16:	b110      	cbz	r0, 8005b1e <_printf_float+0x86>
 8005b18:	232d      	movs	r3, #45	@ 0x2d
 8005b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b1e:	4a91      	ldr	r2, [pc, #580]	@ (8005d64 <_printf_float+0x2cc>)
 8005b20:	4b91      	ldr	r3, [pc, #580]	@ (8005d68 <_printf_float+0x2d0>)
 8005b22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b26:	bf94      	ite	ls
 8005b28:	4690      	movls	r8, r2
 8005b2a:	4698      	movhi	r8, r3
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	f02b 0304 	bic.w	r3, fp, #4
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	f04f 0900 	mov.w	r9, #0
 8005b3a:	9700      	str	r7, [sp, #0]
 8005b3c:	4633      	mov	r3, r6
 8005b3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f9d2 	bl	8005eec <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f040 808d 	bne.w	8005c68 <_printf_float+0x1d0>
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	b00d      	add	sp, #52	@ 0x34
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fb f804 	bl	8000b6c <__aeabi_dcmpun>
 8005b64:	b140      	cbz	r0, 8005b78 <_printf_float+0xe0>
 8005b66:	464b      	mov	r3, r9
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfbc      	itt	lt
 8005b6c:	232d      	movlt	r3, #45	@ 0x2d
 8005b6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b72:	4a7e      	ldr	r2, [pc, #504]	@ (8005d6c <_printf_float+0x2d4>)
 8005b74:	4b7e      	ldr	r3, [pc, #504]	@ (8005d70 <_printf_float+0x2d8>)
 8005b76:	e7d4      	b.n	8005b22 <_printf_float+0x8a>
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b7e:	9206      	str	r2, [sp, #24]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	d13b      	bne.n	8005bfc <_printf_float+0x164>
 8005b84:	2306      	movs	r3, #6
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b98:	ab09      	add	r3, sp, #36	@ 0x24
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6861      	ldr	r1, [r4, #4]
 8005b9e:	ec49 8b10 	vmov	d0, r8, r9
 8005ba2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fed6 	bl	8005958 <__cvt>
 8005bac:	9b06      	ldr	r3, [sp, #24]
 8005bae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bb0:	2b47      	cmp	r3, #71	@ 0x47
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	d129      	bne.n	8005c0a <_printf_float+0x172>
 8005bb6:	1cc8      	adds	r0, r1, #3
 8005bb8:	db02      	blt.n	8005bc0 <_printf_float+0x128>
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	dd41      	ble.n	8005c44 <_printf_float+0x1ac>
 8005bc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bc4:	fa5f fa8a 	uxtb.w	sl, sl
 8005bc8:	3901      	subs	r1, #1
 8005bca:	4652      	mov	r2, sl
 8005bcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bd2:	f7ff ff26 	bl	8005a22 <__exponent>
 8005bd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bd8:	1813      	adds	r3, r2, r0
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	4681      	mov	r9, r0
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	dc02      	bgt.n	8005be8 <_printf_float+0x150>
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	07d2      	lsls	r2, r2, #31
 8005be6:	d501      	bpl.n	8005bec <_printf_float+0x154>
 8005be8:	3301      	adds	r3, #1
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0a2      	beq.n	8005b3a <_printf_float+0xa2>
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfa:	e79e      	b.n	8005b3a <_printf_float+0xa2>
 8005bfc:	9a06      	ldr	r2, [sp, #24]
 8005bfe:	2a47      	cmp	r2, #71	@ 0x47
 8005c00:	d1c2      	bne.n	8005b88 <_printf_float+0xf0>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1c0      	bne.n	8005b88 <_printf_float+0xf0>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7bd      	b.n	8005b86 <_printf_float+0xee>
 8005c0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c0e:	d9db      	bls.n	8005bc8 <_printf_float+0x130>
 8005c10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c14:	d118      	bne.n	8005c48 <_printf_float+0x1b0>
 8005c16:	2900      	cmp	r1, #0
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	dd0b      	ble.n	8005c34 <_printf_float+0x19c>
 8005c1c:	6121      	str	r1, [r4, #16]
 8005c1e:	b913      	cbnz	r3, 8005c26 <_printf_float+0x18e>
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	07d0      	lsls	r0, r2, #31
 8005c24:	d502      	bpl.n	8005c2c <_printf_float+0x194>
 8005c26:	3301      	adds	r3, #1
 8005c28:	440b      	add	r3, r1
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c2e:	f04f 0900 	mov.w	r9, #0
 8005c32:	e7db      	b.n	8005bec <_printf_float+0x154>
 8005c34:	b913      	cbnz	r3, 8005c3c <_printf_float+0x1a4>
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	07d2      	lsls	r2, r2, #31
 8005c3a:	d501      	bpl.n	8005c40 <_printf_float+0x1a8>
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	e7f4      	b.n	8005c2a <_printf_float+0x192>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e7f2      	b.n	8005c2a <_printf_float+0x192>
 8005c44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c4a:	4299      	cmp	r1, r3
 8005c4c:	db05      	blt.n	8005c5a <_printf_float+0x1c2>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	6121      	str	r1, [r4, #16]
 8005c52:	07d8      	lsls	r0, r3, #31
 8005c54:	d5ea      	bpl.n	8005c2c <_printf_float+0x194>
 8005c56:	1c4b      	adds	r3, r1, #1
 8005c58:	e7e7      	b.n	8005c2a <_printf_float+0x192>
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	bfd4      	ite	le
 8005c5e:	f1c1 0202 	rsble	r2, r1, #2
 8005c62:	2201      	movgt	r2, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	e7e0      	b.n	8005c2a <_printf_float+0x192>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	055a      	lsls	r2, r3, #21
 8005c6c:	d407      	bmi.n	8005c7e <_printf_float+0x1e6>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	4642      	mov	r2, r8
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d12b      	bne.n	8005cd4 <_printf_float+0x23c>
 8005c7c:	e767      	b.n	8005b4e <_printf_float+0xb6>
 8005c7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c82:	f240 80dd 	bls.w	8005e40 <_printf_float+0x3a8>
 8005c86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f7fa ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d033      	beq.n	8005cfe <_printf_float+0x266>
 8005c96:	4a37      	ldr	r2, [pc, #220]	@ (8005d74 <_printf_float+0x2dc>)
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f af54 	beq.w	8005b4e <_printf_float+0xb6>
 8005ca6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005caa:	4543      	cmp	r3, r8
 8005cac:	db02      	blt.n	8005cb4 <_printf_float+0x21c>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	07d8      	lsls	r0, r3, #31
 8005cb2:	d50f      	bpl.n	8005cd4 <_printf_float+0x23c>
 8005cb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af45 	beq.w	8005b4e <_printf_float+0xb6>
 8005cc4:	f04f 0900 	mov.w	r9, #0
 8005cc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ccc:	f104 0a1a 	add.w	sl, r4, #26
 8005cd0:	45c8      	cmp	r8, r9
 8005cd2:	dc09      	bgt.n	8005ce8 <_printf_float+0x250>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	079b      	lsls	r3, r3, #30
 8005cd8:	f100 8103 	bmi.w	8005ee2 <_printf_float+0x44a>
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	bfb8      	it	lt
 8005ce4:	4618      	movlt	r0, r3
 8005ce6:	e734      	b.n	8005b52 <_printf_float+0xba>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4652      	mov	r2, sl
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	f43f af2b 	beq.w	8005b4e <_printf_float+0xb6>
 8005cf8:	f109 0901 	add.w	r9, r9, #1
 8005cfc:	e7e8      	b.n	8005cd0 <_printf_float+0x238>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dc39      	bgt.n	8005d78 <_printf_float+0x2e0>
 8005d04:	4a1b      	ldr	r2, [pc, #108]	@ (8005d74 <_printf_float+0x2dc>)
 8005d06:	2301      	movs	r3, #1
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f af1d 	beq.w	8005b4e <_printf_float+0xb6>
 8005d14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d18:	ea59 0303 	orrs.w	r3, r9, r3
 8005d1c:	d102      	bne.n	8005d24 <_printf_float+0x28c>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	07d9      	lsls	r1, r3, #31
 8005d22:	d5d7      	bpl.n	8005cd4 <_printf_float+0x23c>
 8005d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	f43f af0d 	beq.w	8005b4e <_printf_float+0xb6>
 8005d34:	f04f 0a00 	mov.w	sl, #0
 8005d38:	f104 0b1a 	add.w	fp, r4, #26
 8005d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3e:	425b      	negs	r3, r3
 8005d40:	4553      	cmp	r3, sl
 8005d42:	dc01      	bgt.n	8005d48 <_printf_float+0x2b0>
 8005d44:	464b      	mov	r3, r9
 8005d46:	e793      	b.n	8005c70 <_printf_float+0x1d8>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	465a      	mov	r2, fp
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f aefb 	beq.w	8005b4e <_printf_float+0xb6>
 8005d58:	f10a 0a01 	add.w	sl, sl, #1
 8005d5c:	e7ee      	b.n	8005d3c <_printf_float+0x2a4>
 8005d5e:	bf00      	nop
 8005d60:	7fefffff 	.word	0x7fefffff
 8005d64:	080086fc 	.word	0x080086fc
 8005d68:	08008700 	.word	0x08008700
 8005d6c:	08008704 	.word	0x08008704
 8005d70:	08008708 	.word	0x08008708
 8005d74:	0800870c 	.word	0x0800870c
 8005d78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d7e:	4553      	cmp	r3, sl
 8005d80:	bfa8      	it	ge
 8005d82:	4653      	movge	r3, sl
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	4699      	mov	r9, r3
 8005d88:	dc36      	bgt.n	8005df8 <_printf_float+0x360>
 8005d8a:	f04f 0b00 	mov.w	fp, #0
 8005d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d92:	f104 021a 	add.w	r2, r4, #26
 8005d96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d98:	9306      	str	r3, [sp, #24]
 8005d9a:	eba3 0309 	sub.w	r3, r3, r9
 8005d9e:	455b      	cmp	r3, fp
 8005da0:	dc31      	bgt.n	8005e06 <_printf_float+0x36e>
 8005da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da4:	459a      	cmp	sl, r3
 8005da6:	dc3a      	bgt.n	8005e1e <_printf_float+0x386>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07da      	lsls	r2, r3, #31
 8005dac:	d437      	bmi.n	8005e1e <_printf_float+0x386>
 8005dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db0:	ebaa 0903 	sub.w	r9, sl, r3
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	ebaa 0303 	sub.w	r3, sl, r3
 8005dba:	4599      	cmp	r9, r3
 8005dbc:	bfa8      	it	ge
 8005dbe:	4699      	movge	r9, r3
 8005dc0:	f1b9 0f00 	cmp.w	r9, #0
 8005dc4:	dc33      	bgt.n	8005e2e <_printf_float+0x396>
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dce:	f104 0b1a 	add.w	fp, r4, #26
 8005dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd4:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd8:	eba3 0309 	sub.w	r3, r3, r9
 8005ddc:	4543      	cmp	r3, r8
 8005dde:	f77f af79 	ble.w	8005cd4 <_printf_float+0x23c>
 8005de2:	2301      	movs	r3, #1
 8005de4:	465a      	mov	r2, fp
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	f43f aeae 	beq.w	8005b4e <_printf_float+0xb6>
 8005df2:	f108 0801 	add.w	r8, r8, #1
 8005df6:	e7ec      	b.n	8005dd2 <_printf_float+0x33a>
 8005df8:	4642      	mov	r2, r8
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	d1c2      	bne.n	8005d8a <_printf_float+0x2f2>
 8005e04:	e6a3      	b.n	8005b4e <_printf_float+0xb6>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	9206      	str	r2, [sp, #24]
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	f43f ae9c 	beq.w	8005b4e <_printf_float+0xb6>
 8005e16:	9a06      	ldr	r2, [sp, #24]
 8005e18:	f10b 0b01 	add.w	fp, fp, #1
 8005e1c:	e7bb      	b.n	8005d96 <_printf_float+0x2fe>
 8005e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d1c0      	bne.n	8005dae <_printf_float+0x316>
 8005e2c:	e68f      	b.n	8005b4e <_printf_float+0xb6>
 8005e2e:	9a06      	ldr	r2, [sp, #24]
 8005e30:	464b      	mov	r3, r9
 8005e32:	4442      	add	r2, r8
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d1c3      	bne.n	8005dc6 <_printf_float+0x32e>
 8005e3e:	e686      	b.n	8005b4e <_printf_float+0xb6>
 8005e40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e44:	f1ba 0f01 	cmp.w	sl, #1
 8005e48:	dc01      	bgt.n	8005e4e <_printf_float+0x3b6>
 8005e4a:	07db      	lsls	r3, r3, #31
 8005e4c:	d536      	bpl.n	8005ebc <_printf_float+0x424>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4642      	mov	r2, r8
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f ae78 	beq.w	8005b4e <_printf_float+0xb6>
 8005e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f ae70 	beq.w	8005b4e <_printf_float+0xb6>
 8005e6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e72:	2200      	movs	r2, #0
 8005e74:	2300      	movs	r3, #0
 8005e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7a:	f7fa fe45 	bl	8000b08 <__aeabi_dcmpeq>
 8005e7e:	b9c0      	cbnz	r0, 8005eb2 <_printf_float+0x41a>
 8005e80:	4653      	mov	r3, sl
 8005e82:	f108 0201 	add.w	r2, r8, #1
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d10c      	bne.n	8005eaa <_printf_float+0x412>
 8005e90:	e65d      	b.n	8005b4e <_printf_float+0xb6>
 8005e92:	2301      	movs	r3, #1
 8005e94:	465a      	mov	r2, fp
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f43f ae56 	beq.w	8005b4e <_printf_float+0xb6>
 8005ea2:	f108 0801 	add.w	r8, r8, #1
 8005ea6:	45d0      	cmp	r8, sl
 8005ea8:	dbf3      	blt.n	8005e92 <_printf_float+0x3fa>
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005eb0:	e6df      	b.n	8005c72 <_printf_float+0x1da>
 8005eb2:	f04f 0800 	mov.w	r8, #0
 8005eb6:	f104 0b1a 	add.w	fp, r4, #26
 8005eba:	e7f4      	b.n	8005ea6 <_printf_float+0x40e>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	e7e1      	b.n	8005e86 <_printf_float+0x3ee>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	464a      	mov	r2, r9
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f ae3e 	beq.w	8005b4e <_printf_float+0xb6>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eda:	1a5b      	subs	r3, r3, r1
 8005edc:	4543      	cmp	r3, r8
 8005ede:	dcf0      	bgt.n	8005ec2 <_printf_float+0x42a>
 8005ee0:	e6fc      	b.n	8005cdc <_printf_float+0x244>
 8005ee2:	f04f 0800 	mov.w	r8, #0
 8005ee6:	f104 0919 	add.w	r9, r4, #25
 8005eea:	e7f4      	b.n	8005ed6 <_printf_float+0x43e>

08005eec <_printf_common>:
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	4698      	mov	r8, r3
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfb8      	it	lt
 8005f00:	4613      	movlt	r3, r2
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b10a      	cbz	r2, 8005f12 <_printf_common+0x26>
 8005f0e:	3301      	adds	r3, #1
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	0699      	lsls	r1, r3, #26
 8005f16:	bf42      	ittt	mi
 8005f18:	6833      	ldrmi	r3, [r6, #0]
 8005f1a:	3302      	addmi	r3, #2
 8005f1c:	6033      	strmi	r3, [r6, #0]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	f015 0506 	ands.w	r5, r5, #6
 8005f24:	d106      	bne.n	8005f34 <_printf_common+0x48>
 8005f26:	f104 0a19 	add.w	sl, r4, #25
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	6832      	ldr	r2, [r6, #0]
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dc26      	bgt.n	8005f82 <_printf_common+0x96>
 8005f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	3b00      	subs	r3, #0
 8005f3c:	bf18      	it	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	0692      	lsls	r2, r2, #26
 8005f42:	d42b      	bmi.n	8005f9c <_printf_common+0xb0>
 8005f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c8      	blx	r9
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d01e      	beq.n	8005f90 <_printf_common+0xa4>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	6922      	ldr	r2, [r4, #16]
 8005f56:	f003 0306 	and.w	r3, r3, #6
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf02      	ittt	eq
 8005f5e:	68e5      	ldreq	r5, [r4, #12]
 8005f60:	6833      	ldreq	r3, [r6, #0]
 8005f62:	1aed      	subeq	r5, r5, r3
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	bf0c      	ite	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	2500      	movne	r5, #0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfc4      	itt	gt
 8005f72:	1a9b      	subgt	r3, r3, r2
 8005f74:	18ed      	addgt	r5, r5, r3
 8005f76:	2600      	movs	r6, #0
 8005f78:	341a      	adds	r4, #26
 8005f7a:	42b5      	cmp	r5, r6
 8005f7c:	d11a      	bne.n	8005fb4 <_printf_common+0xc8>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	e008      	b.n	8005f94 <_printf_common+0xa8>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4652      	mov	r2, sl
 8005f86:	4641      	mov	r1, r8
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c8      	blx	r9
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_printf_common+0xac>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7c6      	b.n	8005f2a <_printf_common+0x3e>
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2030      	movs	r0, #48	@ 0x30
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fa6:	4422      	add	r2, r4
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	e7c7      	b.n	8005f44 <_printf_common+0x58>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4641      	mov	r1, r8
 8005fba:	4638      	mov	r0, r7
 8005fbc:	47c8      	blx	r9
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0e6      	beq.n	8005f90 <_printf_common+0xa4>
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7d9      	b.n	8005f7a <_printf_common+0x8e>
	...

08005fc8 <_printf_i>:
 8005fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	7e0f      	ldrb	r7, [r1, #24]
 8005fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fd0:	2f78      	cmp	r7, #120	@ 0x78
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	469a      	mov	sl, r3
 8005fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fde:	d807      	bhi.n	8005ff0 <_printf_i+0x28>
 8005fe0:	2f62      	cmp	r7, #98	@ 0x62
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x32>
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	f000 80d2 	beq.w	800618e <_printf_i+0x1c6>
 8005fea:	2f58      	cmp	r7, #88	@ 0x58
 8005fec:	f000 80b9 	beq.w	8006162 <_printf_i+0x19a>
 8005ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ff8:	e03a      	b.n	8006070 <_printf_i+0xa8>
 8005ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d8f6      	bhi.n	8005ff0 <_printf_i+0x28>
 8006002:	a101      	add	r1, pc, #4	@ (adr r1, 8006008 <_printf_i+0x40>)
 8006004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006075 	.word	0x08006075
 8006010:	08005ff1 	.word	0x08005ff1
 8006014:	08005ff1 	.word	0x08005ff1
 8006018:	08005ff1 	.word	0x08005ff1
 800601c:	08005ff1 	.word	0x08005ff1
 8006020:	08006075 	.word	0x08006075
 8006024:	08005ff1 	.word	0x08005ff1
 8006028:	08005ff1 	.word	0x08005ff1
 800602c:	08005ff1 	.word	0x08005ff1
 8006030:	08005ff1 	.word	0x08005ff1
 8006034:	08006175 	.word	0x08006175
 8006038:	0800609f 	.word	0x0800609f
 800603c:	0800612f 	.word	0x0800612f
 8006040:	08005ff1 	.word	0x08005ff1
 8006044:	08005ff1 	.word	0x08005ff1
 8006048:	08006197 	.word	0x08006197
 800604c:	08005ff1 	.word	0x08005ff1
 8006050:	0800609f 	.word	0x0800609f
 8006054:	08005ff1 	.word	0x08005ff1
 8006058:	08005ff1 	.word	0x08005ff1
 800605c:	08006137 	.word	0x08006137
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6032      	str	r2, [r6, #0]
 8006068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e09d      	b.n	80061b0 <_printf_i+0x1e8>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	1d19      	adds	r1, r3, #4
 800607a:	6031      	str	r1, [r6, #0]
 800607c:	0606      	lsls	r6, r0, #24
 800607e:	d501      	bpl.n	8006084 <_printf_i+0xbc>
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	e003      	b.n	800608c <_printf_i+0xc4>
 8006084:	0645      	lsls	r5, r0, #25
 8006086:	d5fb      	bpl.n	8006080 <_printf_i+0xb8>
 8006088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800608c:	2d00      	cmp	r5, #0
 800608e:	da03      	bge.n	8006098 <_printf_i+0xd0>
 8006090:	232d      	movs	r3, #45	@ 0x2d
 8006092:	426d      	negs	r5, r5
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006098:	4859      	ldr	r0, [pc, #356]	@ (8006200 <_printf_i+0x238>)
 800609a:	230a      	movs	r3, #10
 800609c:	e011      	b.n	80060c2 <_printf_i+0xfa>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	0608      	lsls	r0, r1, #24
 80060a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060a8:	d402      	bmi.n	80060b0 <_printf_i+0xe8>
 80060aa:	0649      	lsls	r1, r1, #25
 80060ac:	bf48      	it	mi
 80060ae:	b2ad      	uxthmi	r5, r5
 80060b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b2:	4853      	ldr	r0, [pc, #332]	@ (8006200 <_printf_i+0x238>)
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	bf14      	ite	ne
 80060b8:	230a      	movne	r3, #10
 80060ba:	2308      	moveq	r3, #8
 80060bc:	2100      	movs	r1, #0
 80060be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c2:	6866      	ldr	r6, [r4, #4]
 80060c4:	60a6      	str	r6, [r4, #8]
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	bfa2      	ittt	ge
 80060ca:	6821      	ldrge	r1, [r4, #0]
 80060cc:	f021 0104 	bicge.w	r1, r1, #4
 80060d0:	6021      	strge	r1, [r4, #0]
 80060d2:	b90d      	cbnz	r5, 80060d8 <_printf_i+0x110>
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	d04b      	beq.n	8006170 <_printf_i+0x1a8>
 80060d8:	4616      	mov	r6, r2
 80060da:	fbb5 f1f3 	udiv	r1, r5, r3
 80060de:	fb03 5711 	mls	r7, r3, r1, r5
 80060e2:	5dc7      	ldrb	r7, [r0, r7]
 80060e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060e8:	462f      	mov	r7, r5
 80060ea:	42bb      	cmp	r3, r7
 80060ec:	460d      	mov	r5, r1
 80060ee:	d9f4      	bls.n	80060da <_printf_i+0x112>
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d10b      	bne.n	800610c <_printf_i+0x144>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	07df      	lsls	r7, r3, #31
 80060f8:	d508      	bpl.n	800610c <_printf_i+0x144>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4299      	cmp	r1, r3
 8006100:	bfde      	ittt	le
 8006102:	2330      	movle	r3, #48	@ 0x30
 8006104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800610c:	1b92      	subs	r2, r2, r6
 800610e:	6122      	str	r2, [r4, #16]
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	464b      	mov	r3, r9
 8006116:	aa03      	add	r2, sp, #12
 8006118:	4621      	mov	r1, r4
 800611a:	4640      	mov	r0, r8
 800611c:	f7ff fee6 	bl	8005eec <_printf_common>
 8006120:	3001      	adds	r0, #1
 8006122:	d14a      	bne.n	80061ba <_printf_i+0x1f2>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	b004      	add	sp, #16
 800612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f043 0320 	orr.w	r3, r3, #32
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	4833      	ldr	r0, [pc, #204]	@ (8006204 <_printf_i+0x23c>)
 8006138:	2778      	movs	r7, #120	@ 0x78
 800613a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6831      	ldr	r1, [r6, #0]
 8006142:	061f      	lsls	r7, r3, #24
 8006144:	f851 5b04 	ldr.w	r5, [r1], #4
 8006148:	d402      	bmi.n	8006150 <_printf_i+0x188>
 800614a:	065f      	lsls	r7, r3, #25
 800614c:	bf48      	it	mi
 800614e:	b2ad      	uxthmi	r5, r5
 8006150:	6031      	str	r1, [r6, #0]
 8006152:	07d9      	lsls	r1, r3, #31
 8006154:	bf44      	itt	mi
 8006156:	f043 0320 	orrmi.w	r3, r3, #32
 800615a:	6023      	strmi	r3, [r4, #0]
 800615c:	b11d      	cbz	r5, 8006166 <_printf_i+0x19e>
 800615e:	2310      	movs	r3, #16
 8006160:	e7ac      	b.n	80060bc <_printf_i+0xf4>
 8006162:	4827      	ldr	r0, [pc, #156]	@ (8006200 <_printf_i+0x238>)
 8006164:	e7e9      	b.n	800613a <_printf_i+0x172>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f023 0320 	bic.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	e7f6      	b.n	800615e <_printf_i+0x196>
 8006170:	4616      	mov	r6, r2
 8006172:	e7bd      	b.n	80060f0 <_printf_i+0x128>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	1d18      	adds	r0, r3, #4
 800617c:	6030      	str	r0, [r6, #0]
 800617e:	062e      	lsls	r6, r5, #24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	d501      	bpl.n	8006188 <_printf_i+0x1c0>
 8006184:	6019      	str	r1, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0x1c6>
 8006188:	0668      	lsls	r0, r5, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0x1bc>
 800618c:	8019      	strh	r1, [r3, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	4616      	mov	r6, r2
 8006194:	e7bc      	b.n	8006110 <_printf_i+0x148>
 8006196:	6833      	ldr	r3, [r6, #0]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	2100      	movs	r1, #0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7fa f834 	bl	8000210 <memchr>
 80061a8:	b108      	cbz	r0, 80061ae <_printf_i+0x1e6>
 80061aa:	1b80      	subs	r0, r0, r6
 80061ac:	6060      	str	r0, [r4, #4]
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b8:	e7aa      	b.n	8006110 <_printf_i+0x148>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	4632      	mov	r2, r6
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	47d0      	blx	sl
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0ad      	beq.n	8006124 <_printf_i+0x15c>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	d413      	bmi.n	80061f6 <_printf_i+0x22e>
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	4298      	cmp	r0, r3
 80061d4:	bfb8      	it	lt
 80061d6:	4618      	movlt	r0, r3
 80061d8:	e7a6      	b.n	8006128 <_printf_i+0x160>
 80061da:	2301      	movs	r3, #1
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d09d      	beq.n	8006124 <_printf_i+0x15c>
 80061e8:	3501      	adds	r5, #1
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	9903      	ldr	r1, [sp, #12]
 80061ee:	1a5b      	subs	r3, r3, r1
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dcf2      	bgt.n	80061da <_printf_i+0x212>
 80061f4:	e7eb      	b.n	80061ce <_printf_i+0x206>
 80061f6:	2500      	movs	r5, #0
 80061f8:	f104 0619 	add.w	r6, r4, #25
 80061fc:	e7f5      	b.n	80061ea <_printf_i+0x222>
 80061fe:	bf00      	nop
 8006200:	0800870e 	.word	0x0800870e
 8006204:	0800871f 	.word	0x0800871f

08006208 <std>:
 8006208:	2300      	movs	r3, #0
 800620a:	b510      	push	{r4, lr}
 800620c:	4604      	mov	r4, r0
 800620e:	e9c0 3300 	strd	r3, r3, [r0]
 8006212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006216:	6083      	str	r3, [r0, #8]
 8006218:	8181      	strh	r1, [r0, #12]
 800621a:	6643      	str	r3, [r0, #100]	@ 0x64
 800621c:	81c2      	strh	r2, [r0, #14]
 800621e:	6183      	str	r3, [r0, #24]
 8006220:	4619      	mov	r1, r3
 8006222:	2208      	movs	r2, #8
 8006224:	305c      	adds	r0, #92	@ 0x5c
 8006226:	f000 f914 	bl	8006452 <memset>
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <std+0x58>)
 800622c:	6263      	str	r3, [r4, #36]	@ 0x24
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <std+0x5c>)
 8006230:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <std+0x60>)
 8006234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x64>)
 8006238:	6323      	str	r3, [r4, #48]	@ 0x30
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x68>)
 800623c:	6224      	str	r4, [r4, #32]
 800623e:	429c      	cmp	r4, r3
 8006240:	d006      	beq.n	8006250 <std+0x48>
 8006242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006246:	4294      	cmp	r4, r2
 8006248:	d002      	beq.n	8006250 <std+0x48>
 800624a:	33d0      	adds	r3, #208	@ 0xd0
 800624c:	429c      	cmp	r4, r3
 800624e:	d105      	bne.n	800625c <std+0x54>
 8006250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006258:	f000 b978 	b.w	800654c <__retarget_lock_init_recursive>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	080063cd 	.word	0x080063cd
 8006264:	080063ef 	.word	0x080063ef
 8006268:	08006427 	.word	0x08006427
 800626c:	0800644b 	.word	0x0800644b
 8006270:	20000414 	.word	0x20000414

08006274 <stdio_exit_handler>:
 8006274:	4a02      	ldr	r2, [pc, #8]	@ (8006280 <stdio_exit_handler+0xc>)
 8006276:	4903      	ldr	r1, [pc, #12]	@ (8006284 <stdio_exit_handler+0x10>)
 8006278:	4803      	ldr	r0, [pc, #12]	@ (8006288 <stdio_exit_handler+0x14>)
 800627a:	f000 b869 	b.w	8006350 <_fwalk_sglue>
 800627e:	bf00      	nop
 8006280:	20000018 	.word	0x20000018
 8006284:	08007ead 	.word	0x08007ead
 8006288:	20000028 	.word	0x20000028

0800628c <cleanup_stdio>:
 800628c:	6841      	ldr	r1, [r0, #4]
 800628e:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <cleanup_stdio+0x34>)
 8006290:	4299      	cmp	r1, r3
 8006292:	b510      	push	{r4, lr}
 8006294:	4604      	mov	r4, r0
 8006296:	d001      	beq.n	800629c <cleanup_stdio+0x10>
 8006298:	f001 fe08 	bl	8007eac <_fflush_r>
 800629c:	68a1      	ldr	r1, [r4, #8]
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <cleanup_stdio+0x38>)
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d002      	beq.n	80062aa <cleanup_stdio+0x1e>
 80062a4:	4620      	mov	r0, r4
 80062a6:	f001 fe01 	bl	8007eac <_fflush_r>
 80062aa:	68e1      	ldr	r1, [r4, #12]
 80062ac:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <cleanup_stdio+0x3c>)
 80062ae:	4299      	cmp	r1, r3
 80062b0:	d004      	beq.n	80062bc <cleanup_stdio+0x30>
 80062b2:	4620      	mov	r0, r4
 80062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b8:	f001 bdf8 	b.w	8007eac <_fflush_r>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	20000414 	.word	0x20000414
 80062c4:	2000047c 	.word	0x2000047c
 80062c8:	200004e4 	.word	0x200004e4

080062cc <global_stdio_init.part.0>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <global_stdio_init.part.0+0x30>)
 80062d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006300 <global_stdio_init.part.0+0x34>)
 80062d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <global_stdio_init.part.0+0x38>)
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	4620      	mov	r0, r4
 80062d8:	2200      	movs	r2, #0
 80062da:	2104      	movs	r1, #4
 80062dc:	f7ff ff94 	bl	8006208 <std>
 80062e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062e4:	2201      	movs	r2, #1
 80062e6:	2109      	movs	r1, #9
 80062e8:	f7ff ff8e 	bl	8006208 <std>
 80062ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062f0:	2202      	movs	r2, #2
 80062f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f6:	2112      	movs	r1, #18
 80062f8:	f7ff bf86 	b.w	8006208 <std>
 80062fc:	2000054c 	.word	0x2000054c
 8006300:	20000414 	.word	0x20000414
 8006304:	08006275 	.word	0x08006275

08006308 <__sfp_lock_acquire>:
 8006308:	4801      	ldr	r0, [pc, #4]	@ (8006310 <__sfp_lock_acquire+0x8>)
 800630a:	f000 b920 	b.w	800654e <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	20000555 	.word	0x20000555

08006314 <__sfp_lock_release>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__sfp_lock_release+0x8>)
 8006316:	f000 b91b 	b.w	8006550 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	20000555 	.word	0x20000555

08006320 <__sinit>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4604      	mov	r4, r0
 8006324:	f7ff fff0 	bl	8006308 <__sfp_lock_acquire>
 8006328:	6a23      	ldr	r3, [r4, #32]
 800632a:	b11b      	cbz	r3, 8006334 <__sinit+0x14>
 800632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006330:	f7ff bff0 	b.w	8006314 <__sfp_lock_release>
 8006334:	4b04      	ldr	r3, [pc, #16]	@ (8006348 <__sinit+0x28>)
 8006336:	6223      	str	r3, [r4, #32]
 8006338:	4b04      	ldr	r3, [pc, #16]	@ (800634c <__sinit+0x2c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f5      	bne.n	800632c <__sinit+0xc>
 8006340:	f7ff ffc4 	bl	80062cc <global_stdio_init.part.0>
 8006344:	e7f2      	b.n	800632c <__sinit+0xc>
 8006346:	bf00      	nop
 8006348:	0800628d 	.word	0x0800628d
 800634c:	2000054c 	.word	0x2000054c

08006350 <_fwalk_sglue>:
 8006350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006354:	4607      	mov	r7, r0
 8006356:	4688      	mov	r8, r1
 8006358:	4614      	mov	r4, r2
 800635a:	2600      	movs	r6, #0
 800635c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006360:	f1b9 0901 	subs.w	r9, r9, #1
 8006364:	d505      	bpl.n	8006372 <_fwalk_sglue+0x22>
 8006366:	6824      	ldr	r4, [r4, #0]
 8006368:	2c00      	cmp	r4, #0
 800636a:	d1f7      	bne.n	800635c <_fwalk_sglue+0xc>
 800636c:	4630      	mov	r0, r6
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	89ab      	ldrh	r3, [r5, #12]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d907      	bls.n	8006388 <_fwalk_sglue+0x38>
 8006378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800637c:	3301      	adds	r3, #1
 800637e:	d003      	beq.n	8006388 <_fwalk_sglue+0x38>
 8006380:	4629      	mov	r1, r5
 8006382:	4638      	mov	r0, r7
 8006384:	47c0      	blx	r8
 8006386:	4306      	orrs	r6, r0
 8006388:	3568      	adds	r5, #104	@ 0x68
 800638a:	e7e9      	b.n	8006360 <_fwalk_sglue+0x10>

0800638c <siprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b500      	push	{lr}
 8006390:	b09c      	sub	sp, #112	@ 0x70
 8006392:	ab1d      	add	r3, sp, #116	@ 0x74
 8006394:	9002      	str	r0, [sp, #8]
 8006396:	9006      	str	r0, [sp, #24]
 8006398:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800639c:	4809      	ldr	r0, [pc, #36]	@ (80063c4 <siprintf+0x38>)
 800639e:	9107      	str	r1, [sp, #28]
 80063a0:	9104      	str	r1, [sp, #16]
 80063a2:	4909      	ldr	r1, [pc, #36]	@ (80063c8 <siprintf+0x3c>)
 80063a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	a902      	add	r1, sp, #8
 80063b0:	f001 fbfc 	bl	8007bac <_svfiprintf_r>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	b01c      	add	sp, #112	@ 0x70
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b003      	add	sp, #12
 80063c2:	4770      	bx	lr
 80063c4:	20000024 	.word	0x20000024
 80063c8:	ffff0208 	.word	0xffff0208

080063cc <__sread>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	460c      	mov	r4, r1
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	f000 f86c 	bl	80064b0 <_read_r>
 80063d8:	2800      	cmp	r0, #0
 80063da:	bfab      	itete	ge
 80063dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063de:	89a3      	ldrhlt	r3, [r4, #12]
 80063e0:	181b      	addge	r3, r3, r0
 80063e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063e6:	bfac      	ite	ge
 80063e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063ea:	81a3      	strhlt	r3, [r4, #12]
 80063ec:	bd10      	pop	{r4, pc}

080063ee <__swrite>:
 80063ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	461f      	mov	r7, r3
 80063f4:	898b      	ldrh	r3, [r1, #12]
 80063f6:	05db      	lsls	r3, r3, #23
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	4616      	mov	r6, r2
 80063fe:	d505      	bpl.n	800640c <__swrite+0x1e>
 8006400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006404:	2302      	movs	r3, #2
 8006406:	2200      	movs	r2, #0
 8006408:	f000 f840 	bl	800648c <_lseek_r>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	4632      	mov	r2, r6
 800641a:	463b      	mov	r3, r7
 800641c:	4628      	mov	r0, r5
 800641e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006422:	f000 b857 	b.w	80064d4 <_write_r>

08006426 <__sseek>:
 8006426:	b510      	push	{r4, lr}
 8006428:	460c      	mov	r4, r1
 800642a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642e:	f000 f82d 	bl	800648c <_lseek_r>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	bf15      	itete	ne
 8006438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800643a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800643e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006442:	81a3      	strheq	r3, [r4, #12]
 8006444:	bf18      	it	ne
 8006446:	81a3      	strhne	r3, [r4, #12]
 8006448:	bd10      	pop	{r4, pc}

0800644a <__sclose>:
 800644a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644e:	f000 b80d 	b.w	800646c <_close_r>

08006452 <memset>:
 8006452:	4402      	add	r2, r0
 8006454:	4603      	mov	r3, r0
 8006456:	4293      	cmp	r3, r2
 8006458:	d100      	bne.n	800645c <memset+0xa>
 800645a:	4770      	bx	lr
 800645c:	f803 1b01 	strb.w	r1, [r3], #1
 8006460:	e7f9      	b.n	8006456 <memset+0x4>
	...

08006464 <_localeconv_r>:
 8006464:	4800      	ldr	r0, [pc, #0]	@ (8006468 <_localeconv_r+0x4>)
 8006466:	4770      	bx	lr
 8006468:	20000164 	.word	0x20000164

0800646c <_close_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d06      	ldr	r5, [pc, #24]	@ (8006488 <_close_r+0x1c>)
 8006470:	2300      	movs	r3, #0
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	f7fc f864 	bl	8002544 <_close>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_close_r+0x1a>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_close_r+0x1a>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000550 	.word	0x20000550

0800648c <_lseek_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	@ (80064ac <_lseek_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fc f879 	bl	8002592 <_lseek>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_lseek_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_lseek_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000550 	.word	0x20000550

080064b0 <_read_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	@ (80064d0 <_read_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fc f807 	bl	80024d2 <_read>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_read_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_read_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000550 	.word	0x20000550

080064d4 <_write_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	@ (80064f4 <_write_r+0x20>)
 80064d8:	4604      	mov	r4, r0
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	602a      	str	r2, [r5, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7fc f812 	bl	800250c <_write>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_write_r+0x1e>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_write_r+0x1e>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	20000550 	.word	0x20000550

080064f8 <__errno>:
 80064f8:	4b01      	ldr	r3, [pc, #4]	@ (8006500 <__errno+0x8>)
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000024 	.word	0x20000024

08006504 <__libc_init_array>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4d0d      	ldr	r5, [pc, #52]	@ (800653c <__libc_init_array+0x38>)
 8006508:	4c0d      	ldr	r4, [pc, #52]	@ (8006540 <__libc_init_array+0x3c>)
 800650a:	1b64      	subs	r4, r4, r5
 800650c:	10a4      	asrs	r4, r4, #2
 800650e:	2600      	movs	r6, #0
 8006510:	42a6      	cmp	r6, r4
 8006512:	d109      	bne.n	8006528 <__libc_init_array+0x24>
 8006514:	4d0b      	ldr	r5, [pc, #44]	@ (8006544 <__libc_init_array+0x40>)
 8006516:	4c0c      	ldr	r4, [pc, #48]	@ (8006548 <__libc_init_array+0x44>)
 8006518:	f002 f866 	bl	80085e8 <_init>
 800651c:	1b64      	subs	r4, r4, r5
 800651e:	10a4      	asrs	r4, r4, #2
 8006520:	2600      	movs	r6, #0
 8006522:	42a6      	cmp	r6, r4
 8006524:	d105      	bne.n	8006532 <__libc_init_array+0x2e>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f855 3b04 	ldr.w	r3, [r5], #4
 800652c:	4798      	blx	r3
 800652e:	3601      	adds	r6, #1
 8006530:	e7ee      	b.n	8006510 <__libc_init_array+0xc>
 8006532:	f855 3b04 	ldr.w	r3, [r5], #4
 8006536:	4798      	blx	r3
 8006538:	3601      	adds	r6, #1
 800653a:	e7f2      	b.n	8006522 <__libc_init_array+0x1e>
 800653c:	08008a78 	.word	0x08008a78
 8006540:	08008a78 	.word	0x08008a78
 8006544:	08008a78 	.word	0x08008a78
 8006548:	08008a7c 	.word	0x08008a7c

0800654c <__retarget_lock_init_recursive>:
 800654c:	4770      	bx	lr

0800654e <__retarget_lock_acquire_recursive>:
 800654e:	4770      	bx	lr

08006550 <__retarget_lock_release_recursive>:
 8006550:	4770      	bx	lr

08006552 <quorem>:
 8006552:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	6903      	ldr	r3, [r0, #16]
 8006558:	690c      	ldr	r4, [r1, #16]
 800655a:	42a3      	cmp	r3, r4
 800655c:	4607      	mov	r7, r0
 800655e:	db7e      	blt.n	800665e <quorem+0x10c>
 8006560:	3c01      	subs	r4, #1
 8006562:	f101 0814 	add.w	r8, r1, #20
 8006566:	00a3      	lsls	r3, r4, #2
 8006568:	f100 0514 	add.w	r5, r0, #20
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800657c:	3301      	adds	r3, #1
 800657e:	429a      	cmp	r2, r3
 8006580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006584:	fbb2 f6f3 	udiv	r6, r2, r3
 8006588:	d32e      	bcc.n	80065e8 <quorem+0x96>
 800658a:	f04f 0a00 	mov.w	sl, #0
 800658e:	46c4      	mov	ip, r8
 8006590:	46ae      	mov	lr, r5
 8006592:	46d3      	mov	fp, sl
 8006594:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006598:	b298      	uxth	r0, r3
 800659a:	fb06 a000 	mla	r0, r6, r0, sl
 800659e:	0c02      	lsrs	r2, r0, #16
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	fb06 2303 	mla	r3, r6, r3, r2
 80065a6:	f8de 2000 	ldr.w	r2, [lr]
 80065aa:	b280      	uxth	r0, r0
 80065ac:	b292      	uxth	r2, r2
 80065ae:	1a12      	subs	r2, r2, r0
 80065b0:	445a      	add	r2, fp
 80065b2:	f8de 0000 	ldr.w	r0, [lr]
 80065b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80065c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065c4:	b292      	uxth	r2, r2
 80065c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065ca:	45e1      	cmp	r9, ip
 80065cc:	f84e 2b04 	str.w	r2, [lr], #4
 80065d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065d4:	d2de      	bcs.n	8006594 <quorem+0x42>
 80065d6:	9b00      	ldr	r3, [sp, #0]
 80065d8:	58eb      	ldr	r3, [r5, r3]
 80065da:	b92b      	cbnz	r3, 80065e8 <quorem+0x96>
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	3b04      	subs	r3, #4
 80065e0:	429d      	cmp	r5, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	d32f      	bcc.n	8006646 <quorem+0xf4>
 80065e6:	613c      	str	r4, [r7, #16]
 80065e8:	4638      	mov	r0, r7
 80065ea:	f001 f97b 	bl	80078e4 <__mcmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	db25      	blt.n	800663e <quorem+0xec>
 80065f2:	4629      	mov	r1, r5
 80065f4:	2000      	movs	r0, #0
 80065f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80065fa:	f8d1 c000 	ldr.w	ip, [r1]
 80065fe:	fa1f fe82 	uxth.w	lr, r2
 8006602:	fa1f f38c 	uxth.w	r3, ip
 8006606:	eba3 030e 	sub.w	r3, r3, lr
 800660a:	4403      	add	r3, r0
 800660c:	0c12      	lsrs	r2, r2, #16
 800660e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006612:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006616:	b29b      	uxth	r3, r3
 8006618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800661c:	45c1      	cmp	r9, r8
 800661e:	f841 3b04 	str.w	r3, [r1], #4
 8006622:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006626:	d2e6      	bcs.n	80065f6 <quorem+0xa4>
 8006628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800662c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006630:	b922      	cbnz	r2, 800663c <quorem+0xea>
 8006632:	3b04      	subs	r3, #4
 8006634:	429d      	cmp	r5, r3
 8006636:	461a      	mov	r2, r3
 8006638:	d30b      	bcc.n	8006652 <quorem+0x100>
 800663a:	613c      	str	r4, [r7, #16]
 800663c:	3601      	adds	r6, #1
 800663e:	4630      	mov	r0, r6
 8006640:	b003      	add	sp, #12
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	3b04      	subs	r3, #4
 800664a:	2a00      	cmp	r2, #0
 800664c:	d1cb      	bne.n	80065e6 <quorem+0x94>
 800664e:	3c01      	subs	r4, #1
 8006650:	e7c6      	b.n	80065e0 <quorem+0x8e>
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	3b04      	subs	r3, #4
 8006656:	2a00      	cmp	r2, #0
 8006658:	d1ef      	bne.n	800663a <quorem+0xe8>
 800665a:	3c01      	subs	r4, #1
 800665c:	e7ea      	b.n	8006634 <quorem+0xe2>
 800665e:	2000      	movs	r0, #0
 8006660:	e7ee      	b.n	8006640 <quorem+0xee>
 8006662:	0000      	movs	r0, r0
 8006664:	0000      	movs	r0, r0
	...

08006668 <_dtoa_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	69c7      	ldr	r7, [r0, #28]
 800666e:	b099      	sub	sp, #100	@ 0x64
 8006670:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006674:	ec55 4b10 	vmov	r4, r5, d0
 8006678:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800667a:	9109      	str	r1, [sp, #36]	@ 0x24
 800667c:	4683      	mov	fp, r0
 800667e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006680:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006682:	b97f      	cbnz	r7, 80066a4 <_dtoa_r+0x3c>
 8006684:	2010      	movs	r0, #16
 8006686:	f000 fdfd 	bl	8007284 <malloc>
 800668a:	4602      	mov	r2, r0
 800668c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006690:	b920      	cbnz	r0, 800669c <_dtoa_r+0x34>
 8006692:	4ba7      	ldr	r3, [pc, #668]	@ (8006930 <_dtoa_r+0x2c8>)
 8006694:	21ef      	movs	r1, #239	@ 0xef
 8006696:	48a7      	ldr	r0, [pc, #668]	@ (8006934 <_dtoa_r+0x2cc>)
 8006698:	f001 fc68 	bl	8007f6c <__assert_func>
 800669c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066a0:	6007      	str	r7, [r0, #0]
 80066a2:	60c7      	str	r7, [r0, #12]
 80066a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	b159      	cbz	r1, 80066c4 <_dtoa_r+0x5c>
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	604a      	str	r2, [r1, #4]
 80066b0:	2301      	movs	r3, #1
 80066b2:	4093      	lsls	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
 80066b6:	4658      	mov	r0, fp
 80066b8:	f000 feda 	bl	8007470 <_Bfree>
 80066bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	1e2b      	subs	r3, r5, #0
 80066c6:	bfb9      	ittee	lt
 80066c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066cc:	9303      	strlt	r3, [sp, #12]
 80066ce:	2300      	movge	r3, #0
 80066d0:	6033      	strge	r3, [r6, #0]
 80066d2:	9f03      	ldr	r7, [sp, #12]
 80066d4:	4b98      	ldr	r3, [pc, #608]	@ (8006938 <_dtoa_r+0x2d0>)
 80066d6:	bfbc      	itt	lt
 80066d8:	2201      	movlt	r2, #1
 80066da:	6032      	strlt	r2, [r6, #0]
 80066dc:	43bb      	bics	r3, r7
 80066de:	d112      	bne.n	8006706 <_dtoa_r+0x9e>
 80066e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066ec:	4323      	orrs	r3, r4
 80066ee:	f000 854d 	beq.w	800718c <_dtoa_r+0xb24>
 80066f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800694c <_dtoa_r+0x2e4>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 854f 	beq.w	800719c <_dtoa_r+0xb34>
 80066fe:	f10a 0303 	add.w	r3, sl, #3
 8006702:	f000 bd49 	b.w	8007198 <_dtoa_r+0xb30>
 8006706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	ec51 0b17 	vmov	r0, r1, d7
 8006710:	2300      	movs	r3, #0
 8006712:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006716:	f7fa f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800671a:	4680      	mov	r8, r0
 800671c:	b158      	cbz	r0, 8006736 <_dtoa_r+0xce>
 800671e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006720:	2301      	movs	r3, #1
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006726:	b113      	cbz	r3, 800672e <_dtoa_r+0xc6>
 8006728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800672a:	4b84      	ldr	r3, [pc, #528]	@ (800693c <_dtoa_r+0x2d4>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006950 <_dtoa_r+0x2e8>
 8006732:	f000 bd33 	b.w	800719c <_dtoa_r+0xb34>
 8006736:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800673a:	aa16      	add	r2, sp, #88	@ 0x58
 800673c:	a917      	add	r1, sp, #92	@ 0x5c
 800673e:	4658      	mov	r0, fp
 8006740:	f001 f980 	bl	8007a44 <__d2b>
 8006744:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006748:	4681      	mov	r9, r0
 800674a:	2e00      	cmp	r6, #0
 800674c:	d077      	beq.n	800683e <_dtoa_r+0x1d6>
 800674e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006750:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800675c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006760:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006764:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006768:	4619      	mov	r1, r3
 800676a:	2200      	movs	r2, #0
 800676c:	4b74      	ldr	r3, [pc, #464]	@ (8006940 <_dtoa_r+0x2d8>)
 800676e:	f7f9 fdab 	bl	80002c8 <__aeabi_dsub>
 8006772:	a369      	add	r3, pc, #420	@ (adr r3, 8006918 <_dtoa_r+0x2b0>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 ff5e 	bl	8000638 <__aeabi_dmul>
 800677c:	a368      	add	r3, pc, #416	@ (adr r3, 8006920 <_dtoa_r+0x2b8>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fda3 	bl	80002cc <__adddf3>
 8006786:	4604      	mov	r4, r0
 8006788:	4630      	mov	r0, r6
 800678a:	460d      	mov	r5, r1
 800678c:	f7f9 feea 	bl	8000564 <__aeabi_i2d>
 8006790:	a365      	add	r3, pc, #404	@ (adr r3, 8006928 <_dtoa_r+0x2c0>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7f9 ff4f 	bl	8000638 <__aeabi_dmul>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7f9 fd93 	bl	80002cc <__adddf3>
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	f7fa f9f5 	bl	8000b98 <__aeabi_d2iz>
 80067ae:	2200      	movs	r2, #0
 80067b0:	4607      	mov	r7, r0
 80067b2:	2300      	movs	r3, #0
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f7fa f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80067bc:	b140      	cbz	r0, 80067d0 <_dtoa_r+0x168>
 80067be:	4638      	mov	r0, r7
 80067c0:	f7f9 fed0 	bl	8000564 <__aeabi_i2d>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7fa f99e 	bl	8000b08 <__aeabi_dcmpeq>
 80067cc:	b900      	cbnz	r0, 80067d0 <_dtoa_r+0x168>
 80067ce:	3f01      	subs	r7, #1
 80067d0:	2f16      	cmp	r7, #22
 80067d2:	d851      	bhi.n	8006878 <_dtoa_r+0x210>
 80067d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006944 <_dtoa_r+0x2dc>)
 80067d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e2:	f7fa f99b 	bl	8000b1c <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d048      	beq.n	800687c <_dtoa_r+0x214>
 80067ea:	3f01      	subs	r7, #1
 80067ec:	2300      	movs	r3, #0
 80067ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80067f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067f2:	1b9b      	subs	r3, r3, r6
 80067f4:	1e5a      	subs	r2, r3, #1
 80067f6:	bf44      	itt	mi
 80067f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80067fc:	2300      	movmi	r3, #0
 80067fe:	9208      	str	r2, [sp, #32]
 8006800:	bf54      	ite	pl
 8006802:	f04f 0800 	movpl.w	r8, #0
 8006806:	9308      	strmi	r3, [sp, #32]
 8006808:	2f00      	cmp	r7, #0
 800680a:	db39      	blt.n	8006880 <_dtoa_r+0x218>
 800680c:	9b08      	ldr	r3, [sp, #32]
 800680e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006810:	443b      	add	r3, r7
 8006812:	9308      	str	r3, [sp, #32]
 8006814:	2300      	movs	r3, #0
 8006816:	930a      	str	r3, [sp, #40]	@ 0x28
 8006818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681a:	2b09      	cmp	r3, #9
 800681c:	d864      	bhi.n	80068e8 <_dtoa_r+0x280>
 800681e:	2b05      	cmp	r3, #5
 8006820:	bfc4      	itt	gt
 8006822:	3b04      	subgt	r3, #4
 8006824:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006828:	f1a3 0302 	sub.w	r3, r3, #2
 800682c:	bfcc      	ite	gt
 800682e:	2400      	movgt	r4, #0
 8006830:	2401      	movle	r4, #1
 8006832:	2b03      	cmp	r3, #3
 8006834:	d863      	bhi.n	80068fe <_dtoa_r+0x296>
 8006836:	e8df f003 	tbb	[pc, r3]
 800683a:	372a      	.short	0x372a
 800683c:	5535      	.short	0x5535
 800683e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006842:	441e      	add	r6, r3
 8006844:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006848:	2b20      	cmp	r3, #32
 800684a:	bfc1      	itttt	gt
 800684c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006850:	409f      	lslgt	r7, r3
 8006852:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006856:	fa24 f303 	lsrgt.w	r3, r4, r3
 800685a:	bfd6      	itet	le
 800685c:	f1c3 0320 	rsble	r3, r3, #32
 8006860:	ea47 0003 	orrgt.w	r0, r7, r3
 8006864:	fa04 f003 	lslle.w	r0, r4, r3
 8006868:	f7f9 fe6c 	bl	8000544 <__aeabi_ui2d>
 800686c:	2201      	movs	r2, #1
 800686e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006872:	3e01      	subs	r6, #1
 8006874:	9214      	str	r2, [sp, #80]	@ 0x50
 8006876:	e777      	b.n	8006768 <_dtoa_r+0x100>
 8006878:	2301      	movs	r3, #1
 800687a:	e7b8      	b.n	80067ee <_dtoa_r+0x186>
 800687c:	9012      	str	r0, [sp, #72]	@ 0x48
 800687e:	e7b7      	b.n	80067f0 <_dtoa_r+0x188>
 8006880:	427b      	negs	r3, r7
 8006882:	930a      	str	r3, [sp, #40]	@ 0x28
 8006884:	2300      	movs	r3, #0
 8006886:	eba8 0807 	sub.w	r8, r8, r7
 800688a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800688c:	e7c4      	b.n	8006818 <_dtoa_r+0x1b0>
 800688e:	2300      	movs	r3, #0
 8006890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	dc35      	bgt.n	8006904 <_dtoa_r+0x29c>
 8006898:	2301      	movs	r3, #1
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	461a      	mov	r2, r3
 80068a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80068a2:	e00b      	b.n	80068bc <_dtoa_r+0x254>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e7f3      	b.n	8006890 <_dtoa_r+0x228>
 80068a8:	2300      	movs	r3, #0
 80068aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	bfb8      	it	lt
 80068ba:	2301      	movlt	r3, #1
 80068bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80068c0:	2100      	movs	r1, #0
 80068c2:	2204      	movs	r2, #4
 80068c4:	f102 0514 	add.w	r5, r2, #20
 80068c8:	429d      	cmp	r5, r3
 80068ca:	d91f      	bls.n	800690c <_dtoa_r+0x2a4>
 80068cc:	6041      	str	r1, [r0, #4]
 80068ce:	4658      	mov	r0, fp
 80068d0:	f000 fd8e 	bl	80073f0 <_Balloc>
 80068d4:	4682      	mov	sl, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d13c      	bne.n	8006954 <_dtoa_r+0x2ec>
 80068da:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <_dtoa_r+0x2e0>)
 80068dc:	4602      	mov	r2, r0
 80068de:	f240 11af 	movw	r1, #431	@ 0x1af
 80068e2:	e6d8      	b.n	8006696 <_dtoa_r+0x2e>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e7e0      	b.n	80068aa <_dtoa_r+0x242>
 80068e8:	2401      	movs	r4, #1
 80068ea:	2300      	movs	r3, #0
 80068ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2312      	movs	r3, #18
 80068fc:	e7d0      	b.n	80068a0 <_dtoa_r+0x238>
 80068fe:	2301      	movs	r3, #1
 8006900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006902:	e7f5      	b.n	80068f0 <_dtoa_r+0x288>
 8006904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	9307      	str	r3, [sp, #28]
 800690a:	e7d7      	b.n	80068bc <_dtoa_r+0x254>
 800690c:	3101      	adds	r1, #1
 800690e:	0052      	lsls	r2, r2, #1
 8006910:	e7d8      	b.n	80068c4 <_dtoa_r+0x25c>
 8006912:	bf00      	nop
 8006914:	f3af 8000 	nop.w
 8006918:	636f4361 	.word	0x636f4361
 800691c:	3fd287a7 	.word	0x3fd287a7
 8006920:	8b60c8b3 	.word	0x8b60c8b3
 8006924:	3fc68a28 	.word	0x3fc68a28
 8006928:	509f79fb 	.word	0x509f79fb
 800692c:	3fd34413 	.word	0x3fd34413
 8006930:	0800873d 	.word	0x0800873d
 8006934:	08008754 	.word	0x08008754
 8006938:	7ff00000 	.word	0x7ff00000
 800693c:	0800870d 	.word	0x0800870d
 8006940:	3ff80000 	.word	0x3ff80000
 8006944:	08008850 	.word	0x08008850
 8006948:	080087ac 	.word	0x080087ac
 800694c:	08008739 	.word	0x08008739
 8006950:	0800870c 	.word	0x0800870c
 8006954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006958:	6018      	str	r0, [r3, #0]
 800695a:	9b07      	ldr	r3, [sp, #28]
 800695c:	2b0e      	cmp	r3, #14
 800695e:	f200 80a4 	bhi.w	8006aaa <_dtoa_r+0x442>
 8006962:	2c00      	cmp	r4, #0
 8006964:	f000 80a1 	beq.w	8006aaa <_dtoa_r+0x442>
 8006968:	2f00      	cmp	r7, #0
 800696a:	dd33      	ble.n	80069d4 <_dtoa_r+0x36c>
 800696c:	4bad      	ldr	r3, [pc, #692]	@ (8006c24 <_dtoa_r+0x5bc>)
 800696e:	f007 020f 	and.w	r2, r7, #15
 8006972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006976:	ed93 7b00 	vldr	d7, [r3]
 800697a:	05f8      	lsls	r0, r7, #23
 800697c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006980:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006984:	d516      	bpl.n	80069b4 <_dtoa_r+0x34c>
 8006986:	4ba8      	ldr	r3, [pc, #672]	@ (8006c28 <_dtoa_r+0x5c0>)
 8006988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800698c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006990:	f7f9 ff7c 	bl	800088c <__aeabi_ddiv>
 8006994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006998:	f004 040f 	and.w	r4, r4, #15
 800699c:	2603      	movs	r6, #3
 800699e:	4da2      	ldr	r5, [pc, #648]	@ (8006c28 <_dtoa_r+0x5c0>)
 80069a0:	b954      	cbnz	r4, 80069b8 <_dtoa_r+0x350>
 80069a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069aa:	f7f9 ff6f 	bl	800088c <__aeabi_ddiv>
 80069ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b2:	e028      	b.n	8006a06 <_dtoa_r+0x39e>
 80069b4:	2602      	movs	r6, #2
 80069b6:	e7f2      	b.n	800699e <_dtoa_r+0x336>
 80069b8:	07e1      	lsls	r1, r4, #31
 80069ba:	d508      	bpl.n	80069ce <_dtoa_r+0x366>
 80069bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069c4:	f7f9 fe38 	bl	8000638 <__aeabi_dmul>
 80069c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069cc:	3601      	adds	r6, #1
 80069ce:	1064      	asrs	r4, r4, #1
 80069d0:	3508      	adds	r5, #8
 80069d2:	e7e5      	b.n	80069a0 <_dtoa_r+0x338>
 80069d4:	f000 80d2 	beq.w	8006b7c <_dtoa_r+0x514>
 80069d8:	427c      	negs	r4, r7
 80069da:	4b92      	ldr	r3, [pc, #584]	@ (8006c24 <_dtoa_r+0x5bc>)
 80069dc:	4d92      	ldr	r5, [pc, #584]	@ (8006c28 <_dtoa_r+0x5c0>)
 80069de:	f004 020f 	and.w	r2, r4, #15
 80069e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ee:	f7f9 fe23 	bl	8000638 <__aeabi_dmul>
 80069f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f6:	1124      	asrs	r4, r4, #4
 80069f8:	2300      	movs	r3, #0
 80069fa:	2602      	movs	r6, #2
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	f040 80b2 	bne.w	8006b66 <_dtoa_r+0x4fe>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1d3      	bne.n	80069ae <_dtoa_r+0x346>
 8006a06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80b7 	beq.w	8006b80 <_dtoa_r+0x518>
 8006a12:	4b86      	ldr	r3, [pc, #536]	@ (8006c2c <_dtoa_r+0x5c4>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	4620      	mov	r0, r4
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7fa f87f 	bl	8000b1c <__aeabi_dcmplt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f000 80ae 	beq.w	8006b80 <_dtoa_r+0x518>
 8006a24:	9b07      	ldr	r3, [sp, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80aa 	beq.w	8006b80 <_dtoa_r+0x518>
 8006a2c:	9b00      	ldr	r3, [sp, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd37      	ble.n	8006aa2 <_dtoa_r+0x43a>
 8006a32:	1e7b      	subs	r3, r7, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	4620      	mov	r0, r4
 8006a38:	4b7d      	ldr	r3, [pc, #500]	@ (8006c30 <_dtoa_r+0x5c8>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7f9 fdfb 	bl	8000638 <__aeabi_dmul>
 8006a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a46:	9c00      	ldr	r4, [sp, #0]
 8006a48:	3601      	adds	r6, #1
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7f9 fd8a 	bl	8000564 <__aeabi_i2d>
 8006a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a54:	f7f9 fdf0 	bl	8000638 <__aeabi_dmul>
 8006a58:	4b76      	ldr	r3, [pc, #472]	@ (8006c34 <_dtoa_r+0x5cc>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f7f9 fc36 	bl	80002cc <__adddf3>
 8006a60:	4605      	mov	r5, r0
 8006a62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a66:	2c00      	cmp	r4, #0
 8006a68:	f040 808d 	bne.w	8006b86 <_dtoa_r+0x51e>
 8006a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a70:	4b71      	ldr	r3, [pc, #452]	@ (8006c38 <_dtoa_r+0x5d0>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f7f9 fc28 	bl	80002c8 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a80:	462a      	mov	r2, r5
 8006a82:	4633      	mov	r3, r6
 8006a84:	f7fa f868 	bl	8000b58 <__aeabi_dcmpgt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f040 828b 	bne.w	8006fa4 <_dtoa_r+0x93c>
 8006a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a92:	462a      	mov	r2, r5
 8006a94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a98:	f7fa f840 	bl	8000b1c <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f040 8128 	bne.w	8006cf2 <_dtoa_r+0x68a>
 8006aa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f2c0 815a 	blt.w	8006d66 <_dtoa_r+0x6fe>
 8006ab2:	2f0e      	cmp	r7, #14
 8006ab4:	f300 8157 	bgt.w	8006d66 <_dtoa_r+0x6fe>
 8006ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c24 <_dtoa_r+0x5bc>)
 8006aba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006abe:	ed93 7b00 	vldr	d7, [r3]
 8006ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	ed8d 7b00 	vstr	d7, [sp]
 8006aca:	da03      	bge.n	8006ad4 <_dtoa_r+0x46c>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f340 8101 	ble.w	8006cd6 <_dtoa_r+0x66e>
 8006ad4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ad8:	4656      	mov	r6, sl
 8006ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 fed3 	bl	800088c <__aeabi_ddiv>
 8006ae6:	f7fa f857 	bl	8000b98 <__aeabi_d2iz>
 8006aea:	4680      	mov	r8, r0
 8006aec:	f7f9 fd3a 	bl	8000564 <__aeabi_i2d>
 8006af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af4:	f7f9 fda0 	bl	8000638 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b04:	f7f9 fbe0 	bl	80002c8 <__aeabi_dsub>
 8006b08:	f806 4b01 	strb.w	r4, [r6], #1
 8006b0c:	9d07      	ldr	r5, [sp, #28]
 8006b0e:	eba6 040a 	sub.w	r4, r6, sl
 8006b12:	42a5      	cmp	r5, r4
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	f040 8117 	bne.w	8006d4a <_dtoa_r+0x6e2>
 8006b1c:	f7f9 fbd6 	bl	80002cc <__adddf3>
 8006b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b24:	4604      	mov	r4, r0
 8006b26:	460d      	mov	r5, r1
 8006b28:	f7fa f816 	bl	8000b58 <__aeabi_dcmpgt>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f040 80f9 	bne.w	8006d24 <_dtoa_r+0x6bc>
 8006b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8006b3e:	b118      	cbz	r0, 8006b48 <_dtoa_r+0x4e0>
 8006b40:	f018 0f01 	tst.w	r8, #1
 8006b44:	f040 80ee 	bne.w	8006d24 <_dtoa_r+0x6bc>
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	f000 fc90 	bl	8007470 <_Bfree>
 8006b50:	2300      	movs	r3, #0
 8006b52:	7033      	strb	r3, [r6, #0]
 8006b54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b56:	3701      	adds	r7, #1
 8006b58:	601f      	str	r7, [r3, #0]
 8006b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 831d 	beq.w	800719c <_dtoa_r+0xb34>
 8006b62:	601e      	str	r6, [r3, #0]
 8006b64:	e31a      	b.n	800719c <_dtoa_r+0xb34>
 8006b66:	07e2      	lsls	r2, r4, #31
 8006b68:	d505      	bpl.n	8006b76 <_dtoa_r+0x50e>
 8006b6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b6e:	f7f9 fd63 	bl	8000638 <__aeabi_dmul>
 8006b72:	3601      	adds	r6, #1
 8006b74:	2301      	movs	r3, #1
 8006b76:	1064      	asrs	r4, r4, #1
 8006b78:	3508      	adds	r5, #8
 8006b7a:	e73f      	b.n	80069fc <_dtoa_r+0x394>
 8006b7c:	2602      	movs	r6, #2
 8006b7e:	e742      	b.n	8006a06 <_dtoa_r+0x39e>
 8006b80:	9c07      	ldr	r4, [sp, #28]
 8006b82:	9704      	str	r7, [sp, #16]
 8006b84:	e761      	b.n	8006a4a <_dtoa_r+0x3e2>
 8006b86:	4b27      	ldr	r3, [pc, #156]	@ (8006c24 <_dtoa_r+0x5bc>)
 8006b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b92:	4454      	add	r4, sl
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d053      	beq.n	8006c40 <_dtoa_r+0x5d8>
 8006b98:	4928      	ldr	r1, [pc, #160]	@ (8006c3c <_dtoa_r+0x5d4>)
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f7f9 fe76 	bl	800088c <__aeabi_ddiv>
 8006ba0:	4633      	mov	r3, r6
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	f7f9 fb90 	bl	80002c8 <__aeabi_dsub>
 8006ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bac:	4656      	mov	r6, sl
 8006bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb2:	f7f9 fff1 	bl	8000b98 <__aeabi_d2iz>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	f7f9 fcd4 	bl	8000564 <__aeabi_i2d>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc4:	f7f9 fb80 	bl	80002c8 <__aeabi_dsub>
 8006bc8:	3530      	adds	r5, #48	@ 0x30
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bda:	f7f9 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d171      	bne.n	8006cc6 <_dtoa_r+0x65e>
 8006be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006be6:	4911      	ldr	r1, [pc, #68]	@ (8006c2c <_dtoa_r+0x5c4>)
 8006be8:	2000      	movs	r0, #0
 8006bea:	f7f9 fb6d 	bl	80002c8 <__aeabi_dsub>
 8006bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bf2:	f7f9 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f040 8095 	bne.w	8006d26 <_dtoa_r+0x6be>
 8006bfc:	42a6      	cmp	r6, r4
 8006bfe:	f43f af50 	beq.w	8006aa2 <_dtoa_r+0x43a>
 8006c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c06:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <_dtoa_r+0x5c8>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f7f9 fd15 	bl	8000638 <__aeabi_dmul>
 8006c0e:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <_dtoa_r+0x5c8>)
 8006c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c14:	2200      	movs	r2, #0
 8006c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c1a:	f7f9 fd0d 	bl	8000638 <__aeabi_dmul>
 8006c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c22:	e7c4      	b.n	8006bae <_dtoa_r+0x546>
 8006c24:	08008850 	.word	0x08008850
 8006c28:	08008828 	.word	0x08008828
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	40240000 	.word	0x40240000
 8006c34:	401c0000 	.word	0x401c0000
 8006c38:	40140000 	.word	0x40140000
 8006c3c:	3fe00000 	.word	0x3fe00000
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7f9 fcf8 	bl	8000638 <__aeabi_dmul>
 8006c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006c4e:	4656      	mov	r6, sl
 8006c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c54:	f7f9 ffa0 	bl	8000b98 <__aeabi_d2iz>
 8006c58:	4605      	mov	r5, r0
 8006c5a:	f7f9 fc83 	bl	8000564 <__aeabi_i2d>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c66:	f7f9 fb2f 	bl	80002c8 <__aeabi_dsub>
 8006c6a:	3530      	adds	r5, #48	@ 0x30
 8006c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	d124      	bne.n	8006cca <_dtoa_r+0x662>
 8006c80:	4bac      	ldr	r3, [pc, #688]	@ (8006f34 <_dtoa_r+0x8cc>)
 8006c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c86:	f7f9 fb21 	bl	80002cc <__adddf3>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c92:	f7f9 ff61 	bl	8000b58 <__aeabi_dcmpgt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d145      	bne.n	8006d26 <_dtoa_r+0x6be>
 8006c9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c9e:	49a5      	ldr	r1, [pc, #660]	@ (8006f34 <_dtoa_r+0x8cc>)
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f7f9 fb11 	bl	80002c8 <__aeabi_dsub>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cae:	f7f9 ff35 	bl	8000b1c <__aeabi_dcmplt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f43f aef5 	beq.w	8006aa2 <_dtoa_r+0x43a>
 8006cb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006cba:	1e73      	subs	r3, r6, #1
 8006cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006cbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cc2:	2b30      	cmp	r3, #48	@ 0x30
 8006cc4:	d0f8      	beq.n	8006cb8 <_dtoa_r+0x650>
 8006cc6:	9f04      	ldr	r7, [sp, #16]
 8006cc8:	e73e      	b.n	8006b48 <_dtoa_r+0x4e0>
 8006cca:	4b9b      	ldr	r3, [pc, #620]	@ (8006f38 <_dtoa_r+0x8d0>)
 8006ccc:	f7f9 fcb4 	bl	8000638 <__aeabi_dmul>
 8006cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd4:	e7bc      	b.n	8006c50 <_dtoa_r+0x5e8>
 8006cd6:	d10c      	bne.n	8006cf2 <_dtoa_r+0x68a>
 8006cd8:	4b98      	ldr	r3, [pc, #608]	@ (8006f3c <_dtoa_r+0x8d4>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ce0:	f7f9 fcaa 	bl	8000638 <__aeabi_dmul>
 8006ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce8:	f7f9 ff2c 	bl	8000b44 <__aeabi_dcmpge>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f000 8157 	beq.w	8006fa0 <_dtoa_r+0x938>
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	4625      	mov	r5, r4
 8006cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	4656      	mov	r6, sl
 8006cfe:	2700      	movs	r7, #0
 8006d00:	4621      	mov	r1, r4
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 fbb4 	bl	8007470 <_Bfree>
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	d0dc      	beq.n	8006cc6 <_dtoa_r+0x65e>
 8006d0c:	b12f      	cbz	r7, 8006d1a <_dtoa_r+0x6b2>
 8006d0e:	42af      	cmp	r7, r5
 8006d10:	d003      	beq.n	8006d1a <_dtoa_r+0x6b2>
 8006d12:	4639      	mov	r1, r7
 8006d14:	4658      	mov	r0, fp
 8006d16:	f000 fbab 	bl	8007470 <_Bfree>
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fba7 	bl	8007470 <_Bfree>
 8006d22:	e7d0      	b.n	8006cc6 <_dtoa_r+0x65e>
 8006d24:	9704      	str	r7, [sp, #16]
 8006d26:	4633      	mov	r3, r6
 8006d28:	461e      	mov	r6, r3
 8006d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d2e:	2a39      	cmp	r2, #57	@ 0x39
 8006d30:	d107      	bne.n	8006d42 <_dtoa_r+0x6da>
 8006d32:	459a      	cmp	sl, r3
 8006d34:	d1f8      	bne.n	8006d28 <_dtoa_r+0x6c0>
 8006d36:	9a04      	ldr	r2, [sp, #16]
 8006d38:	3201      	adds	r2, #1
 8006d3a:	9204      	str	r2, [sp, #16]
 8006d3c:	2230      	movs	r2, #48	@ 0x30
 8006d3e:	f88a 2000 	strb.w	r2, [sl]
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	3201      	adds	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e7bd      	b.n	8006cc6 <_dtoa_r+0x65e>
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f38 <_dtoa_r+0x8d0>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f7f9 fc73 	bl	8000638 <__aeabi_dmul>
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	f7f9 fed5 	bl	8000b08 <__aeabi_dcmpeq>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f43f aebb 	beq.w	8006ada <_dtoa_r+0x472>
 8006d64:	e6f0      	b.n	8006b48 <_dtoa_r+0x4e0>
 8006d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d68:	2a00      	cmp	r2, #0
 8006d6a:	f000 80db 	beq.w	8006f24 <_dtoa_r+0x8bc>
 8006d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d70:	2a01      	cmp	r2, #1
 8006d72:	f300 80bf 	bgt.w	8006ef4 <_dtoa_r+0x88c>
 8006d76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	f000 80b7 	beq.w	8006eec <_dtoa_r+0x884>
 8006d7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d84:	4646      	mov	r6, r8
 8006d86:	9a08      	ldr	r2, [sp, #32]
 8006d88:	2101      	movs	r1, #1
 8006d8a:	441a      	add	r2, r3
 8006d8c:	4658      	mov	r0, fp
 8006d8e:	4498      	add	r8, r3
 8006d90:	9208      	str	r2, [sp, #32]
 8006d92:	f000 fc21 	bl	80075d8 <__i2b>
 8006d96:	4605      	mov	r5, r0
 8006d98:	b15e      	cbz	r6, 8006db2 <_dtoa_r+0x74a>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd08      	ble.n	8006db2 <_dtoa_r+0x74a>
 8006da0:	42b3      	cmp	r3, r6
 8006da2:	9a08      	ldr	r2, [sp, #32]
 8006da4:	bfa8      	it	ge
 8006da6:	4633      	movge	r3, r6
 8006da8:	eba8 0803 	sub.w	r8, r8, r3
 8006dac:	1af6      	subs	r6, r6, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	9308      	str	r3, [sp, #32]
 8006db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db4:	b1f3      	cbz	r3, 8006df4 <_dtoa_r+0x78c>
 8006db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80b7 	beq.w	8006f2c <_dtoa_r+0x8c4>
 8006dbe:	b18c      	cbz	r4, 8006de4 <_dtoa_r+0x77c>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	f000 fcc7 	bl	8007758 <__pow5mult>
 8006dca:	464a      	mov	r2, r9
 8006dcc:	4601      	mov	r1, r0
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4658      	mov	r0, fp
 8006dd2:	f000 fc17 	bl	8007604 <__multiply>
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	9004      	str	r0, [sp, #16]
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fb48 	bl	8007470 <_Bfree>
 8006de0:	9b04      	ldr	r3, [sp, #16]
 8006de2:	4699      	mov	r9, r3
 8006de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de6:	1b1a      	subs	r2, r3, r4
 8006de8:	d004      	beq.n	8006df4 <_dtoa_r+0x78c>
 8006dea:	4649      	mov	r1, r9
 8006dec:	4658      	mov	r0, fp
 8006dee:	f000 fcb3 	bl	8007758 <__pow5mult>
 8006df2:	4681      	mov	r9, r0
 8006df4:	2101      	movs	r1, #1
 8006df6:	4658      	mov	r0, fp
 8006df8:	f000 fbee 	bl	80075d8 <__i2b>
 8006dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfe:	4604      	mov	r4, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 81cf 	beq.w	80071a4 <_dtoa_r+0xb3c>
 8006e06:	461a      	mov	r2, r3
 8006e08:	4601      	mov	r1, r0
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f000 fca4 	bl	8007758 <__pow5mult>
 8006e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	4604      	mov	r4, r0
 8006e16:	f300 8095 	bgt.w	8006f44 <_dtoa_r+0x8dc>
 8006e1a:	9b02      	ldr	r3, [sp, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 8087 	bne.w	8006f30 <_dtoa_r+0x8c8>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f040 8089 	bne.w	8006f40 <_dtoa_r+0x8d8>
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e34:	0d1b      	lsrs	r3, r3, #20
 8006e36:	051b      	lsls	r3, r3, #20
 8006e38:	b12b      	cbz	r3, 8006e46 <_dtoa_r+0x7de>
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	9308      	str	r3, [sp, #32]
 8006e40:	f108 0801 	add.w	r8, r8, #1
 8006e44:	2301      	movs	r3, #1
 8006e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 81b0 	beq.w	80071b0 <_dtoa_r+0xb48>
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e56:	6918      	ldr	r0, [r3, #16]
 8006e58:	f000 fb72 	bl	8007540 <__hi0bits>
 8006e5c:	f1c0 0020 	rsb	r0, r0, #32
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	4418      	add	r0, r3
 8006e64:	f010 001f 	ands.w	r0, r0, #31
 8006e68:	d077      	beq.n	8006f5a <_dtoa_r+0x8f2>
 8006e6a:	f1c0 0320 	rsb	r3, r0, #32
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	dd6b      	ble.n	8006f4a <_dtoa_r+0x8e2>
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	f1c0 001c 	rsb	r0, r0, #28
 8006e78:	4403      	add	r3, r0
 8006e7a:	4480      	add	r8, r0
 8006e7c:	4406      	add	r6, r0
 8006e7e:	9308      	str	r3, [sp, #32]
 8006e80:	f1b8 0f00 	cmp.w	r8, #0
 8006e84:	dd05      	ble.n	8006e92 <_dtoa_r+0x82a>
 8006e86:	4649      	mov	r1, r9
 8006e88:	4642      	mov	r2, r8
 8006e8a:	4658      	mov	r0, fp
 8006e8c:	f000 fcbe 	bl	800780c <__lshift>
 8006e90:	4681      	mov	r9, r0
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dd05      	ble.n	8006ea4 <_dtoa_r+0x83c>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f000 fcb5 	bl	800780c <__lshift>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d059      	beq.n	8006f5e <_dtoa_r+0x8f6>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4648      	mov	r0, r9
 8006eae:	f000 fd19 	bl	80078e4 <__mcmp>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	da53      	bge.n	8006f5e <_dtoa_r+0x8f6>
 8006eb6:	1e7b      	subs	r3, r7, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	4649      	mov	r1, r9
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	220a      	movs	r2, #10
 8006ec0:	4658      	mov	r0, fp
 8006ec2:	f000 faf7 	bl	80074b4 <__multadd>
 8006ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ec8:	4681      	mov	r9, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8172 	beq.w	80071b4 <_dtoa_r+0xb4c>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f000 faec 	bl	80074b4 <__multadd>
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	dc67      	bgt.n	8006fb4 <_dtoa_r+0x94c>
 8006ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	dc41      	bgt.n	8006f6e <_dtoa_r+0x906>
 8006eea:	e063      	b.n	8006fb4 <_dtoa_r+0x94c>
 8006eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006eee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ef2:	e746      	b.n	8006d82 <_dtoa_r+0x71a>
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	1e5c      	subs	r4, r3, #1
 8006ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	bfbf      	itttt	lt
 8006efe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006f02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f04:	1ae3      	sublt	r3, r4, r3
 8006f06:	bfb4      	ite	lt
 8006f08:	18d2      	addlt	r2, r2, r3
 8006f0a:	1b1c      	subge	r4, r3, r4
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	bfbc      	itt	lt
 8006f10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006f12:	2400      	movlt	r4, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfb5      	itete	lt
 8006f18:	eba8 0603 	sublt.w	r6, r8, r3
 8006f1c:	9b07      	ldrge	r3, [sp, #28]
 8006f1e:	2300      	movlt	r3, #0
 8006f20:	4646      	movge	r6, r8
 8006f22:	e730      	b.n	8006d86 <_dtoa_r+0x71e>
 8006f24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f28:	4646      	mov	r6, r8
 8006f2a:	e735      	b.n	8006d98 <_dtoa_r+0x730>
 8006f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f2e:	e75c      	b.n	8006dea <_dtoa_r+0x782>
 8006f30:	2300      	movs	r3, #0
 8006f32:	e788      	b.n	8006e46 <_dtoa_r+0x7de>
 8006f34:	3fe00000 	.word	0x3fe00000
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	40140000 	.word	0x40140000
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	e780      	b.n	8006e46 <_dtoa_r+0x7de>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	e782      	b.n	8006e50 <_dtoa_r+0x7e8>
 8006f4a:	d099      	beq.n	8006e80 <_dtoa_r+0x818>
 8006f4c:	9a08      	ldr	r2, [sp, #32]
 8006f4e:	331c      	adds	r3, #28
 8006f50:	441a      	add	r2, r3
 8006f52:	4498      	add	r8, r3
 8006f54:	441e      	add	r6, r3
 8006f56:	9208      	str	r2, [sp, #32]
 8006f58:	e792      	b.n	8006e80 <_dtoa_r+0x818>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	e7f6      	b.n	8006f4c <_dtoa_r+0x8e4>
 8006f5e:	9b07      	ldr	r3, [sp, #28]
 8006f60:	9704      	str	r7, [sp, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc20      	bgt.n	8006fa8 <_dtoa_r+0x940>
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	dd1e      	ble.n	8006fac <_dtoa_r+0x944>
 8006f6e:	9b00      	ldr	r3, [sp, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f47f aec0 	bne.w	8006cf6 <_dtoa_r+0x68e>
 8006f76:	4621      	mov	r1, r4
 8006f78:	2205      	movs	r2, #5
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fa9a 	bl	80074b4 <__multadd>
 8006f80:	4601      	mov	r1, r0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4648      	mov	r0, r9
 8006f86:	f000 fcad 	bl	80078e4 <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f77f aeb3 	ble.w	8006cf6 <_dtoa_r+0x68e>
 8006f90:	4656      	mov	r6, sl
 8006f92:	2331      	movs	r3, #49	@ 0x31
 8006f94:	f806 3b01 	strb.w	r3, [r6], #1
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	e6ae      	b.n	8006cfe <_dtoa_r+0x696>
 8006fa0:	9c07      	ldr	r4, [sp, #28]
 8006fa2:	9704      	str	r7, [sp, #16]
 8006fa4:	4625      	mov	r5, r4
 8006fa6:	e7f3      	b.n	8006f90 <_dtoa_r+0x928>
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8104 	beq.w	80071bc <_dtoa_r+0xb54>
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	dd05      	ble.n	8006fc4 <_dtoa_r+0x95c>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4632      	mov	r2, r6
 8006fbc:	4658      	mov	r0, fp
 8006fbe:	f000 fc25 	bl	800780c <__lshift>
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d05a      	beq.n	8007080 <_dtoa_r+0xa18>
 8006fca:	6869      	ldr	r1, [r5, #4]
 8006fcc:	4658      	mov	r0, fp
 8006fce:	f000 fa0f 	bl	80073f0 <_Balloc>
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	b928      	cbnz	r0, 8006fe2 <_dtoa_r+0x97a>
 8006fd6:	4b84      	ldr	r3, [pc, #528]	@ (80071e8 <_dtoa_r+0xb80>)
 8006fd8:	4602      	mov	r2, r0
 8006fda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fde:	f7ff bb5a 	b.w	8006696 <_dtoa_r+0x2e>
 8006fe2:	692a      	ldr	r2, [r5, #16]
 8006fe4:	3202      	adds	r2, #2
 8006fe6:	0092      	lsls	r2, r2, #2
 8006fe8:	f105 010c 	add.w	r1, r5, #12
 8006fec:	300c      	adds	r0, #12
 8006fee:	f000 ffaf 	bl	8007f50 <memcpy>
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 fc08 	bl	800780c <__lshift>
 8006ffc:	f10a 0301 	add.w	r3, sl, #1
 8007000:	9307      	str	r3, [sp, #28]
 8007002:	9b00      	ldr	r3, [sp, #0]
 8007004:	4453      	add	r3, sl
 8007006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	462f      	mov	r7, r5
 8007010:	930a      	str	r3, [sp, #40]	@ 0x28
 8007012:	4605      	mov	r5, r0
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	4621      	mov	r1, r4
 8007018:	3b01      	subs	r3, #1
 800701a:	4648      	mov	r0, r9
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	f7ff fa98 	bl	8006552 <quorem>
 8007022:	4639      	mov	r1, r7
 8007024:	9002      	str	r0, [sp, #8]
 8007026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800702a:	4648      	mov	r0, r9
 800702c:	f000 fc5a 	bl	80078e4 <__mcmp>
 8007030:	462a      	mov	r2, r5
 8007032:	9008      	str	r0, [sp, #32]
 8007034:	4621      	mov	r1, r4
 8007036:	4658      	mov	r0, fp
 8007038:	f000 fc70 	bl	800791c <__mdiff>
 800703c:	68c2      	ldr	r2, [r0, #12]
 800703e:	4606      	mov	r6, r0
 8007040:	bb02      	cbnz	r2, 8007084 <_dtoa_r+0xa1c>
 8007042:	4601      	mov	r1, r0
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fc4d 	bl	80078e4 <__mcmp>
 800704a:	4602      	mov	r2, r0
 800704c:	4631      	mov	r1, r6
 800704e:	4658      	mov	r0, fp
 8007050:	920e      	str	r2, [sp, #56]	@ 0x38
 8007052:	f000 fa0d 	bl	8007470 <_Bfree>
 8007056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800705a:	9e07      	ldr	r6, [sp, #28]
 800705c:	ea43 0102 	orr.w	r1, r3, r2
 8007060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007062:	4319      	orrs	r1, r3
 8007064:	d110      	bne.n	8007088 <_dtoa_r+0xa20>
 8007066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800706a:	d029      	beq.n	80070c0 <_dtoa_r+0xa58>
 800706c:	9b08      	ldr	r3, [sp, #32]
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd02      	ble.n	8007078 <_dtoa_r+0xa10>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007078:	9b00      	ldr	r3, [sp, #0]
 800707a:	f883 8000 	strb.w	r8, [r3]
 800707e:	e63f      	b.n	8006d00 <_dtoa_r+0x698>
 8007080:	4628      	mov	r0, r5
 8007082:	e7bb      	b.n	8006ffc <_dtoa_r+0x994>
 8007084:	2201      	movs	r2, #1
 8007086:	e7e1      	b.n	800704c <_dtoa_r+0x9e4>
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	db04      	blt.n	8007098 <_dtoa_r+0xa30>
 800708e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007090:	430b      	orrs	r3, r1
 8007092:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007094:	430b      	orrs	r3, r1
 8007096:	d120      	bne.n	80070da <_dtoa_r+0xa72>
 8007098:	2a00      	cmp	r2, #0
 800709a:	dded      	ble.n	8007078 <_dtoa_r+0xa10>
 800709c:	4649      	mov	r1, r9
 800709e:	2201      	movs	r2, #1
 80070a0:	4658      	mov	r0, fp
 80070a2:	f000 fbb3 	bl	800780c <__lshift>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4681      	mov	r9, r0
 80070aa:	f000 fc1b 	bl	80078e4 <__mcmp>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	dc03      	bgt.n	80070ba <_dtoa_r+0xa52>
 80070b2:	d1e1      	bne.n	8007078 <_dtoa_r+0xa10>
 80070b4:	f018 0f01 	tst.w	r8, #1
 80070b8:	d0de      	beq.n	8007078 <_dtoa_r+0xa10>
 80070ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070be:	d1d8      	bne.n	8007072 <_dtoa_r+0xa0a>
 80070c0:	9a00      	ldr	r2, [sp, #0]
 80070c2:	2339      	movs	r3, #57	@ 0x39
 80070c4:	7013      	strb	r3, [r2, #0]
 80070c6:	4633      	mov	r3, r6
 80070c8:	461e      	mov	r6, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070d0:	2a39      	cmp	r2, #57	@ 0x39
 80070d2:	d052      	beq.n	800717a <_dtoa_r+0xb12>
 80070d4:	3201      	adds	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e612      	b.n	8006d00 <_dtoa_r+0x698>
 80070da:	2a00      	cmp	r2, #0
 80070dc:	dd07      	ble.n	80070ee <_dtoa_r+0xa86>
 80070de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070e2:	d0ed      	beq.n	80070c0 <_dtoa_r+0xa58>
 80070e4:	9a00      	ldr	r2, [sp, #0]
 80070e6:	f108 0301 	add.w	r3, r8, #1
 80070ea:	7013      	strb	r3, [r2, #0]
 80070ec:	e608      	b.n	8006d00 <_dtoa_r+0x698>
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80070f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d028      	beq.n	800714e <_dtoa_r+0xae6>
 80070fc:	4649      	mov	r1, r9
 80070fe:	2300      	movs	r3, #0
 8007100:	220a      	movs	r2, #10
 8007102:	4658      	mov	r0, fp
 8007104:	f000 f9d6 	bl	80074b4 <__multadd>
 8007108:	42af      	cmp	r7, r5
 800710a:	4681      	mov	r9, r0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	f04f 020a 	mov.w	r2, #10
 8007114:	4639      	mov	r1, r7
 8007116:	4658      	mov	r0, fp
 8007118:	d107      	bne.n	800712a <_dtoa_r+0xac2>
 800711a:	f000 f9cb 	bl	80074b4 <__multadd>
 800711e:	4607      	mov	r7, r0
 8007120:	4605      	mov	r5, r0
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	e774      	b.n	8007014 <_dtoa_r+0x9ac>
 800712a:	f000 f9c3 	bl	80074b4 <__multadd>
 800712e:	4629      	mov	r1, r5
 8007130:	4607      	mov	r7, r0
 8007132:	2300      	movs	r3, #0
 8007134:	220a      	movs	r2, #10
 8007136:	4658      	mov	r0, fp
 8007138:	f000 f9bc 	bl	80074b4 <__multadd>
 800713c:	4605      	mov	r5, r0
 800713e:	e7f0      	b.n	8007122 <_dtoa_r+0xaba>
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	bfcc      	ite	gt
 8007146:	461e      	movgt	r6, r3
 8007148:	2601      	movle	r6, #1
 800714a:	4456      	add	r6, sl
 800714c:	2700      	movs	r7, #0
 800714e:	4649      	mov	r1, r9
 8007150:	2201      	movs	r2, #1
 8007152:	4658      	mov	r0, fp
 8007154:	f000 fb5a 	bl	800780c <__lshift>
 8007158:	4621      	mov	r1, r4
 800715a:	4681      	mov	r9, r0
 800715c:	f000 fbc2 	bl	80078e4 <__mcmp>
 8007160:	2800      	cmp	r0, #0
 8007162:	dcb0      	bgt.n	80070c6 <_dtoa_r+0xa5e>
 8007164:	d102      	bne.n	800716c <_dtoa_r+0xb04>
 8007166:	f018 0f01 	tst.w	r8, #1
 800716a:	d1ac      	bne.n	80070c6 <_dtoa_r+0xa5e>
 800716c:	4633      	mov	r3, r6
 800716e:	461e      	mov	r6, r3
 8007170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007174:	2a30      	cmp	r2, #48	@ 0x30
 8007176:	d0fa      	beq.n	800716e <_dtoa_r+0xb06>
 8007178:	e5c2      	b.n	8006d00 <_dtoa_r+0x698>
 800717a:	459a      	cmp	sl, r3
 800717c:	d1a4      	bne.n	80070c8 <_dtoa_r+0xa60>
 800717e:	9b04      	ldr	r3, [sp, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	2331      	movs	r3, #49	@ 0x31
 8007186:	f88a 3000 	strb.w	r3, [sl]
 800718a:	e5b9      	b.n	8006d00 <_dtoa_r+0x698>
 800718c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800718e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80071ec <_dtoa_r+0xb84>
 8007192:	b11b      	cbz	r3, 800719c <_dtoa_r+0xb34>
 8007194:	f10a 0308 	add.w	r3, sl, #8
 8007198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	4650      	mov	r0, sl
 800719e:	b019      	add	sp, #100	@ 0x64
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f77f ae37 	ble.w	8006e1a <_dtoa_r+0x7b2>
 80071ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b0:	2001      	movs	r0, #1
 80071b2:	e655      	b.n	8006e60 <_dtoa_r+0x7f8>
 80071b4:	9b00      	ldr	r3, [sp, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f77f aed6 	ble.w	8006f68 <_dtoa_r+0x900>
 80071bc:	4656      	mov	r6, sl
 80071be:	4621      	mov	r1, r4
 80071c0:	4648      	mov	r0, r9
 80071c2:	f7ff f9c6 	bl	8006552 <quorem>
 80071c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071ca:	f806 8b01 	strb.w	r8, [r6], #1
 80071ce:	9b00      	ldr	r3, [sp, #0]
 80071d0:	eba6 020a 	sub.w	r2, r6, sl
 80071d4:	4293      	cmp	r3, r2
 80071d6:	ddb3      	ble.n	8007140 <_dtoa_r+0xad8>
 80071d8:	4649      	mov	r1, r9
 80071da:	2300      	movs	r3, #0
 80071dc:	220a      	movs	r2, #10
 80071de:	4658      	mov	r0, fp
 80071e0:	f000 f968 	bl	80074b4 <__multadd>
 80071e4:	4681      	mov	r9, r0
 80071e6:	e7ea      	b.n	80071be <_dtoa_r+0xb56>
 80071e8:	080087ac 	.word	0x080087ac
 80071ec:	08008730 	.word	0x08008730

080071f0 <_free_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4605      	mov	r5, r0
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d041      	beq.n	800727c <_free_r+0x8c>
 80071f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fc:	1f0c      	subs	r4, r1, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfb8      	it	lt
 8007202:	18e4      	addlt	r4, r4, r3
 8007204:	f000 f8e8 	bl	80073d8 <__malloc_lock>
 8007208:	4a1d      	ldr	r2, [pc, #116]	@ (8007280 <_free_r+0x90>)
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	b933      	cbnz	r3, 800721c <_free_r+0x2c>
 800720e:	6063      	str	r3, [r4, #4]
 8007210:	6014      	str	r4, [r2, #0]
 8007212:	4628      	mov	r0, r5
 8007214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007218:	f000 b8e4 	b.w	80073e4 <__malloc_unlock>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d908      	bls.n	8007232 <_free_r+0x42>
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	1821      	adds	r1, r4, r0
 8007224:	428b      	cmp	r3, r1
 8007226:	bf01      	itttt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	1809      	addeq	r1, r1, r0
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	e7ed      	b.n	800720e <_free_r+0x1e>
 8007232:	461a      	mov	r2, r3
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b10b      	cbz	r3, 800723c <_free_r+0x4c>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d9fa      	bls.n	8007232 <_free_r+0x42>
 800723c:	6811      	ldr	r1, [r2, #0]
 800723e:	1850      	adds	r0, r2, r1
 8007240:	42a0      	cmp	r0, r4
 8007242:	d10b      	bne.n	800725c <_free_r+0x6c>
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	4401      	add	r1, r0
 8007248:	1850      	adds	r0, r2, r1
 800724a:	4283      	cmp	r3, r0
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	d1e0      	bne.n	8007212 <_free_r+0x22>
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	6053      	str	r3, [r2, #4]
 8007256:	4408      	add	r0, r1
 8007258:	6010      	str	r0, [r2, #0]
 800725a:	e7da      	b.n	8007212 <_free_r+0x22>
 800725c:	d902      	bls.n	8007264 <_free_r+0x74>
 800725e:	230c      	movs	r3, #12
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	e7d6      	b.n	8007212 <_free_r+0x22>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	1821      	adds	r1, r4, r0
 8007268:	428b      	cmp	r3, r1
 800726a:	bf04      	itt	eq
 800726c:	6819      	ldreq	r1, [r3, #0]
 800726e:	685b      	ldreq	r3, [r3, #4]
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	bf04      	itt	eq
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	6054      	str	r4, [r2, #4]
 800727a:	e7ca      	b.n	8007212 <_free_r+0x22>
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	bf00      	nop
 8007280:	2000055c 	.word	0x2000055c

08007284 <malloc>:
 8007284:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <malloc+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f000 b825 	b.w	80072d8 <_malloc_r>
 800728e:	bf00      	nop
 8007290:	20000024 	.word	0x20000024

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0f      	ldr	r6, [pc, #60]	@ (80072d4 <sbrk_aligned+0x40>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f000 fe46 	bl	8007f30 <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 fe41 	bl	8007f30 <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d103      	bne.n	80072ba <sbrk_aligned+0x26>
 80072b2:	f04f 34ff 	mov.w	r4, #4294967295
 80072b6:	4620      	mov	r0, r4
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	1cc4      	adds	r4, r0, #3
 80072bc:	f024 0403 	bic.w	r4, r4, #3
 80072c0:	42a0      	cmp	r0, r4
 80072c2:	d0f8      	beq.n	80072b6 <sbrk_aligned+0x22>
 80072c4:	1a21      	subs	r1, r4, r0
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fe32 	bl	8007f30 <_sbrk_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d1f2      	bne.n	80072b6 <sbrk_aligned+0x22>
 80072d0:	e7ef      	b.n	80072b2 <sbrk_aligned+0x1e>
 80072d2:	bf00      	nop
 80072d4:	20000558 	.word	0x20000558

080072d8 <_malloc_r>:
 80072d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072dc:	1ccd      	adds	r5, r1, #3
 80072de:	f025 0503 	bic.w	r5, r5, #3
 80072e2:	3508      	adds	r5, #8
 80072e4:	2d0c      	cmp	r5, #12
 80072e6:	bf38      	it	cc
 80072e8:	250c      	movcc	r5, #12
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	4606      	mov	r6, r0
 80072ee:	db01      	blt.n	80072f4 <_malloc_r+0x1c>
 80072f0:	42a9      	cmp	r1, r5
 80072f2:	d904      	bls.n	80072fe <_malloc_r+0x26>
 80072f4:	230c      	movs	r3, #12
 80072f6:	6033      	str	r3, [r6, #0]
 80072f8:	2000      	movs	r0, #0
 80072fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073d4 <_malloc_r+0xfc>
 8007302:	f000 f869 	bl	80073d8 <__malloc_lock>
 8007306:	f8d8 3000 	ldr.w	r3, [r8]
 800730a:	461c      	mov	r4, r3
 800730c:	bb44      	cbnz	r4, 8007360 <_malloc_r+0x88>
 800730e:	4629      	mov	r1, r5
 8007310:	4630      	mov	r0, r6
 8007312:	f7ff ffbf 	bl	8007294 <sbrk_aligned>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	4604      	mov	r4, r0
 800731a:	d158      	bne.n	80073ce <_malloc_r+0xf6>
 800731c:	f8d8 4000 	ldr.w	r4, [r8]
 8007320:	4627      	mov	r7, r4
 8007322:	2f00      	cmp	r7, #0
 8007324:	d143      	bne.n	80073ae <_malloc_r+0xd6>
 8007326:	2c00      	cmp	r4, #0
 8007328:	d04b      	beq.n	80073c2 <_malloc_r+0xea>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	4639      	mov	r1, r7
 800732e:	4630      	mov	r0, r6
 8007330:	eb04 0903 	add.w	r9, r4, r3
 8007334:	f000 fdfc 	bl	8007f30 <_sbrk_r>
 8007338:	4581      	cmp	r9, r0
 800733a:	d142      	bne.n	80073c2 <_malloc_r+0xea>
 800733c:	6821      	ldr	r1, [r4, #0]
 800733e:	1a6d      	subs	r5, r5, r1
 8007340:	4629      	mov	r1, r5
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ffa6 	bl	8007294 <sbrk_aligned>
 8007348:	3001      	adds	r0, #1
 800734a:	d03a      	beq.n	80073c2 <_malloc_r+0xea>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	442b      	add	r3, r5
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	f8d8 3000 	ldr.w	r3, [r8]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	bb62      	cbnz	r2, 80073b4 <_malloc_r+0xdc>
 800735a:	f8c8 7000 	str.w	r7, [r8]
 800735e:	e00f      	b.n	8007380 <_malloc_r+0xa8>
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	1b52      	subs	r2, r2, r5
 8007364:	d420      	bmi.n	80073a8 <_malloc_r+0xd0>
 8007366:	2a0b      	cmp	r2, #11
 8007368:	d917      	bls.n	800739a <_malloc_r+0xc2>
 800736a:	1961      	adds	r1, r4, r5
 800736c:	42a3      	cmp	r3, r4
 800736e:	6025      	str	r5, [r4, #0]
 8007370:	bf18      	it	ne
 8007372:	6059      	strne	r1, [r3, #4]
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	bf08      	it	eq
 8007378:	f8c8 1000 	streq.w	r1, [r8]
 800737c:	5162      	str	r2, [r4, r5]
 800737e:	604b      	str	r3, [r1, #4]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f82f 	bl	80073e4 <__malloc_unlock>
 8007386:	f104 000b 	add.w	r0, r4, #11
 800738a:	1d23      	adds	r3, r4, #4
 800738c:	f020 0007 	bic.w	r0, r0, #7
 8007390:	1ac2      	subs	r2, r0, r3
 8007392:	bf1c      	itt	ne
 8007394:	1a1b      	subne	r3, r3, r0
 8007396:	50a3      	strne	r3, [r4, r2]
 8007398:	e7af      	b.n	80072fa <_malloc_r+0x22>
 800739a:	6862      	ldr	r2, [r4, #4]
 800739c:	42a3      	cmp	r3, r4
 800739e:	bf0c      	ite	eq
 80073a0:	f8c8 2000 	streq.w	r2, [r8]
 80073a4:	605a      	strne	r2, [r3, #4]
 80073a6:	e7eb      	b.n	8007380 <_malloc_r+0xa8>
 80073a8:	4623      	mov	r3, r4
 80073aa:	6864      	ldr	r4, [r4, #4]
 80073ac:	e7ae      	b.n	800730c <_malloc_r+0x34>
 80073ae:	463c      	mov	r4, r7
 80073b0:	687f      	ldr	r7, [r7, #4]
 80073b2:	e7b6      	b.n	8007322 <_malloc_r+0x4a>
 80073b4:	461a      	mov	r2, r3
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d1fb      	bne.n	80073b4 <_malloc_r+0xdc>
 80073bc:	2300      	movs	r3, #0
 80073be:	6053      	str	r3, [r2, #4]
 80073c0:	e7de      	b.n	8007380 <_malloc_r+0xa8>
 80073c2:	230c      	movs	r3, #12
 80073c4:	6033      	str	r3, [r6, #0]
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 f80c 	bl	80073e4 <__malloc_unlock>
 80073cc:	e794      	b.n	80072f8 <_malloc_r+0x20>
 80073ce:	6005      	str	r5, [r0, #0]
 80073d0:	e7d6      	b.n	8007380 <_malloc_r+0xa8>
 80073d2:	bf00      	nop
 80073d4:	2000055c 	.word	0x2000055c

080073d8 <__malloc_lock>:
 80073d8:	4801      	ldr	r0, [pc, #4]	@ (80073e0 <__malloc_lock+0x8>)
 80073da:	f7ff b8b8 	b.w	800654e <__retarget_lock_acquire_recursive>
 80073de:	bf00      	nop
 80073e0:	20000554 	.word	0x20000554

080073e4 <__malloc_unlock>:
 80073e4:	4801      	ldr	r0, [pc, #4]	@ (80073ec <__malloc_unlock+0x8>)
 80073e6:	f7ff b8b3 	b.w	8006550 <__retarget_lock_release_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000554 	.word	0x20000554

080073f0 <_Balloc>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	69c6      	ldr	r6, [r0, #28]
 80073f4:	4604      	mov	r4, r0
 80073f6:	460d      	mov	r5, r1
 80073f8:	b976      	cbnz	r6, 8007418 <_Balloc+0x28>
 80073fa:	2010      	movs	r0, #16
 80073fc:	f7ff ff42 	bl	8007284 <malloc>
 8007400:	4602      	mov	r2, r0
 8007402:	61e0      	str	r0, [r4, #28]
 8007404:	b920      	cbnz	r0, 8007410 <_Balloc+0x20>
 8007406:	4b18      	ldr	r3, [pc, #96]	@ (8007468 <_Balloc+0x78>)
 8007408:	4818      	ldr	r0, [pc, #96]	@ (800746c <_Balloc+0x7c>)
 800740a:	216b      	movs	r1, #107	@ 0x6b
 800740c:	f000 fdae 	bl	8007f6c <__assert_func>
 8007410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007414:	6006      	str	r6, [r0, #0]
 8007416:	60c6      	str	r6, [r0, #12]
 8007418:	69e6      	ldr	r6, [r4, #28]
 800741a:	68f3      	ldr	r3, [r6, #12]
 800741c:	b183      	cbz	r3, 8007440 <_Balloc+0x50>
 800741e:	69e3      	ldr	r3, [r4, #28]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007426:	b9b8      	cbnz	r0, 8007458 <_Balloc+0x68>
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f605 	lsl.w	r6, r1, r5
 800742e:	1d72      	adds	r2, r6, #5
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fdb8 	bl	8007fa8 <_calloc_r>
 8007438:	b160      	cbz	r0, 8007454 <_Balloc+0x64>
 800743a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800743e:	e00e      	b.n	800745e <_Balloc+0x6e>
 8007440:	2221      	movs	r2, #33	@ 0x21
 8007442:	2104      	movs	r1, #4
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fdaf 	bl	8007fa8 <_calloc_r>
 800744a:	69e3      	ldr	r3, [r4, #28]
 800744c:	60f0      	str	r0, [r6, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e4      	bne.n	800741e <_Balloc+0x2e>
 8007454:	2000      	movs	r0, #0
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	6802      	ldr	r2, [r0, #0]
 800745a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800745e:	2300      	movs	r3, #0
 8007460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007464:	e7f7      	b.n	8007456 <_Balloc+0x66>
 8007466:	bf00      	nop
 8007468:	0800873d 	.word	0x0800873d
 800746c:	080087bd 	.word	0x080087bd

08007470 <_Bfree>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	69c6      	ldr	r6, [r0, #28]
 8007474:	4605      	mov	r5, r0
 8007476:	460c      	mov	r4, r1
 8007478:	b976      	cbnz	r6, 8007498 <_Bfree+0x28>
 800747a:	2010      	movs	r0, #16
 800747c:	f7ff ff02 	bl	8007284 <malloc>
 8007480:	4602      	mov	r2, r0
 8007482:	61e8      	str	r0, [r5, #28]
 8007484:	b920      	cbnz	r0, 8007490 <_Bfree+0x20>
 8007486:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <_Bfree+0x3c>)
 8007488:	4809      	ldr	r0, [pc, #36]	@ (80074b0 <_Bfree+0x40>)
 800748a:	218f      	movs	r1, #143	@ 0x8f
 800748c:	f000 fd6e 	bl	8007f6c <__assert_func>
 8007490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007494:	6006      	str	r6, [r0, #0]
 8007496:	60c6      	str	r6, [r0, #12]
 8007498:	b13c      	cbz	r4, 80074aa <_Bfree+0x3a>
 800749a:	69eb      	ldr	r3, [r5, #28]
 800749c:	6862      	ldr	r2, [r4, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074a4:	6021      	str	r1, [r4, #0]
 80074a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	0800873d 	.word	0x0800873d
 80074b0:	080087bd 	.word	0x080087bd

080074b4 <__multadd>:
 80074b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b8:	690d      	ldr	r5, [r1, #16]
 80074ba:	4607      	mov	r7, r0
 80074bc:	460c      	mov	r4, r1
 80074be:	461e      	mov	r6, r3
 80074c0:	f101 0c14 	add.w	ip, r1, #20
 80074c4:	2000      	movs	r0, #0
 80074c6:	f8dc 3000 	ldr.w	r3, [ip]
 80074ca:	b299      	uxth	r1, r3
 80074cc:	fb02 6101 	mla	r1, r2, r1, r6
 80074d0:	0c1e      	lsrs	r6, r3, #16
 80074d2:	0c0b      	lsrs	r3, r1, #16
 80074d4:	fb02 3306 	mla	r3, r2, r6, r3
 80074d8:	b289      	uxth	r1, r1
 80074da:	3001      	adds	r0, #1
 80074dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074e0:	4285      	cmp	r5, r0
 80074e2:	f84c 1b04 	str.w	r1, [ip], #4
 80074e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074ea:	dcec      	bgt.n	80074c6 <__multadd+0x12>
 80074ec:	b30e      	cbz	r6, 8007532 <__multadd+0x7e>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dc19      	bgt.n	8007528 <__multadd+0x74>
 80074f4:	6861      	ldr	r1, [r4, #4]
 80074f6:	4638      	mov	r0, r7
 80074f8:	3101      	adds	r1, #1
 80074fa:	f7ff ff79 	bl	80073f0 <_Balloc>
 80074fe:	4680      	mov	r8, r0
 8007500:	b928      	cbnz	r0, 800750e <__multadd+0x5a>
 8007502:	4602      	mov	r2, r0
 8007504:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <__multadd+0x84>)
 8007506:	480d      	ldr	r0, [pc, #52]	@ (800753c <__multadd+0x88>)
 8007508:	21ba      	movs	r1, #186	@ 0xba
 800750a:	f000 fd2f 	bl	8007f6c <__assert_func>
 800750e:	6922      	ldr	r2, [r4, #16]
 8007510:	3202      	adds	r2, #2
 8007512:	f104 010c 	add.w	r1, r4, #12
 8007516:	0092      	lsls	r2, r2, #2
 8007518:	300c      	adds	r0, #12
 800751a:	f000 fd19 	bl	8007f50 <memcpy>
 800751e:	4621      	mov	r1, r4
 8007520:	4638      	mov	r0, r7
 8007522:	f7ff ffa5 	bl	8007470 <_Bfree>
 8007526:	4644      	mov	r4, r8
 8007528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800752c:	3501      	adds	r5, #1
 800752e:	615e      	str	r6, [r3, #20]
 8007530:	6125      	str	r5, [r4, #16]
 8007532:	4620      	mov	r0, r4
 8007534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007538:	080087ac 	.word	0x080087ac
 800753c:	080087bd 	.word	0x080087bd

08007540 <__hi0bits>:
 8007540:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007544:	4603      	mov	r3, r0
 8007546:	bf36      	itet	cc
 8007548:	0403      	lslcc	r3, r0, #16
 800754a:	2000      	movcs	r0, #0
 800754c:	2010      	movcc	r0, #16
 800754e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007552:	bf3c      	itt	cc
 8007554:	021b      	lslcc	r3, r3, #8
 8007556:	3008      	addcc	r0, #8
 8007558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800755c:	bf3c      	itt	cc
 800755e:	011b      	lslcc	r3, r3, #4
 8007560:	3004      	addcc	r0, #4
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	bf3c      	itt	cc
 8007568:	009b      	lslcc	r3, r3, #2
 800756a:	3002      	addcc	r0, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	db05      	blt.n	800757c <__hi0bits+0x3c>
 8007570:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007574:	f100 0001 	add.w	r0, r0, #1
 8007578:	bf08      	it	eq
 800757a:	2020      	moveq	r0, #32
 800757c:	4770      	bx	lr

0800757e <__lo0bits>:
 800757e:	6803      	ldr	r3, [r0, #0]
 8007580:	4602      	mov	r2, r0
 8007582:	f013 0007 	ands.w	r0, r3, #7
 8007586:	d00b      	beq.n	80075a0 <__lo0bits+0x22>
 8007588:	07d9      	lsls	r1, r3, #31
 800758a:	d421      	bmi.n	80075d0 <__lo0bits+0x52>
 800758c:	0798      	lsls	r0, r3, #30
 800758e:	bf49      	itett	mi
 8007590:	085b      	lsrmi	r3, r3, #1
 8007592:	089b      	lsrpl	r3, r3, #2
 8007594:	2001      	movmi	r0, #1
 8007596:	6013      	strmi	r3, [r2, #0]
 8007598:	bf5c      	itt	pl
 800759a:	6013      	strpl	r3, [r2, #0]
 800759c:	2002      	movpl	r0, #2
 800759e:	4770      	bx	lr
 80075a0:	b299      	uxth	r1, r3
 80075a2:	b909      	cbnz	r1, 80075a8 <__lo0bits+0x2a>
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	2010      	movs	r0, #16
 80075a8:	b2d9      	uxtb	r1, r3
 80075aa:	b909      	cbnz	r1, 80075b0 <__lo0bits+0x32>
 80075ac:	3008      	adds	r0, #8
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	bf04      	itt	eq
 80075b4:	091b      	lsreq	r3, r3, #4
 80075b6:	3004      	addeq	r0, #4
 80075b8:	0799      	lsls	r1, r3, #30
 80075ba:	bf04      	itt	eq
 80075bc:	089b      	lsreq	r3, r3, #2
 80075be:	3002      	addeq	r0, #2
 80075c0:	07d9      	lsls	r1, r3, #31
 80075c2:	d403      	bmi.n	80075cc <__lo0bits+0x4e>
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	f100 0001 	add.w	r0, r0, #1
 80075ca:	d003      	beq.n	80075d4 <__lo0bits+0x56>
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4770      	bx	lr
 80075d0:	2000      	movs	r0, #0
 80075d2:	4770      	bx	lr
 80075d4:	2020      	movs	r0, #32
 80075d6:	4770      	bx	lr

080075d8 <__i2b>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	460c      	mov	r4, r1
 80075dc:	2101      	movs	r1, #1
 80075de:	f7ff ff07 	bl	80073f0 <_Balloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <__i2b+0x1a>
 80075e6:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <__i2b+0x24>)
 80075e8:	4805      	ldr	r0, [pc, #20]	@ (8007600 <__i2b+0x28>)
 80075ea:	f240 1145 	movw	r1, #325	@ 0x145
 80075ee:	f000 fcbd 	bl	8007f6c <__assert_func>
 80075f2:	2301      	movs	r3, #1
 80075f4:	6144      	str	r4, [r0, #20]
 80075f6:	6103      	str	r3, [r0, #16]
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	080087ac 	.word	0x080087ac
 8007600:	080087bd 	.word	0x080087bd

08007604 <__multiply>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4614      	mov	r4, r2
 800760a:	690a      	ldr	r2, [r1, #16]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	429a      	cmp	r2, r3
 8007610:	bfa8      	it	ge
 8007612:	4623      	movge	r3, r4
 8007614:	460f      	mov	r7, r1
 8007616:	bfa4      	itt	ge
 8007618:	460c      	movge	r4, r1
 800761a:	461f      	movge	r7, r3
 800761c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007620:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007624:	68a3      	ldr	r3, [r4, #8]
 8007626:	6861      	ldr	r1, [r4, #4]
 8007628:	eb0a 0609 	add.w	r6, sl, r9
 800762c:	42b3      	cmp	r3, r6
 800762e:	b085      	sub	sp, #20
 8007630:	bfb8      	it	lt
 8007632:	3101      	addlt	r1, #1
 8007634:	f7ff fedc 	bl	80073f0 <_Balloc>
 8007638:	b930      	cbnz	r0, 8007648 <__multiply+0x44>
 800763a:	4602      	mov	r2, r0
 800763c:	4b44      	ldr	r3, [pc, #272]	@ (8007750 <__multiply+0x14c>)
 800763e:	4845      	ldr	r0, [pc, #276]	@ (8007754 <__multiply+0x150>)
 8007640:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007644:	f000 fc92 	bl	8007f6c <__assert_func>
 8007648:	f100 0514 	add.w	r5, r0, #20
 800764c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007650:	462b      	mov	r3, r5
 8007652:	2200      	movs	r2, #0
 8007654:	4543      	cmp	r3, r8
 8007656:	d321      	bcc.n	800769c <__multiply+0x98>
 8007658:	f107 0114 	add.w	r1, r7, #20
 800765c:	f104 0214 	add.w	r2, r4, #20
 8007660:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007664:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007668:	9302      	str	r3, [sp, #8]
 800766a:	1b13      	subs	r3, r2, r4
 800766c:	3b15      	subs	r3, #21
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	3304      	adds	r3, #4
 8007674:	f104 0715 	add.w	r7, r4, #21
 8007678:	42ba      	cmp	r2, r7
 800767a:	bf38      	it	cc
 800767c:	2304      	movcc	r3, #4
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	9103      	str	r1, [sp, #12]
 8007684:	428b      	cmp	r3, r1
 8007686:	d80c      	bhi.n	80076a2 <__multiply+0x9e>
 8007688:	2e00      	cmp	r6, #0
 800768a:	dd03      	ble.n	8007694 <__multiply+0x90>
 800768c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05b      	beq.n	800774c <__multiply+0x148>
 8007694:	6106      	str	r6, [r0, #16]
 8007696:	b005      	add	sp, #20
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	f843 2b04 	str.w	r2, [r3], #4
 80076a0:	e7d8      	b.n	8007654 <__multiply+0x50>
 80076a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80076a6:	f1ba 0f00 	cmp.w	sl, #0
 80076aa:	d024      	beq.n	80076f6 <__multiply+0xf2>
 80076ac:	f104 0e14 	add.w	lr, r4, #20
 80076b0:	46a9      	mov	r9, r5
 80076b2:	f04f 0c00 	mov.w	ip, #0
 80076b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076ba:	f8d9 3000 	ldr.w	r3, [r9]
 80076be:	fa1f fb87 	uxth.w	fp, r7
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80076c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80076cc:	f8d9 7000 	ldr.w	r7, [r9]
 80076d0:	4463      	add	r3, ip
 80076d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80076da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076e4:	4572      	cmp	r2, lr
 80076e6:	f849 3b04 	str.w	r3, [r9], #4
 80076ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076ee:	d8e2      	bhi.n	80076b6 <__multiply+0xb2>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	f845 c003 	str.w	ip, [r5, r3]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076fc:	3104      	adds	r1, #4
 80076fe:	f1b9 0f00 	cmp.w	r9, #0
 8007702:	d021      	beq.n	8007748 <__multiply+0x144>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	f104 0c14 	add.w	ip, r4, #20
 800770a:	46ae      	mov	lr, r5
 800770c:	f04f 0a00 	mov.w	sl, #0
 8007710:	f8bc b000 	ldrh.w	fp, [ip]
 8007714:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007718:	fb09 770b 	mla	r7, r9, fp, r7
 800771c:	4457      	add	r7, sl
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007724:	f84e 3b04 	str.w	r3, [lr], #4
 8007728:	f85c 3b04 	ldr.w	r3, [ip], #4
 800772c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007730:	f8be 3000 	ldrh.w	r3, [lr]
 8007734:	fb09 330a 	mla	r3, r9, sl, r3
 8007738:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800773c:	4562      	cmp	r2, ip
 800773e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007742:	d8e5      	bhi.n	8007710 <__multiply+0x10c>
 8007744:	9f01      	ldr	r7, [sp, #4]
 8007746:	51eb      	str	r3, [r5, r7]
 8007748:	3504      	adds	r5, #4
 800774a:	e799      	b.n	8007680 <__multiply+0x7c>
 800774c:	3e01      	subs	r6, #1
 800774e:	e79b      	b.n	8007688 <__multiply+0x84>
 8007750:	080087ac 	.word	0x080087ac
 8007754:	080087bd 	.word	0x080087bd

08007758 <__pow5mult>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	4615      	mov	r5, r2
 800775e:	f012 0203 	ands.w	r2, r2, #3
 8007762:	4607      	mov	r7, r0
 8007764:	460e      	mov	r6, r1
 8007766:	d007      	beq.n	8007778 <__pow5mult+0x20>
 8007768:	4c25      	ldr	r4, [pc, #148]	@ (8007800 <__pow5mult+0xa8>)
 800776a:	3a01      	subs	r2, #1
 800776c:	2300      	movs	r3, #0
 800776e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007772:	f7ff fe9f 	bl	80074b4 <__multadd>
 8007776:	4606      	mov	r6, r0
 8007778:	10ad      	asrs	r5, r5, #2
 800777a:	d03d      	beq.n	80077f8 <__pow5mult+0xa0>
 800777c:	69fc      	ldr	r4, [r7, #28]
 800777e:	b97c      	cbnz	r4, 80077a0 <__pow5mult+0x48>
 8007780:	2010      	movs	r0, #16
 8007782:	f7ff fd7f 	bl	8007284 <malloc>
 8007786:	4602      	mov	r2, r0
 8007788:	61f8      	str	r0, [r7, #28]
 800778a:	b928      	cbnz	r0, 8007798 <__pow5mult+0x40>
 800778c:	4b1d      	ldr	r3, [pc, #116]	@ (8007804 <__pow5mult+0xac>)
 800778e:	481e      	ldr	r0, [pc, #120]	@ (8007808 <__pow5mult+0xb0>)
 8007790:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007794:	f000 fbea 	bl	8007f6c <__assert_func>
 8007798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800779c:	6004      	str	r4, [r0, #0]
 800779e:	60c4      	str	r4, [r0, #12]
 80077a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077a8:	b94c      	cbnz	r4, 80077be <__pow5mult+0x66>
 80077aa:	f240 2171 	movw	r1, #625	@ 0x271
 80077ae:	4638      	mov	r0, r7
 80077b0:	f7ff ff12 	bl	80075d8 <__i2b>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ba:	4604      	mov	r4, r0
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	f04f 0900 	mov.w	r9, #0
 80077c2:	07eb      	lsls	r3, r5, #31
 80077c4:	d50a      	bpl.n	80077dc <__pow5mult+0x84>
 80077c6:	4631      	mov	r1, r6
 80077c8:	4622      	mov	r2, r4
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ff1a 	bl	8007604 <__multiply>
 80077d0:	4631      	mov	r1, r6
 80077d2:	4680      	mov	r8, r0
 80077d4:	4638      	mov	r0, r7
 80077d6:	f7ff fe4b 	bl	8007470 <_Bfree>
 80077da:	4646      	mov	r6, r8
 80077dc:	106d      	asrs	r5, r5, #1
 80077de:	d00b      	beq.n	80077f8 <__pow5mult+0xa0>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	b938      	cbnz	r0, 80077f4 <__pow5mult+0x9c>
 80077e4:	4622      	mov	r2, r4
 80077e6:	4621      	mov	r1, r4
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ff0b 	bl	8007604 <__multiply>
 80077ee:	6020      	str	r0, [r4, #0]
 80077f0:	f8c0 9000 	str.w	r9, [r0]
 80077f4:	4604      	mov	r4, r0
 80077f6:	e7e4      	b.n	80077c2 <__pow5mult+0x6a>
 80077f8:	4630      	mov	r0, r6
 80077fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fe:	bf00      	nop
 8007800:	08008818 	.word	0x08008818
 8007804:	0800873d 	.word	0x0800873d
 8007808:	080087bd 	.word	0x080087bd

0800780c <__lshift>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	6849      	ldr	r1, [r1, #4]
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	4607      	mov	r7, r0
 800781e:	4691      	mov	r9, r2
 8007820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007824:	f108 0601 	add.w	r6, r8, #1
 8007828:	42b3      	cmp	r3, r6
 800782a:	db0b      	blt.n	8007844 <__lshift+0x38>
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff fddf 	bl	80073f0 <_Balloc>
 8007832:	4605      	mov	r5, r0
 8007834:	b948      	cbnz	r0, 800784a <__lshift+0x3e>
 8007836:	4602      	mov	r2, r0
 8007838:	4b28      	ldr	r3, [pc, #160]	@ (80078dc <__lshift+0xd0>)
 800783a:	4829      	ldr	r0, [pc, #164]	@ (80078e0 <__lshift+0xd4>)
 800783c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007840:	f000 fb94 	bl	8007f6c <__assert_func>
 8007844:	3101      	adds	r1, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	e7ee      	b.n	8007828 <__lshift+0x1c>
 800784a:	2300      	movs	r3, #0
 800784c:	f100 0114 	add.w	r1, r0, #20
 8007850:	f100 0210 	add.w	r2, r0, #16
 8007854:	4618      	mov	r0, r3
 8007856:	4553      	cmp	r3, sl
 8007858:	db33      	blt.n	80078c2 <__lshift+0xb6>
 800785a:	6920      	ldr	r0, [r4, #16]
 800785c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007860:	f104 0314 	add.w	r3, r4, #20
 8007864:	f019 091f 	ands.w	r9, r9, #31
 8007868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800786c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007870:	d02b      	beq.n	80078ca <__lshift+0xbe>
 8007872:	f1c9 0e20 	rsb	lr, r9, #32
 8007876:	468a      	mov	sl, r1
 8007878:	2200      	movs	r2, #0
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	fa00 f009 	lsl.w	r0, r0, r9
 8007880:	4310      	orrs	r0, r2
 8007882:	f84a 0b04 	str.w	r0, [sl], #4
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	459c      	cmp	ip, r3
 800788c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007890:	d8f3      	bhi.n	800787a <__lshift+0x6e>
 8007892:	ebac 0304 	sub.w	r3, ip, r4
 8007896:	3b15      	subs	r3, #21
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	3304      	adds	r3, #4
 800789e:	f104 0015 	add.w	r0, r4, #21
 80078a2:	4584      	cmp	ip, r0
 80078a4:	bf38      	it	cc
 80078a6:	2304      	movcc	r3, #4
 80078a8:	50ca      	str	r2, [r1, r3]
 80078aa:	b10a      	cbz	r2, 80078b0 <__lshift+0xa4>
 80078ac:	f108 0602 	add.w	r6, r8, #2
 80078b0:	3e01      	subs	r6, #1
 80078b2:	4638      	mov	r0, r7
 80078b4:	612e      	str	r6, [r5, #16]
 80078b6:	4621      	mov	r1, r4
 80078b8:	f7ff fdda 	bl	8007470 <_Bfree>
 80078bc:	4628      	mov	r0, r5
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80078c6:	3301      	adds	r3, #1
 80078c8:	e7c5      	b.n	8007856 <__lshift+0x4a>
 80078ca:	3904      	subs	r1, #4
 80078cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80078d4:	459c      	cmp	ip, r3
 80078d6:	d8f9      	bhi.n	80078cc <__lshift+0xc0>
 80078d8:	e7ea      	b.n	80078b0 <__lshift+0xa4>
 80078da:	bf00      	nop
 80078dc:	080087ac 	.word	0x080087ac
 80078e0:	080087bd 	.word	0x080087bd

080078e4 <__mcmp>:
 80078e4:	690a      	ldr	r2, [r1, #16]
 80078e6:	4603      	mov	r3, r0
 80078e8:	6900      	ldr	r0, [r0, #16]
 80078ea:	1a80      	subs	r0, r0, r2
 80078ec:	b530      	push	{r4, r5, lr}
 80078ee:	d10e      	bne.n	800790e <__mcmp+0x2a>
 80078f0:	3314      	adds	r3, #20
 80078f2:	3114      	adds	r1, #20
 80078f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007904:	4295      	cmp	r5, r2
 8007906:	d003      	beq.n	8007910 <__mcmp+0x2c>
 8007908:	d205      	bcs.n	8007916 <__mcmp+0x32>
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	42a3      	cmp	r3, r4
 8007912:	d3f3      	bcc.n	80078fc <__mcmp+0x18>
 8007914:	e7fb      	b.n	800790e <__mcmp+0x2a>
 8007916:	2001      	movs	r0, #1
 8007918:	e7f9      	b.n	800790e <__mcmp+0x2a>
	...

0800791c <__mdiff>:
 800791c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	4689      	mov	r9, r1
 8007922:	4606      	mov	r6, r0
 8007924:	4611      	mov	r1, r2
 8007926:	4648      	mov	r0, r9
 8007928:	4614      	mov	r4, r2
 800792a:	f7ff ffdb 	bl	80078e4 <__mcmp>
 800792e:	1e05      	subs	r5, r0, #0
 8007930:	d112      	bne.n	8007958 <__mdiff+0x3c>
 8007932:	4629      	mov	r1, r5
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fd5b 	bl	80073f0 <_Balloc>
 800793a:	4602      	mov	r2, r0
 800793c:	b928      	cbnz	r0, 800794a <__mdiff+0x2e>
 800793e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a3c <__mdiff+0x120>)
 8007940:	f240 2137 	movw	r1, #567	@ 0x237
 8007944:	483e      	ldr	r0, [pc, #248]	@ (8007a40 <__mdiff+0x124>)
 8007946:	f000 fb11 	bl	8007f6c <__assert_func>
 800794a:	2301      	movs	r3, #1
 800794c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007950:	4610      	mov	r0, r2
 8007952:	b003      	add	sp, #12
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	bfbc      	itt	lt
 800795a:	464b      	movlt	r3, r9
 800795c:	46a1      	movlt	r9, r4
 800795e:	4630      	mov	r0, r6
 8007960:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007964:	bfba      	itte	lt
 8007966:	461c      	movlt	r4, r3
 8007968:	2501      	movlt	r5, #1
 800796a:	2500      	movge	r5, #0
 800796c:	f7ff fd40 	bl	80073f0 <_Balloc>
 8007970:	4602      	mov	r2, r0
 8007972:	b918      	cbnz	r0, 800797c <__mdiff+0x60>
 8007974:	4b31      	ldr	r3, [pc, #196]	@ (8007a3c <__mdiff+0x120>)
 8007976:	f240 2145 	movw	r1, #581	@ 0x245
 800797a:	e7e3      	b.n	8007944 <__mdiff+0x28>
 800797c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007980:	6926      	ldr	r6, [r4, #16]
 8007982:	60c5      	str	r5, [r0, #12]
 8007984:	f109 0310 	add.w	r3, r9, #16
 8007988:	f109 0514 	add.w	r5, r9, #20
 800798c:	f104 0e14 	add.w	lr, r4, #20
 8007990:	f100 0b14 	add.w	fp, r0, #20
 8007994:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007998:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	46d9      	mov	r9, fp
 80079a0:	f04f 0c00 	mov.w	ip, #0
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	fa1f f38a 	uxth.w	r3, sl
 80079b4:	4619      	mov	r1, r3
 80079b6:	b283      	uxth	r3, r0
 80079b8:	1acb      	subs	r3, r1, r3
 80079ba:	0c00      	lsrs	r0, r0, #16
 80079bc:	4463      	add	r3, ip
 80079be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079cc:	4576      	cmp	r6, lr
 80079ce:	f849 3b04 	str.w	r3, [r9], #4
 80079d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079d6:	d8e5      	bhi.n	80079a4 <__mdiff+0x88>
 80079d8:	1b33      	subs	r3, r6, r4
 80079da:	3b15      	subs	r3, #21
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	3415      	adds	r4, #21
 80079e2:	3304      	adds	r3, #4
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	bf38      	it	cc
 80079e8:	2304      	movcc	r3, #4
 80079ea:	441d      	add	r5, r3
 80079ec:	445b      	add	r3, fp
 80079ee:	461e      	mov	r6, r3
 80079f0:	462c      	mov	r4, r5
 80079f2:	4544      	cmp	r4, r8
 80079f4:	d30e      	bcc.n	8007a14 <__mdiff+0xf8>
 80079f6:	f108 0103 	add.w	r1, r8, #3
 80079fa:	1b49      	subs	r1, r1, r5
 80079fc:	f021 0103 	bic.w	r1, r1, #3
 8007a00:	3d03      	subs	r5, #3
 8007a02:	45a8      	cmp	r8, r5
 8007a04:	bf38      	it	cc
 8007a06:	2100      	movcc	r1, #0
 8007a08:	440b      	add	r3, r1
 8007a0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a0e:	b191      	cbz	r1, 8007a36 <__mdiff+0x11a>
 8007a10:	6117      	str	r7, [r2, #16]
 8007a12:	e79d      	b.n	8007950 <__mdiff+0x34>
 8007a14:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a18:	46e6      	mov	lr, ip
 8007a1a:	0c08      	lsrs	r0, r1, #16
 8007a1c:	fa1c fc81 	uxtah	ip, ip, r1
 8007a20:	4471      	add	r1, lr
 8007a22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a26:	b289      	uxth	r1, r1
 8007a28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a2c:	f846 1b04 	str.w	r1, [r6], #4
 8007a30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a34:	e7dd      	b.n	80079f2 <__mdiff+0xd6>
 8007a36:	3f01      	subs	r7, #1
 8007a38:	e7e7      	b.n	8007a0a <__mdiff+0xee>
 8007a3a:	bf00      	nop
 8007a3c:	080087ac 	.word	0x080087ac
 8007a40:	080087bd 	.word	0x080087bd

08007a44 <__d2b>:
 8007a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	460f      	mov	r7, r1
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	ec59 8b10 	vmov	r8, r9, d0
 8007a50:	4616      	mov	r6, r2
 8007a52:	f7ff fccd 	bl	80073f0 <_Balloc>
 8007a56:	4604      	mov	r4, r0
 8007a58:	b930      	cbnz	r0, 8007a68 <__d2b+0x24>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4b23      	ldr	r3, [pc, #140]	@ (8007aec <__d2b+0xa8>)
 8007a5e:	4824      	ldr	r0, [pc, #144]	@ (8007af0 <__d2b+0xac>)
 8007a60:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a64:	f000 fa82 	bl	8007f6c <__assert_func>
 8007a68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a70:	b10d      	cbz	r5, 8007a76 <__d2b+0x32>
 8007a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	f1b8 0300 	subs.w	r3, r8, #0
 8007a7c:	d023      	beq.n	8007ac6 <__d2b+0x82>
 8007a7e:	4668      	mov	r0, sp
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	f7ff fd7c 	bl	800757e <__lo0bits>
 8007a86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a8a:	b1d0      	cbz	r0, 8007ac2 <__d2b+0x7e>
 8007a8c:	f1c0 0320 	rsb	r3, r0, #32
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	430b      	orrs	r3, r1
 8007a96:	40c2      	lsrs	r2, r0
 8007a98:	6163      	str	r3, [r4, #20]
 8007a9a:	9201      	str	r2, [sp, #4]
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	61a3      	str	r3, [r4, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2201      	moveq	r2, #1
 8007aa6:	2202      	movne	r2, #2
 8007aa8:	6122      	str	r2, [r4, #16]
 8007aaa:	b1a5      	cbz	r5, 8007ad6 <__d2b+0x92>
 8007aac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ab0:	4405      	add	r5, r0
 8007ab2:	603d      	str	r5, [r7, #0]
 8007ab4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ab8:	6030      	str	r0, [r6, #0]
 8007aba:	4620      	mov	r0, r4
 8007abc:	b003      	add	sp, #12
 8007abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	6161      	str	r1, [r4, #20]
 8007ac4:	e7ea      	b.n	8007a9c <__d2b+0x58>
 8007ac6:	a801      	add	r0, sp, #4
 8007ac8:	f7ff fd59 	bl	800757e <__lo0bits>
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	6163      	str	r3, [r4, #20]
 8007ad0:	3020      	adds	r0, #32
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	e7e8      	b.n	8007aa8 <__d2b+0x64>
 8007ad6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ada:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ade:	6038      	str	r0, [r7, #0]
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	f7ff fd2d 	bl	8007540 <__hi0bits>
 8007ae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aea:	e7e5      	b.n	8007ab8 <__d2b+0x74>
 8007aec:	080087ac 	.word	0x080087ac
 8007af0:	080087bd 	.word	0x080087bd

08007af4 <__ssputs_r>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	688e      	ldr	r6, [r1, #8]
 8007afa:	461f      	mov	r7, r3
 8007afc:	42be      	cmp	r6, r7
 8007afe:	680b      	ldr	r3, [r1, #0]
 8007b00:	4682      	mov	sl, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4690      	mov	r8, r2
 8007b06:	d82d      	bhi.n	8007b64 <__ssputs_r+0x70>
 8007b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b10:	d026      	beq.n	8007b60 <__ssputs_r+0x6c>
 8007b12:	6965      	ldr	r5, [r4, #20]
 8007b14:	6909      	ldr	r1, [r1, #16]
 8007b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b1a:	eba3 0901 	sub.w	r9, r3, r1
 8007b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	444b      	add	r3, r9
 8007b26:	106d      	asrs	r5, r5, #1
 8007b28:	429d      	cmp	r5, r3
 8007b2a:	bf38      	it	cc
 8007b2c:	461d      	movcc	r5, r3
 8007b2e:	0553      	lsls	r3, r2, #21
 8007b30:	d527      	bpl.n	8007b82 <__ssputs_r+0x8e>
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7ff fbd0 	bl	80072d8 <_malloc_r>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	b360      	cbz	r0, 8007b96 <__ssputs_r+0xa2>
 8007b3c:	6921      	ldr	r1, [r4, #16]
 8007b3e:	464a      	mov	r2, r9
 8007b40:	f000 fa06 	bl	8007f50 <memcpy>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	6126      	str	r6, [r4, #16]
 8007b52:	6165      	str	r5, [r4, #20]
 8007b54:	444e      	add	r6, r9
 8007b56:	eba5 0509 	sub.w	r5, r5, r9
 8007b5a:	6026      	str	r6, [r4, #0]
 8007b5c:	60a5      	str	r5, [r4, #8]
 8007b5e:	463e      	mov	r6, r7
 8007b60:	42be      	cmp	r6, r7
 8007b62:	d900      	bls.n	8007b66 <__ssputs_r+0x72>
 8007b64:	463e      	mov	r6, r7
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	f000 f9c6 	bl	8007efc <memmove>
 8007b70:	68a3      	ldr	r3, [r4, #8]
 8007b72:	1b9b      	subs	r3, r3, r6
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	4433      	add	r3, r6
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b82:	462a      	mov	r2, r5
 8007b84:	f000 fa36 	bl	8007ff4 <_realloc_r>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1e0      	bne.n	8007b50 <__ssputs_r+0x5c>
 8007b8e:	6921      	ldr	r1, [r4, #16]
 8007b90:	4650      	mov	r0, sl
 8007b92:	f7ff fb2d 	bl	80071f0 <_free_r>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f8ca 3000 	str.w	r3, [sl]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	e7e9      	b.n	8007b7e <__ssputs_r+0x8a>
	...

08007bac <_svfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	898b      	ldrh	r3, [r1, #12]
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	b09d      	sub	sp, #116	@ 0x74
 8007bb8:	4607      	mov	r7, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	d510      	bpl.n	8007be2 <_svfiprintf_r+0x36>
 8007bc0:	690b      	ldr	r3, [r1, #16]
 8007bc2:	b973      	cbnz	r3, 8007be2 <_svfiprintf_r+0x36>
 8007bc4:	2140      	movs	r1, #64	@ 0x40
 8007bc6:	f7ff fb87 	bl	80072d8 <_malloc_r>
 8007bca:	6028      	str	r0, [r5, #0]
 8007bcc:	6128      	str	r0, [r5, #16]
 8007bce:	b930      	cbnz	r0, 8007bde <_svfiprintf_r+0x32>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	@ 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	616b      	str	r3, [r5, #20]
 8007be2:	2300      	movs	r3, #0
 8007be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be6:	2320      	movs	r3, #32
 8007be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf0:	2330      	movs	r3, #48	@ 0x30
 8007bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d90 <_svfiprintf_r+0x1e4>
 8007bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bfa:	f04f 0901 	mov.w	r9, #1
 8007bfe:	4623      	mov	r3, r4
 8007c00:	469a      	mov	sl, r3
 8007c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c06:	b10a      	cbz	r2, 8007c0c <_svfiprintf_r+0x60>
 8007c08:	2a25      	cmp	r2, #37	@ 0x25
 8007c0a:	d1f9      	bne.n	8007c00 <_svfiprintf_r+0x54>
 8007c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c10:	d00b      	beq.n	8007c2a <_svfiprintf_r+0x7e>
 8007c12:	465b      	mov	r3, fp
 8007c14:	4622      	mov	r2, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff ff6b 	bl	8007af4 <__ssputs_r>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f000 80a7 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c26:	445a      	add	r2, fp
 8007c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 809f 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c34:	2300      	movs	r3, #0
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c3e:	f10a 0a01 	add.w	sl, sl, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	9307      	str	r3, [sp, #28]
 8007c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2205      	movs	r2, #5
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	484e      	ldr	r0, [pc, #312]	@ (8007d90 <_svfiprintf_r+0x1e4>)
 8007c56:	f7f8 fadb 	bl	8000210 <memchr>
 8007c5a:	9a04      	ldr	r2, [sp, #16]
 8007c5c:	b9d8      	cbnz	r0, 8007c96 <_svfiprintf_r+0xea>
 8007c5e:	06d0      	lsls	r0, r2, #27
 8007c60:	bf44      	itt	mi
 8007c62:	2320      	movmi	r3, #32
 8007c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c68:	0711      	lsls	r1, r2, #28
 8007c6a:	bf44      	itt	mi
 8007c6c:	232b      	movmi	r3, #43	@ 0x2b
 8007c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c72:	f89a 3000 	ldrb.w	r3, [sl]
 8007c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c78:	d015      	beq.n	8007ca6 <_svfiprintf_r+0xfa>
 8007c7a:	9a07      	ldr	r2, [sp, #28]
 8007c7c:	4654      	mov	r4, sl
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f04f 0c0a 	mov.w	ip, #10
 8007c84:	4621      	mov	r1, r4
 8007c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8a:	3b30      	subs	r3, #48	@ 0x30
 8007c8c:	2b09      	cmp	r3, #9
 8007c8e:	d94b      	bls.n	8007d28 <_svfiprintf_r+0x17c>
 8007c90:	b1b0      	cbz	r0, 8007cc0 <_svfiprintf_r+0x114>
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	e014      	b.n	8007cc0 <_svfiprintf_r+0x114>
 8007c96:	eba0 0308 	sub.w	r3, r0, r8
 8007c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	46a2      	mov	sl, r4
 8007ca4:	e7d2      	b.n	8007c4c <_svfiprintf_r+0xa0>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d19      	adds	r1, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9103      	str	r1, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfbb      	ittet	lt
 8007cb2:	425b      	neglt	r3, r3
 8007cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cb8:	9307      	strge	r3, [sp, #28]
 8007cba:	9307      	strlt	r3, [sp, #28]
 8007cbc:	bfb8      	it	lt
 8007cbe:	9204      	strlt	r2, [sp, #16]
 8007cc0:	7823      	ldrb	r3, [r4, #0]
 8007cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc4:	d10a      	bne.n	8007cdc <_svfiprintf_r+0x130>
 8007cc6:	7863      	ldrb	r3, [r4, #1]
 8007cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cca:	d132      	bne.n	8007d32 <_svfiprintf_r+0x186>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cd8:	3402      	adds	r4, #2
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007da0 <_svfiprintf_r+0x1f4>
 8007ce0:	7821      	ldrb	r1, [r4, #0]
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f7f8 fa93 	bl	8000210 <memchr>
 8007cea:	b138      	cbz	r0, 8007cfc <_svfiprintf_r+0x150>
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	eba0 000a 	sub.w	r0, r0, sl
 8007cf2:	2240      	movs	r2, #64	@ 0x40
 8007cf4:	4082      	lsls	r2, r0
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	3401      	adds	r4, #1
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	4824      	ldr	r0, [pc, #144]	@ (8007d94 <_svfiprintf_r+0x1e8>)
 8007d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d06:	2206      	movs	r2, #6
 8007d08:	f7f8 fa82 	bl	8000210 <memchr>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d036      	beq.n	8007d7e <_svfiprintf_r+0x1d2>
 8007d10:	4b21      	ldr	r3, [pc, #132]	@ (8007d98 <_svfiprintf_r+0x1ec>)
 8007d12:	bb1b      	cbnz	r3, 8007d5c <_svfiprintf_r+0x1b0>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	3307      	adds	r3, #7
 8007d18:	f023 0307 	bic.w	r3, r3, #7
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	4433      	add	r3, r6
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	e76a      	b.n	8007bfe <_svfiprintf_r+0x52>
 8007d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	2001      	movs	r0, #1
 8007d30:	e7a8      	b.n	8007c84 <_svfiprintf_r+0xd8>
 8007d32:	2300      	movs	r3, #0
 8007d34:	3401      	adds	r4, #1
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f04f 0c0a 	mov.w	ip, #10
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d44:	3a30      	subs	r2, #48	@ 0x30
 8007d46:	2a09      	cmp	r2, #9
 8007d48:	d903      	bls.n	8007d52 <_svfiprintf_r+0x1a6>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0c6      	beq.n	8007cdc <_svfiprintf_r+0x130>
 8007d4e:	9105      	str	r1, [sp, #20]
 8007d50:	e7c4      	b.n	8007cdc <_svfiprintf_r+0x130>
 8007d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d56:	4604      	mov	r4, r0
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e7f0      	b.n	8007d3e <_svfiprintf_r+0x192>
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4b0e      	ldr	r3, [pc, #56]	@ (8007d9c <_svfiprintf_r+0x1f0>)
 8007d64:	a904      	add	r1, sp, #16
 8007d66:	4638      	mov	r0, r7
 8007d68:	f7fd fe96 	bl	8005a98 <_printf_float>
 8007d6c:	1c42      	adds	r2, r0, #1
 8007d6e:	4606      	mov	r6, r0
 8007d70:	d1d6      	bne.n	8007d20 <_svfiprintf_r+0x174>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	065b      	lsls	r3, r3, #25
 8007d76:	f53f af2d 	bmi.w	8007bd4 <_svfiprintf_r+0x28>
 8007d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d7c:	e72c      	b.n	8007bd8 <_svfiprintf_r+0x2c>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <_svfiprintf_r+0x1f0>)
 8007d86:	a904      	add	r1, sp, #16
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7fe f91d 	bl	8005fc8 <_printf_i>
 8007d8e:	e7ed      	b.n	8007d6c <_svfiprintf_r+0x1c0>
 8007d90:	08008918 	.word	0x08008918
 8007d94:	08008922 	.word	0x08008922
 8007d98:	08005a99 	.word	0x08005a99
 8007d9c:	08007af5 	.word	0x08007af5
 8007da0:	0800891e 	.word	0x0800891e

08007da4 <__sflush_r>:
 8007da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	0716      	lsls	r6, r2, #28
 8007dae:	4605      	mov	r5, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	d454      	bmi.n	8007e5e <__sflush_r+0xba>
 8007db4:	684b      	ldr	r3, [r1, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc02      	bgt.n	8007dc0 <__sflush_r+0x1c>
 8007dba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd48      	ble.n	8007e52 <__sflush_r+0xae>
 8007dc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d045      	beq.n	8007e52 <__sflush_r+0xae>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dcc:	682f      	ldr	r7, [r5, #0]
 8007dce:	6a21      	ldr	r1, [r4, #32]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	d030      	beq.n	8007e36 <__sflush_r+0x92>
 8007dd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	0759      	lsls	r1, r3, #29
 8007dda:	d505      	bpl.n	8007de8 <__sflush_r+0x44>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007de2:	b10b      	cbz	r3, 8007de8 <__sflush_r+0x44>
 8007de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	d106      	bne.n	8007e06 <__sflush_r+0x62>
 8007df8:	6829      	ldr	r1, [r5, #0]
 8007dfa:	291d      	cmp	r1, #29
 8007dfc:	d82b      	bhi.n	8007e56 <__sflush_r+0xb2>
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea8 <__sflush_r+0x104>)
 8007e00:	410a      	asrs	r2, r1
 8007e02:	07d6      	lsls	r6, r2, #31
 8007e04:	d427      	bmi.n	8007e56 <__sflush_r+0xb2>
 8007e06:	2200      	movs	r2, #0
 8007e08:	6062      	str	r2, [r4, #4]
 8007e0a:	04d9      	lsls	r1, r3, #19
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	d504      	bpl.n	8007e1c <__sflush_r+0x78>
 8007e12:	1c42      	adds	r2, r0, #1
 8007e14:	d101      	bne.n	8007e1a <__sflush_r+0x76>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	b903      	cbnz	r3, 8007e1c <__sflush_r+0x78>
 8007e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	b1b9      	cbz	r1, 8007e52 <__sflush_r+0xae>
 8007e22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e26:	4299      	cmp	r1, r3
 8007e28:	d002      	beq.n	8007e30 <__sflush_r+0x8c>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7ff f9e0 	bl	80071f0 <_free_r>
 8007e30:	2300      	movs	r3, #0
 8007e32:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e34:	e00d      	b.n	8007e52 <__sflush_r+0xae>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b0      	blx	r6
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	1c50      	adds	r0, r2, #1
 8007e40:	d1c9      	bne.n	8007dd6 <__sflush_r+0x32>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c6      	beq.n	8007dd6 <__sflush_r+0x32>
 8007e48:	2b1d      	cmp	r3, #29
 8007e4a:	d001      	beq.n	8007e50 <__sflush_r+0xac>
 8007e4c:	2b16      	cmp	r3, #22
 8007e4e:	d11e      	bne.n	8007e8e <__sflush_r+0xea>
 8007e50:	602f      	str	r7, [r5, #0]
 8007e52:	2000      	movs	r0, #0
 8007e54:	e022      	b.n	8007e9c <__sflush_r+0xf8>
 8007e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	e01b      	b.n	8007e96 <__sflush_r+0xf2>
 8007e5e:	690f      	ldr	r7, [r1, #16]
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	d0f6      	beq.n	8007e52 <__sflush_r+0xae>
 8007e64:	0793      	lsls	r3, r2, #30
 8007e66:	680e      	ldr	r6, [r1, #0]
 8007e68:	bf08      	it	eq
 8007e6a:	694b      	ldreq	r3, [r1, #20]
 8007e6c:	600f      	str	r7, [r1, #0]
 8007e6e:	bf18      	it	ne
 8007e70:	2300      	movne	r3, #0
 8007e72:	eba6 0807 	sub.w	r8, r6, r7
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	f1b8 0f00 	cmp.w	r8, #0
 8007e7c:	dde9      	ble.n	8007e52 <__sflush_r+0xae>
 8007e7e:	6a21      	ldr	r1, [r4, #32]
 8007e80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e82:	4643      	mov	r3, r8
 8007e84:	463a      	mov	r2, r7
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b0      	blx	r6
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	dc08      	bgt.n	8007ea0 <__sflush_r+0xfc>
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	4407      	add	r7, r0
 8007ea2:	eba8 0800 	sub.w	r8, r8, r0
 8007ea6:	e7e7      	b.n	8007e78 <__sflush_r+0xd4>
 8007ea8:	dfbffffe 	.word	0xdfbffffe

08007eac <_fflush_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	b913      	cbnz	r3, 8007ebc <_fflush_r+0x10>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	b118      	cbz	r0, 8007ec6 <_fflush_r+0x1a>
 8007ebe:	6a03      	ldr	r3, [r0, #32]
 8007ec0:	b90b      	cbnz	r3, 8007ec6 <_fflush_r+0x1a>
 8007ec2:	f7fe fa2d 	bl	8006320 <__sinit>
 8007ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f3      	beq.n	8007eb6 <_fflush_r+0xa>
 8007ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d404      	bmi.n	8007ede <_fflush_r+0x32>
 8007ed4:	0599      	lsls	r1, r3, #22
 8007ed6:	d402      	bmi.n	8007ede <_fflush_r+0x32>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eda:	f7fe fb38 	bl	800654e <__retarget_lock_acquire_recursive>
 8007ede:	4628      	mov	r0, r5
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7ff ff5f 	bl	8007da4 <__sflush_r>
 8007ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ee8:	07da      	lsls	r2, r3, #31
 8007eea:	4605      	mov	r5, r0
 8007eec:	d4e4      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	059b      	lsls	r3, r3, #22
 8007ef2:	d4e1      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f7fe fb2b 	bl	8006550 <__retarget_lock_release_recursive>
 8007efa:	e7dd      	b.n	8007eb8 <_fflush_r+0xc>

08007efc <memmove>:
 8007efc:	4288      	cmp	r0, r1
 8007efe:	b510      	push	{r4, lr}
 8007f00:	eb01 0402 	add.w	r4, r1, r2
 8007f04:	d902      	bls.n	8007f0c <memmove+0x10>
 8007f06:	4284      	cmp	r4, r0
 8007f08:	4623      	mov	r3, r4
 8007f0a:	d807      	bhi.n	8007f1c <memmove+0x20>
 8007f0c:	1e43      	subs	r3, r0, #1
 8007f0e:	42a1      	cmp	r1, r4
 8007f10:	d008      	beq.n	8007f24 <memmove+0x28>
 8007f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1a:	e7f8      	b.n	8007f0e <memmove+0x12>
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4601      	mov	r1, r0
 8007f20:	428a      	cmp	r2, r1
 8007f22:	d100      	bne.n	8007f26 <memmove+0x2a>
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f2e:	e7f7      	b.n	8007f20 <memmove+0x24>

08007f30 <_sbrk_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d06      	ldr	r5, [pc, #24]	@ (8007f4c <_sbrk_r+0x1c>)
 8007f34:	2300      	movs	r3, #0
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	602b      	str	r3, [r5, #0]
 8007f3c:	f7fa fb36 	bl	80025ac <_sbrk>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_sbrk_r+0x1a>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_sbrk_r+0x1a>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	20000550 	.word	0x20000550

08007f50 <memcpy>:
 8007f50:	440a      	add	r2, r1
 8007f52:	4291      	cmp	r1, r2
 8007f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f58:	d100      	bne.n	8007f5c <memcpy+0xc>
 8007f5a:	4770      	bx	lr
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f66:	4291      	cmp	r1, r2
 8007f68:	d1f9      	bne.n	8007f5e <memcpy+0xe>
 8007f6a:	bd10      	pop	{r4, pc}

08007f6c <__assert_func>:
 8007f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f6e:	4614      	mov	r4, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4b09      	ldr	r3, [pc, #36]	@ (8007f98 <__assert_func+0x2c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4605      	mov	r5, r0
 8007f78:	68d8      	ldr	r0, [r3, #12]
 8007f7a:	b954      	cbnz	r4, 8007f92 <__assert_func+0x26>
 8007f7c:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <__assert_func+0x30>)
 8007f7e:	461c      	mov	r4, r3
 8007f80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f84:	9100      	str	r1, [sp, #0]
 8007f86:	462b      	mov	r3, r5
 8007f88:	4905      	ldr	r1, [pc, #20]	@ (8007fa0 <__assert_func+0x34>)
 8007f8a:	f000 f86f 	bl	800806c <fiprintf>
 8007f8e:	f000 f87f 	bl	8008090 <abort>
 8007f92:	4b04      	ldr	r3, [pc, #16]	@ (8007fa4 <__assert_func+0x38>)
 8007f94:	e7f4      	b.n	8007f80 <__assert_func+0x14>
 8007f96:	bf00      	nop
 8007f98:	20000024 	.word	0x20000024
 8007f9c:	0800896e 	.word	0x0800896e
 8007fa0:	08008940 	.word	0x08008940
 8007fa4:	08008933 	.word	0x08008933

08007fa8 <_calloc_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	fba1 5402 	umull	r5, r4, r1, r2
 8007fae:	b93c      	cbnz	r4, 8007fc0 <_calloc_r+0x18>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7ff f991 	bl	80072d8 <_malloc_r>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <_calloc_r+0x1e>
 8007fba:	2600      	movs	r6, #0
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	220c      	movs	r2, #12
 8007fc2:	6002      	str	r2, [r0, #0]
 8007fc4:	e7f9      	b.n	8007fba <_calloc_r+0x12>
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7fe fa42 	bl	8006452 <memset>
 8007fce:	e7f5      	b.n	8007fbc <_calloc_r+0x14>

08007fd0 <__ascii_mbtowc>:
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	b901      	cbnz	r1, 8007fd6 <__ascii_mbtowc+0x6>
 8007fd4:	a901      	add	r1, sp, #4
 8007fd6:	b142      	cbz	r2, 8007fea <__ascii_mbtowc+0x1a>
 8007fd8:	b14b      	cbz	r3, 8007fee <__ascii_mbtowc+0x1e>
 8007fda:	7813      	ldrb	r3, [r2, #0]
 8007fdc:	600b      	str	r3, [r1, #0]
 8007fde:	7812      	ldrb	r2, [r2, #0]
 8007fe0:	1e10      	subs	r0, r2, #0
 8007fe2:	bf18      	it	ne
 8007fe4:	2001      	movne	r0, #1
 8007fe6:	b002      	add	sp, #8
 8007fe8:	4770      	bx	lr
 8007fea:	4610      	mov	r0, r2
 8007fec:	e7fb      	b.n	8007fe6 <__ascii_mbtowc+0x16>
 8007fee:	f06f 0001 	mvn.w	r0, #1
 8007ff2:	e7f8      	b.n	8007fe6 <__ascii_mbtowc+0x16>

08007ff4 <_realloc_r>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	b921      	cbnz	r1, 800800a <_realloc_r+0x16>
 8008000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	4611      	mov	r1, r2
 8008006:	f7ff b967 	b.w	80072d8 <_malloc_r>
 800800a:	b92a      	cbnz	r2, 8008018 <_realloc_r+0x24>
 800800c:	f7ff f8f0 	bl	80071f0 <_free_r>
 8008010:	2400      	movs	r4, #0
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	f000 f841 	bl	800809e <_malloc_usable_size_r>
 800801c:	4285      	cmp	r5, r0
 800801e:	4606      	mov	r6, r0
 8008020:	d802      	bhi.n	8008028 <_realloc_r+0x34>
 8008022:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008026:	d8f4      	bhi.n	8008012 <_realloc_r+0x1e>
 8008028:	4629      	mov	r1, r5
 800802a:	4640      	mov	r0, r8
 800802c:	f7ff f954 	bl	80072d8 <_malloc_r>
 8008030:	4607      	mov	r7, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d0ec      	beq.n	8008010 <_realloc_r+0x1c>
 8008036:	42b5      	cmp	r5, r6
 8008038:	462a      	mov	r2, r5
 800803a:	4621      	mov	r1, r4
 800803c:	bf28      	it	cs
 800803e:	4632      	movcs	r2, r6
 8008040:	f7ff ff86 	bl	8007f50 <memcpy>
 8008044:	4621      	mov	r1, r4
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff f8d2 	bl	80071f0 <_free_r>
 800804c:	463c      	mov	r4, r7
 800804e:	e7e0      	b.n	8008012 <_realloc_r+0x1e>

08008050 <__ascii_wctomb>:
 8008050:	4603      	mov	r3, r0
 8008052:	4608      	mov	r0, r1
 8008054:	b141      	cbz	r1, 8008068 <__ascii_wctomb+0x18>
 8008056:	2aff      	cmp	r2, #255	@ 0xff
 8008058:	d904      	bls.n	8008064 <__ascii_wctomb+0x14>
 800805a:	228a      	movs	r2, #138	@ 0x8a
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	4770      	bx	lr
 8008064:	700a      	strb	r2, [r1, #0]
 8008066:	2001      	movs	r0, #1
 8008068:	4770      	bx	lr
	...

0800806c <fiprintf>:
 800806c:	b40e      	push	{r1, r2, r3}
 800806e:	b503      	push	{r0, r1, lr}
 8008070:	4601      	mov	r1, r0
 8008072:	ab03      	add	r3, sp, #12
 8008074:	4805      	ldr	r0, [pc, #20]	@ (800808c <fiprintf+0x20>)
 8008076:	f853 2b04 	ldr.w	r2, [r3], #4
 800807a:	6800      	ldr	r0, [r0, #0]
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	f000 f83f 	bl	8008100 <_vfiprintf_r>
 8008082:	b002      	add	sp, #8
 8008084:	f85d eb04 	ldr.w	lr, [sp], #4
 8008088:	b003      	add	sp, #12
 800808a:	4770      	bx	lr
 800808c:	20000024 	.word	0x20000024

08008090 <abort>:
 8008090:	b508      	push	{r3, lr}
 8008092:	2006      	movs	r0, #6
 8008094:	f000 fa08 	bl	80084a8 <raise>
 8008098:	2001      	movs	r0, #1
 800809a:	f7fa fa0f 	bl	80024bc <_exit>

0800809e <_malloc_usable_size_r>:
 800809e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a2:	1f18      	subs	r0, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfbc      	itt	lt
 80080a8:	580b      	ldrlt	r3, [r1, r0]
 80080aa:	18c0      	addlt	r0, r0, r3
 80080ac:	4770      	bx	lr

080080ae <__sfputc_r>:
 80080ae:	6893      	ldr	r3, [r2, #8]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	b410      	push	{r4}
 80080b6:	6093      	str	r3, [r2, #8]
 80080b8:	da08      	bge.n	80080cc <__sfputc_r+0x1e>
 80080ba:	6994      	ldr	r4, [r2, #24]
 80080bc:	42a3      	cmp	r3, r4
 80080be:	db01      	blt.n	80080c4 <__sfputc_r+0x16>
 80080c0:	290a      	cmp	r1, #10
 80080c2:	d103      	bne.n	80080cc <__sfputc_r+0x1e>
 80080c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c8:	f000 b932 	b.w	8008330 <__swbuf_r>
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	1c58      	adds	r0, r3, #1
 80080d0:	6010      	str	r0, [r2, #0]
 80080d2:	7019      	strb	r1, [r3, #0]
 80080d4:	4608      	mov	r0, r1
 80080d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080da:	4770      	bx	lr

080080dc <__sfputs_r>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	4614      	mov	r4, r2
 80080e4:	18d5      	adds	r5, r2, r3
 80080e6:	42ac      	cmp	r4, r5
 80080e8:	d101      	bne.n	80080ee <__sfputs_r+0x12>
 80080ea:	2000      	movs	r0, #0
 80080ec:	e007      	b.n	80080fe <__sfputs_r+0x22>
 80080ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f2:	463a      	mov	r2, r7
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff ffda 	bl	80080ae <__sfputc_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d1f3      	bne.n	80080e6 <__sfputs_r+0xa>
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008100 <_vfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	460d      	mov	r5, r1
 8008106:	b09d      	sub	sp, #116	@ 0x74
 8008108:	4614      	mov	r4, r2
 800810a:	4698      	mov	r8, r3
 800810c:	4606      	mov	r6, r0
 800810e:	b118      	cbz	r0, 8008118 <_vfiprintf_r+0x18>
 8008110:	6a03      	ldr	r3, [r0, #32]
 8008112:	b90b      	cbnz	r3, 8008118 <_vfiprintf_r+0x18>
 8008114:	f7fe f904 	bl	8006320 <__sinit>
 8008118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800811a:	07d9      	lsls	r1, r3, #31
 800811c:	d405      	bmi.n	800812a <_vfiprintf_r+0x2a>
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	059a      	lsls	r2, r3, #22
 8008122:	d402      	bmi.n	800812a <_vfiprintf_r+0x2a>
 8008124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008126:	f7fe fa12 	bl	800654e <__retarget_lock_acquire_recursive>
 800812a:	89ab      	ldrh	r3, [r5, #12]
 800812c:	071b      	lsls	r3, r3, #28
 800812e:	d501      	bpl.n	8008134 <_vfiprintf_r+0x34>
 8008130:	692b      	ldr	r3, [r5, #16]
 8008132:	b99b      	cbnz	r3, 800815c <_vfiprintf_r+0x5c>
 8008134:	4629      	mov	r1, r5
 8008136:	4630      	mov	r0, r6
 8008138:	f000 f938 	bl	80083ac <__swsetup_r>
 800813c:	b170      	cbz	r0, 800815c <_vfiprintf_r+0x5c>
 800813e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008140:	07dc      	lsls	r4, r3, #31
 8008142:	d504      	bpl.n	800814e <_vfiprintf_r+0x4e>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	b01d      	add	sp, #116	@ 0x74
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	0598      	lsls	r0, r3, #22
 8008152:	d4f7      	bmi.n	8008144 <_vfiprintf_r+0x44>
 8008154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008156:	f7fe f9fb 	bl	8006550 <__retarget_lock_release_recursive>
 800815a:	e7f3      	b.n	8008144 <_vfiprintf_r+0x44>
 800815c:	2300      	movs	r3, #0
 800815e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008160:	2320      	movs	r3, #32
 8008162:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008166:	f8cd 800c 	str.w	r8, [sp, #12]
 800816a:	2330      	movs	r3, #48	@ 0x30
 800816c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800831c <_vfiprintf_r+0x21c>
 8008170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008174:	f04f 0901 	mov.w	r9, #1
 8008178:	4623      	mov	r3, r4
 800817a:	469a      	mov	sl, r3
 800817c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008180:	b10a      	cbz	r2, 8008186 <_vfiprintf_r+0x86>
 8008182:	2a25      	cmp	r2, #37	@ 0x25
 8008184:	d1f9      	bne.n	800817a <_vfiprintf_r+0x7a>
 8008186:	ebba 0b04 	subs.w	fp, sl, r4
 800818a:	d00b      	beq.n	80081a4 <_vfiprintf_r+0xa4>
 800818c:	465b      	mov	r3, fp
 800818e:	4622      	mov	r2, r4
 8008190:	4629      	mov	r1, r5
 8008192:	4630      	mov	r0, r6
 8008194:	f7ff ffa2 	bl	80080dc <__sfputs_r>
 8008198:	3001      	adds	r0, #1
 800819a:	f000 80a7 	beq.w	80082ec <_vfiprintf_r+0x1ec>
 800819e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081a0:	445a      	add	r2, fp
 80081a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80081a4:	f89a 3000 	ldrb.w	r3, [sl]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 809f 	beq.w	80082ec <_vfiprintf_r+0x1ec>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f04f 32ff 	mov.w	r2, #4294967295
 80081b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b8:	f10a 0a01 	add.w	sl, sl, #1
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80081c6:	4654      	mov	r4, sl
 80081c8:	2205      	movs	r2, #5
 80081ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ce:	4853      	ldr	r0, [pc, #332]	@ (800831c <_vfiprintf_r+0x21c>)
 80081d0:	f7f8 f81e 	bl	8000210 <memchr>
 80081d4:	9a04      	ldr	r2, [sp, #16]
 80081d6:	b9d8      	cbnz	r0, 8008210 <_vfiprintf_r+0x110>
 80081d8:	06d1      	lsls	r1, r2, #27
 80081da:	bf44      	itt	mi
 80081dc:	2320      	movmi	r3, #32
 80081de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081e2:	0713      	lsls	r3, r2, #28
 80081e4:	bf44      	itt	mi
 80081e6:	232b      	movmi	r3, #43	@ 0x2b
 80081e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ec:	f89a 3000 	ldrb.w	r3, [sl]
 80081f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f2:	d015      	beq.n	8008220 <_vfiprintf_r+0x120>
 80081f4:	9a07      	ldr	r2, [sp, #28]
 80081f6:	4654      	mov	r4, sl
 80081f8:	2000      	movs	r0, #0
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4621      	mov	r1, r4
 8008200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008204:	3b30      	subs	r3, #48	@ 0x30
 8008206:	2b09      	cmp	r3, #9
 8008208:	d94b      	bls.n	80082a2 <_vfiprintf_r+0x1a2>
 800820a:	b1b0      	cbz	r0, 800823a <_vfiprintf_r+0x13a>
 800820c:	9207      	str	r2, [sp, #28]
 800820e:	e014      	b.n	800823a <_vfiprintf_r+0x13a>
 8008210:	eba0 0308 	sub.w	r3, r0, r8
 8008214:	fa09 f303 	lsl.w	r3, r9, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	46a2      	mov	sl, r4
 800821e:	e7d2      	b.n	80081c6 <_vfiprintf_r+0xc6>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	1d19      	adds	r1, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9103      	str	r1, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfbb      	ittet	lt
 800822c:	425b      	neglt	r3, r3
 800822e:	f042 0202 	orrlt.w	r2, r2, #2
 8008232:	9307      	strge	r3, [sp, #28]
 8008234:	9307      	strlt	r3, [sp, #28]
 8008236:	bfb8      	it	lt
 8008238:	9204      	strlt	r2, [sp, #16]
 800823a:	7823      	ldrb	r3, [r4, #0]
 800823c:	2b2e      	cmp	r3, #46	@ 0x2e
 800823e:	d10a      	bne.n	8008256 <_vfiprintf_r+0x156>
 8008240:	7863      	ldrb	r3, [r4, #1]
 8008242:	2b2a      	cmp	r3, #42	@ 0x2a
 8008244:	d132      	bne.n	80082ac <_vfiprintf_r+0x1ac>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9203      	str	r2, [sp, #12]
 800824e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008252:	3402      	adds	r4, #2
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800832c <_vfiprintf_r+0x22c>
 800825a:	7821      	ldrb	r1, [r4, #0]
 800825c:	2203      	movs	r2, #3
 800825e:	4650      	mov	r0, sl
 8008260:	f7f7 ffd6 	bl	8000210 <memchr>
 8008264:	b138      	cbz	r0, 8008276 <_vfiprintf_r+0x176>
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	eba0 000a 	sub.w	r0, r0, sl
 800826c:	2240      	movs	r2, #64	@ 0x40
 800826e:	4082      	lsls	r2, r0
 8008270:	4313      	orrs	r3, r2
 8008272:	3401      	adds	r4, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827a:	4829      	ldr	r0, [pc, #164]	@ (8008320 <_vfiprintf_r+0x220>)
 800827c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008280:	2206      	movs	r2, #6
 8008282:	f7f7 ffc5 	bl	8000210 <memchr>
 8008286:	2800      	cmp	r0, #0
 8008288:	d03f      	beq.n	800830a <_vfiprintf_r+0x20a>
 800828a:	4b26      	ldr	r3, [pc, #152]	@ (8008324 <_vfiprintf_r+0x224>)
 800828c:	bb1b      	cbnz	r3, 80082d6 <_vfiprintf_r+0x1d6>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	3307      	adds	r3, #7
 8008292:	f023 0307 	bic.w	r3, r3, #7
 8008296:	3308      	adds	r3, #8
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829c:	443b      	add	r3, r7
 800829e:	9309      	str	r3, [sp, #36]	@ 0x24
 80082a0:	e76a      	b.n	8008178 <_vfiprintf_r+0x78>
 80082a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a6:	460c      	mov	r4, r1
 80082a8:	2001      	movs	r0, #1
 80082aa:	e7a8      	b.n	80081fe <_vfiprintf_r+0xfe>
 80082ac:	2300      	movs	r3, #0
 80082ae:	3401      	adds	r4, #1
 80082b0:	9305      	str	r3, [sp, #20]
 80082b2:	4619      	mov	r1, r3
 80082b4:	f04f 0c0a 	mov.w	ip, #10
 80082b8:	4620      	mov	r0, r4
 80082ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082be:	3a30      	subs	r2, #48	@ 0x30
 80082c0:	2a09      	cmp	r2, #9
 80082c2:	d903      	bls.n	80082cc <_vfiprintf_r+0x1cc>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0c6      	beq.n	8008256 <_vfiprintf_r+0x156>
 80082c8:	9105      	str	r1, [sp, #20]
 80082ca:	e7c4      	b.n	8008256 <_vfiprintf_r+0x156>
 80082cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d0:	4604      	mov	r4, r0
 80082d2:	2301      	movs	r3, #1
 80082d4:	e7f0      	b.n	80082b8 <_vfiprintf_r+0x1b8>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b12      	ldr	r3, [pc, #72]	@ (8008328 <_vfiprintf_r+0x228>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7fd fbd9 	bl	8005a98 <_printf_float>
 80082e6:	4607      	mov	r7, r0
 80082e8:	1c78      	adds	r0, r7, #1
 80082ea:	d1d6      	bne.n	800829a <_vfiprintf_r+0x19a>
 80082ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ee:	07d9      	lsls	r1, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_vfiprintf_r+0x1fe>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	059a      	lsls	r2, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_vfiprintf_r+0x1fe>
 80082f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082fa:	f7fe f929 	bl	8006550 <__retarget_lock_release_recursive>
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	065b      	lsls	r3, r3, #25
 8008302:	f53f af1f 	bmi.w	8008144 <_vfiprintf_r+0x44>
 8008306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008308:	e71e      	b.n	8008148 <_vfiprintf_r+0x48>
 800830a:	ab03      	add	r3, sp, #12
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	462a      	mov	r2, r5
 8008310:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <_vfiprintf_r+0x228>)
 8008312:	a904      	add	r1, sp, #16
 8008314:	4630      	mov	r0, r6
 8008316:	f7fd fe57 	bl	8005fc8 <_printf_i>
 800831a:	e7e4      	b.n	80082e6 <_vfiprintf_r+0x1e6>
 800831c:	08008918 	.word	0x08008918
 8008320:	08008922 	.word	0x08008922
 8008324:	08005a99 	.word	0x08005a99
 8008328:	080080dd 	.word	0x080080dd
 800832c:	0800891e 	.word	0x0800891e

08008330 <__swbuf_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	460e      	mov	r6, r1
 8008334:	4614      	mov	r4, r2
 8008336:	4605      	mov	r5, r0
 8008338:	b118      	cbz	r0, 8008342 <__swbuf_r+0x12>
 800833a:	6a03      	ldr	r3, [r0, #32]
 800833c:	b90b      	cbnz	r3, 8008342 <__swbuf_r+0x12>
 800833e:	f7fd ffef 	bl	8006320 <__sinit>
 8008342:	69a3      	ldr	r3, [r4, #24]
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	071a      	lsls	r2, r3, #28
 800834a:	d501      	bpl.n	8008350 <__swbuf_r+0x20>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b943      	cbnz	r3, 8008362 <__swbuf_r+0x32>
 8008350:	4621      	mov	r1, r4
 8008352:	4628      	mov	r0, r5
 8008354:	f000 f82a 	bl	80083ac <__swsetup_r>
 8008358:	b118      	cbz	r0, 8008362 <__swbuf_r+0x32>
 800835a:	f04f 37ff 	mov.w	r7, #4294967295
 800835e:	4638      	mov	r0, r7
 8008360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	1a98      	subs	r0, r3, r2
 8008368:	6963      	ldr	r3, [r4, #20]
 800836a:	b2f6      	uxtb	r6, r6
 800836c:	4283      	cmp	r3, r0
 800836e:	4637      	mov	r7, r6
 8008370:	dc05      	bgt.n	800837e <__swbuf_r+0x4e>
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff fd99 	bl	8007eac <_fflush_r>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1ed      	bne.n	800835a <__swbuf_r+0x2a>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	701e      	strb	r6, [r3, #0]
 800838c:	6962      	ldr	r2, [r4, #20]
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	429a      	cmp	r2, r3
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x6e>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d5e1      	bpl.n	800835e <__swbuf_r+0x2e>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d1df      	bne.n	800835e <__swbuf_r+0x2e>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7ff fd83 	bl	8007eac <_fflush_r>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d0d9      	beq.n	800835e <__swbuf_r+0x2e>
 80083aa:	e7d6      	b.n	800835a <__swbuf_r+0x2a>

080083ac <__swsetup_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <__swsetup_r+0xa8>)
 80083b0:	4605      	mov	r5, r0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	460c      	mov	r4, r1
 80083b6:	b118      	cbz	r0, 80083c0 <__swsetup_r+0x14>
 80083b8:	6a03      	ldr	r3, [r0, #32]
 80083ba:	b90b      	cbnz	r3, 80083c0 <__swsetup_r+0x14>
 80083bc:	f7fd ffb0 	bl	8006320 <__sinit>
 80083c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c4:	0719      	lsls	r1, r3, #28
 80083c6:	d422      	bmi.n	800840e <__swsetup_r+0x62>
 80083c8:	06da      	lsls	r2, r3, #27
 80083ca:	d407      	bmi.n	80083dc <__swsetup_r+0x30>
 80083cc:	2209      	movs	r2, #9
 80083ce:	602a      	str	r2, [r5, #0]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	e033      	b.n	8008444 <__swsetup_r+0x98>
 80083dc:	0758      	lsls	r0, r3, #29
 80083de:	d512      	bpl.n	8008406 <__swsetup_r+0x5a>
 80083e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e2:	b141      	cbz	r1, 80083f6 <__swsetup_r+0x4a>
 80083e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d002      	beq.n	80083f2 <__swsetup_r+0x46>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7fe feff 	bl	80071f0 <_free_r>
 80083f2:	2300      	movs	r3, #0
 80083f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	2300      	movs	r3, #0
 8008400:	6063      	str	r3, [r4, #4]
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f043 0308 	orr.w	r3, r3, #8
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	b94b      	cbnz	r3, 8008426 <__swsetup_r+0x7a>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841c:	d003      	beq.n	8008426 <__swsetup_r+0x7a>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f883 	bl	800852c <__smakebuf_r>
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	f013 0201 	ands.w	r2, r3, #1
 800842e:	d00a      	beq.n	8008446 <__swsetup_r+0x9a>
 8008430:	2200      	movs	r2, #0
 8008432:	60a2      	str	r2, [r4, #8]
 8008434:	6962      	ldr	r2, [r4, #20]
 8008436:	4252      	negs	r2, r2
 8008438:	61a2      	str	r2, [r4, #24]
 800843a:	6922      	ldr	r2, [r4, #16]
 800843c:	b942      	cbnz	r2, 8008450 <__swsetup_r+0xa4>
 800843e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008442:	d1c5      	bne.n	80083d0 <__swsetup_r+0x24>
 8008444:	bd38      	pop	{r3, r4, r5, pc}
 8008446:	0799      	lsls	r1, r3, #30
 8008448:	bf58      	it	pl
 800844a:	6962      	ldrpl	r2, [r4, #20]
 800844c:	60a2      	str	r2, [r4, #8]
 800844e:	e7f4      	b.n	800843a <__swsetup_r+0x8e>
 8008450:	2000      	movs	r0, #0
 8008452:	e7f7      	b.n	8008444 <__swsetup_r+0x98>
 8008454:	20000024 	.word	0x20000024

08008458 <_raise_r>:
 8008458:	291f      	cmp	r1, #31
 800845a:	b538      	push	{r3, r4, r5, lr}
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	d904      	bls.n	800846c <_raise_r+0x14>
 8008462:	2316      	movs	r3, #22
 8008464:	6003      	str	r3, [r0, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800846e:	b112      	cbz	r2, 8008476 <_raise_r+0x1e>
 8008470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008474:	b94b      	cbnz	r3, 800848a <_raise_r+0x32>
 8008476:	4628      	mov	r0, r5
 8008478:	f000 f830 	bl	80084dc <_getpid_r>
 800847c:	4622      	mov	r2, r4
 800847e:	4601      	mov	r1, r0
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008486:	f000 b817 	b.w	80084b8 <_kill_r>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d00a      	beq.n	80084a4 <_raise_r+0x4c>
 800848e:	1c59      	adds	r1, r3, #1
 8008490:	d103      	bne.n	800849a <_raise_r+0x42>
 8008492:	2316      	movs	r3, #22
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	2001      	movs	r0, #1
 8008498:	e7e7      	b.n	800846a <_raise_r+0x12>
 800849a:	2100      	movs	r1, #0
 800849c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084a0:	4620      	mov	r0, r4
 80084a2:	4798      	blx	r3
 80084a4:	2000      	movs	r0, #0
 80084a6:	e7e0      	b.n	800846a <_raise_r+0x12>

080084a8 <raise>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	@ (80084b4 <raise+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff bfd3 	b.w	8008458 <_raise_r>
 80084b2:	bf00      	nop
 80084b4:	20000024 	.word	0x20000024

080084b8 <_kill_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d07      	ldr	r5, [pc, #28]	@ (80084d8 <_kill_r+0x20>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f7f9 ffe9 	bl	800249c <_kill>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d102      	bne.n	80084d4 <_kill_r+0x1c>
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	b103      	cbz	r3, 80084d4 <_kill_r+0x1c>
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	20000550 	.word	0x20000550

080084dc <_getpid_r>:
 80084dc:	f7f9 bfd6 	b.w	800248c <_getpid>

080084e0 <__swhatbuf_r>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	2900      	cmp	r1, #0
 80084ea:	b096      	sub	sp, #88	@ 0x58
 80084ec:	4615      	mov	r5, r2
 80084ee:	461e      	mov	r6, r3
 80084f0:	da0d      	bge.n	800850e <__swhatbuf_r+0x2e>
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084f8:	f04f 0100 	mov.w	r1, #0
 80084fc:	bf14      	ite	ne
 80084fe:	2340      	movne	r3, #64	@ 0x40
 8008500:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008504:	2000      	movs	r0, #0
 8008506:	6031      	str	r1, [r6, #0]
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	b016      	add	sp, #88	@ 0x58
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	466a      	mov	r2, sp
 8008510:	f000 f848 	bl	80085a4 <_fstat_r>
 8008514:	2800      	cmp	r0, #0
 8008516:	dbec      	blt.n	80084f2 <__swhatbuf_r+0x12>
 8008518:	9901      	ldr	r1, [sp, #4]
 800851a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800851e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008522:	4259      	negs	r1, r3
 8008524:	4159      	adcs	r1, r3
 8008526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800852a:	e7eb      	b.n	8008504 <__swhatbuf_r+0x24>

0800852c <__smakebuf_r>:
 800852c:	898b      	ldrh	r3, [r1, #12]
 800852e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008530:	079d      	lsls	r5, r3, #30
 8008532:	4606      	mov	r6, r0
 8008534:	460c      	mov	r4, r1
 8008536:	d507      	bpl.n	8008548 <__smakebuf_r+0x1c>
 8008538:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	6123      	str	r3, [r4, #16]
 8008540:	2301      	movs	r3, #1
 8008542:	6163      	str	r3, [r4, #20]
 8008544:	b003      	add	sp, #12
 8008546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008548:	ab01      	add	r3, sp, #4
 800854a:	466a      	mov	r2, sp
 800854c:	f7ff ffc8 	bl	80084e0 <__swhatbuf_r>
 8008550:	9f00      	ldr	r7, [sp, #0]
 8008552:	4605      	mov	r5, r0
 8008554:	4639      	mov	r1, r7
 8008556:	4630      	mov	r0, r6
 8008558:	f7fe febe 	bl	80072d8 <_malloc_r>
 800855c:	b948      	cbnz	r0, 8008572 <__smakebuf_r+0x46>
 800855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008562:	059a      	lsls	r2, r3, #22
 8008564:	d4ee      	bmi.n	8008544 <__smakebuf_r+0x18>
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	f043 0302 	orr.w	r3, r3, #2
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	e7e2      	b.n	8008538 <__smakebuf_r+0xc>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	6020      	str	r0, [r4, #0]
 8008576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008582:	b15b      	cbz	r3, 800859c <__smakebuf_r+0x70>
 8008584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f81d 	bl	80085c8 <_isatty_r>
 800858e:	b128      	cbz	r0, 800859c <__smakebuf_r+0x70>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	431d      	orrs	r5, r3
 80085a0:	81a5      	strh	r5, [r4, #12]
 80085a2:	e7cf      	b.n	8008544 <__smakebuf_r+0x18>

080085a4 <_fstat_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4d07      	ldr	r5, [pc, #28]	@ (80085c4 <_fstat_r+0x20>)
 80085a8:	2300      	movs	r3, #0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f9 ffd3 	bl	800255c <_fstat>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_fstat_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_fstat_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000550 	.word	0x20000550

080085c8 <_isatty_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d06      	ldr	r5, [pc, #24]	@ (80085e4 <_isatty_r+0x1c>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7f9 ffd2 	bl	800257c <_isatty>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_isatty_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_isatty_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000550 	.word	0x20000550

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
